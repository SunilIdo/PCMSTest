using PCMS_PhramaMedica._00.Main;
using PCMS_PhramaMedica._01.Administration;
using PCMS_PhramaMedica._03.Draw.Helpers;
using PCMS_PhramaMedica._04.SampleReceving.Model;
using PCMS_PhramaMedica.DrawClasses;
using PCMS_PhramaMedica.MainClasses;
using PCMS_PhramaMedica.StudySetupDesign_Classes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using Telerik.WinControls;
using Telerik.WinControls.UI;
using PCMS_PhramaMedica._03.Draw.ViewECGs;
using PCMS_PhramaMedica.SampleReceivingClasses;
using PharmaMedica.BLL.Utilities;
using PharmaMedica.DAL;
using PCMS_PhramaMedica.Properties;
using System.Text.RegularExpressions;
using PCMS_PhramaMedica._03.Draw.CommonHelperForms;
using Telerik.WinForms.Documents.Model;
using System.Configuration;
using PCMS_PhramaMedica.CommonHelperForms;

namespace PCMS_PhramaMedica._03.Draw
{
    public partial class Screening : DataChild
    {
        //flag for checking if all tabs of medical interview are e-signed
        private bool _IsMedicalInterviewAllDone = false;

        //variable that Holds selected page
        private RadPageViewPage _SelectedPage = null;

        //******************* Tool Tip **************              
        private ToolTip _toolTip = new ToolTip();
        string uploadedFile = string.Empty;
        int uploadedFileId = default(int);
        bool IsPulseOximetryRequired = false;

        #region Properties & Variables
        //scanned ECG file path received from physician email
        string FilePathOfEmailedECG = string.Empty;

        DataTable dtScreeningEvaluationAns = null;
        DataTable dtMedicalHistoryAns = null;
        //vairiable that saves Drop comment box comment
        string droppedComment = string.Empty;
        private string ModuleNames = "Screening";
        internal string standardDateTime = string.Empty;
        private ClearDirtyEvents dirtyEvents = new ClearDirtyEvents();
        public string studyId = string.Empty;
        internal RadTreeNode StudyID = null;
        internal RadTreeNode SubjectKey = null;
        internal string ValueOfKey = string.Empty;
        internal string SubjectID = string.Empty;
        internal int _subjectKey;

        //.......... Screening Evaluation & medical History Variables...............
        internal string _StudyID = string.Empty;
        internal string _SubjectID = string.Empty;
        internal string type = string.Empty;
        internal int codeid = default(int);
        internal int _Option = default(int);
        internal string _Question = string.Empty;
        internal int _QuestionNumber = default(int);
        internal string[] _SubQuestion = null;
        internal string _YesNo = string.Empty;
        internal string answer1 = string.Empty;
        internal string answer2 = string.Empty;
        internal string answer3 = string.Empty;
        public bool dateInRange = false;

        internal int _CounterAnsweredQuestions = default(int);
        internal int _CounterAnsweredQuestionsMH = default(int);
        internal int _CounterAnsweredIECC = default(int);
        //........... Influenza Time & Date Values..........
        internal Dictionary<string, string> dateTimeRepeat1 = null;

        internal int count = 0;
        internal Dictionary<string, string> dateTimeRepeat2 = null;
        internal List<int> checkedBoxes = new List<int>();

        internal PharmaMedica.DAL.Entities.DrawEntities db;
        internal string moduleName = string.Empty;
        internal string reason = string.Empty;
        internal string tabName = string.Empty;
        private const string PRESTUDY = "PR";

        //Subject Signed 
        bool isSubjectSigned = false;

        // ICF eSign Variables
        private string tmpICFFile = string.Empty;

        // PCF eSign Variables
        private string tmpPCFFile = string.Empty;

        //  VCF eSign Variables
        private string tmpVCFFile = string.Empty;
        private bool IsVCFInvestigatorRequired = default(bool);
        // Demographics Race Variables

        RadCheckBox[] RaceCheckBoxes = null;

        List<string> RaceChecked = null;
        string _Race = string.Empty;
        // Vitals & ECG Remaining Time
        public DateTime endTime1Vital;
        public DateTime endTime2Vital;
        public DateTime endTime1ECG;
        public DateTime endTime2ECG;
        //  IECC 
        DataTable dtScreeningIECCQuestionsAns = null;
        Control lastIECCActiveGrid = null;

        //for Urine Required test
        bool drugRequired = default(bool);
        bool cotinineRequired = default(bool);
        bool hcgRequired = default(bool);

        //flag that indicates All tabs before IECC are esigned
        bool IsAllTasksBeforeIECCEsigned = true;

        bool IsICFRequired = default(bool);

        int Visit;
        #endregion

        /// <summary>
        /// constructor
        /// </summary>
        public Screening()
        {
            InitializeComponent();
            Visit = (int)EnumModules.Visit.SCREENING;
            _SelectedPage = new RadPageViewPage();
            _SelectedPage.Name = "pgvSCDefaultPage";
            db = EntityFactory.GetDB();
        }

        /// <summary>
        ///  load studyID to the drop down (studyID)
        /// </summary>
        public override void RefreshData()
        {
            studyId = ToolBox.GetProject();
            StudyID = new RadTreeNode(studyId);  //sunil 
            ResetScreeningOnStudyChange();
            ReadOnlyControls();
            CheckScreeningDateByStudyChange();
            // .......... Results (HL7)............
            ClearResults();
            IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
            IsICFRequired = OnScreeningHelper.IsICFRequired(studyId);
            IsPulseOximetryRequired = OnScreeningHelper.IsPulseOximetryRequired(studyId);
            List<Control> _notRequiredPages = new List<Control>();
            if (!IsICFRequired)
                _notRequiredPages.Add(pgvICF);
            HideShowICFTabAsRequired();
            ControlsAccessHelper.SetEnabled(pgvOnScreeningPages, _notRequiredPages);
        }
        private void HideShowICFTabAsRequired()
        {
            //***************** Check if ICF Required*********
            if (IsICFRequired)
            {
                pgvICF.Item.Visibility = Telerik.WinControls.ElementVisibility.Visible;
                cbICFCopyYes.ReadOnly = false;
                cbICFCopyNo.ReadOnly = false;
                gbICFCopyYN.Visible = true;
                //cbICFIDYes.Checked = true;
                //cbICFIDNo.Checked = false;
                //cbICFIDYes.ReadOnly = true;
                //cbICFIDNo.ReadOnly = true;
            }
            else
            {
                pgvICF.Item.Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                cbICFCopyYes.ReadOnly = true;
                cbICFCopyNo.ReadOnly = true;
                gbICFCopyYN.Visible = false;
                //cbICFIDYes.Checked = false;
                //cbICFIDNo.Checked = true;
                //cbICFIDYes.ReadOnly = false;
                //cbICFIDNo.ReadOnly = false;
            }
        }
        public override void AfterSaveOnExit()
        {
            base.AfterSaveOnExit();
        }
        /// <summary>
        /// General Controls Enable/Disable helper
        /// </summary>       

        /// <summary>
        /// Form Load
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Screening_Load(object sender, EventArgs e)
        {
            //........ Disable btn if Subject Recived Package (ID verification)
            btnIDVer.Enabled = false;
            txtScanPCF.Focus();
            txtScanICF.Focus();
            rgvScreeningEvaluation.ClearSelection();
            rgvMedicalHistory.ClearSelection();
            tbScreeningRepeatResults.Item.Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
        }

        #region ===================== Subject Information =========================

        /// <summary>
        /// The fields are not Editable (ReadOnly)
        /// </summary>
        private void ReadOnlyControls()
        {
            foreach (Control control in GBSubjectESign.Controls)
            {
                if (control is RadTextBox)
                {
                    RadTextBox textBox = (RadTextBox)control;
                    textBox.ReadOnly = true;
                    textBox.BackColor = System.Drawing.SystemColors.Window;
                }
            }
            //foreach (Control control in GBSubjectComplete.Controls)
            //{
            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBSubjectInfo.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;
            //        listView.Enabled = false;
            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (SubjectPicture.Image != null)
            //    {
            //        SubjectPicture.Image.Dispose();
            //        SubjectPicture.Image = null;
            //    }
            //}
            //foreach (Control control in GBMedications.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;
            //        listView.Enabled = false;
            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBMedicalConditions.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;
            //        if (listView.Items.Count > 0)
            //            listView.Enabled = false;
            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBMeasurements.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;
            //        //checkBox.ReadOnly = true;
            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBManualDescription.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBHistoryInfo.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBGeneral.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBDescription.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBDemoGraphics.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBComments.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            //foreach (Control control in GBBlood.Controls)
            //{
            //    if (control is RadTextBox)
            //    {
            //        RadTextBox textBox = (RadTextBox)control;
            //        textBox.ReadOnly = true;
            //        textBox.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is ListView)
            //    {
            //        ListView listView = (ListView)control;

            //        listView.BackColor = System.Drawing.SystemColors.Window;
            //    }

            //    if (control is RadCheckBox)
            //    {
            //        RadCheckBox checkBox = (RadCheckBox)control;
            //        checkBox.ReadOnly = true;
            //        checkBox.BackColor = System.Drawing.SystemColors.Window;
            //    }
            //}
            foreach (Control control in GBSInfo.Controls)
            {
                if (control is RadTextBox)
                {
                    RadTextBox textBox = (RadTextBox)control;
                    textBox.ReadOnly = true;
                    textBox.BackColor = System.Drawing.SystemColors.Window;
                }

                if (control is RadCheckBox)
                {
                    RadCheckBox checkBox = (RadCheckBox)control;
                    checkBox.ReadOnly = true;
                    checkBox.BackColor = System.Drawing.SystemColors.Window;
                }
            }
            foreach (Control control in GBDemog.Controls)
            {
                if (control is RadTextBox)
                {
                    RadTextBox textBox = (RadTextBox)control;
                    textBox.ReadOnly = true;
                    textBox.BackColor = System.Drawing.SystemColors.Window;
                }

                if (control is RadCheckBox)
                {
                    RadCheckBox checkBox = (RadCheckBox)control;
                    checkBox.ReadOnly = true;
                    checkBox.BackColor = System.Drawing.SystemColors.Window;
                }
            }
            txtSubjecteSignDateTime.ReadOnly = true;
            txtSubjectIDIDVer.ReadOnly = true;
            txtSubjectNameIDVer.ReadOnly = true;


        }

        /// <summary>
        /// Enable /Disable Controls on the PageView base on Privlege
        /// </summary>
        /// <param name="enable"></param>
        private void EnableControls(bool enable)
        {
            //foreach (Control ctrl in pgvSubjectInfo.Controls)
            //{
            //    ctrl.Enabled = enable;
            //}
            //foreach (Control ctrl in pgvMedical.Controls)
            //{
            //    ctrl.Enabled = enable;
            //    txtSubjectIDMedical.Enabled = false;
            //}
            //foreach (Control ctrl in pgvStudyHistory.Controls)
            //{
            //    ctrl.Enabled = enable;
            //    txtSubjectIDHistory.Enabled = false;
            //}
            //foreach (Control ctrl in pgvComments.Controls)
            //{
            //    ctrl.Enabled = enable;
            //    txtSubjectIDComments.Enabled = false;
            //}
            //foreach (Control ctrl in pgvInfluenza.Controls)
            //{
            //    ctrl.Enabled = enable;
            //}
            //foreach (Control ctrl in pgvInfluenza.Controls)
            //{
            //    ctrl.Enabled = enable;
            //}
        }

        /// <summary>
        /// Convert DateTime to "{MMM d, yyyy}" format
        /// </summary>
        /// <returns></returns>
        private string GetCurrentStandardDateTime()
        {
            return DateTime.Now.ToString("MMM dd,yyyy HH:mm");
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        private void RetrieveSubjectNameandKey()
        {
            if (studyId.Equals("Select a Project"))
            {
                txtSubjectIDs.Text = "";
                txtBirthDates.Text = "";
                txtAges.Text = "";
                txtGenders.Text = "";
                txtSubjectNameIDVer.Text = "";
                txtSubjectIDIDVer.Text = "";
                txtSubjecteSignDateTime.Text = "";
                subjectSignitureBox.Image = null;
                subjectSign.Visible = true;
                subjectSign.Location = new Point(421, 19);
                subjectSign.Size = new Size(260, 93);
                subjectSignitureBox.Visible = false;
                ddSubjects.Items.Clear();
                ddSubjects.SelectedIndex = -1;
                btnSubjectDroppedScreening.Enabled = false;
                return;
            }

            using (DbConnection dbCon = new DbConnection())
            {
                dbCon.OpenConnection();
                SqlConnection _recruitCon = dbCon.GetOtherSqlConnection("PSMSRecruit");

                string query = @"SELECT [SubjectKey]
                           FROM [dbo].[FinalScreeningSubject]
                              WHERE [StudyID]='" + studyId + "'";
                DataTable dtSubjects = dbCon.ExecuteSelectQuery(query, new SqlParameter[] { }, false);
                string _subjectLists = string.Empty;
                foreach (DataRow row in dtSubjects.Rows)
                {
                    _subjectLists += "'" + row["SubjectKey"].ToString() + "',";
                }
                if (_subjectLists.Length > 0)
                {
                    _subjectLists = _subjectLists.Remove(_subjectLists.Length - 1);
                }
                string _querySubjects = @"SELECT Distinct s.[SubjectNameFirst] + ' ' +s.[SubjectNameFamily] AS Name,s.[SubjectKey]
                                      FROM[dbo].[SubjectsStudyHistory] ssh
                                      INNER JOIN[dbo].[Subject] s
                                      ON ssh.[SubjectKey] = s.[SubjectKey]
                                      WHERE ssh.[StudyID] like '%" + studyId + "%' AND ssh.StatusCode in(1,4,5,6)";

                if (!string.IsNullOrEmpty(_subjectLists))
                    _querySubjects += " or ssh.[SubjectKey] in(" + _subjectLists + ") ORDER BY Name ASC";
                else
                    _querySubjects += " ORDER BY Name ASC";
                //ssh.StatusCode in(1,6) -- Original Status just for Demo Got replace to ssh.StatusCode in(4,5)
                SqlCommand cmd = new SqlCommand(_querySubjects, _recruitCon);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable _dtSubjects = new DataTable();
                sda.Fill(_dtSubjects);
                var list = _dtSubjects.AsEnumerable().Select(x => new
                {
                    SubjectKey = x.Field<Int32>("SubjectKey"),
                    Name = x.Field<string>("Name")
                }).ToList();
                dbCon.CloseConnection();
                ddSubjects.ValueMember = "SubjectKey";
                ddSubjects.DisplayMember = "Name";
                ddSubjects.SelectedIndexChanged -= new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddSubjects_SelectedIndexChanged);
                ddSubjects.DataSource = list;
                ddSubjects.SelectedItem = null;
                ddSubjects.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddSubjects_SelectedIndexChanged);
            }
        }

        /// <summary>
        /// Get Subject Photo(Image) by SubjectKey
        /// </summary>
        /// <param name="subjectKey"></param>
        private void RetrievePhoto(string subjectKey)
        {
            SubjectPicture.Image = null;
            SubjectPicture.SizeMode = PictureBoxSizeMode.Normal;
            string value = string.Empty;
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.RecruiteConnection))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT TOP 1 [SubjectPhoto] FROM [Recruit].[dbo].[SubjectPhoto]
                      Where  SubjectKey='" + subjectKey + "' Order by PhotoKey desc");
                    SqlCommand cmd = new SqlCommand(query, connection);
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataSet ds = new DataSet();
                    da.Fill(ds);
                    connection.Close();

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        //Try

                        Bitmap imgShow = default(Bitmap);
                        Graphics g = default(Graphics);
                        double divideBy = 0;
                        double divideByH = 0;
                        double divideByW = 0;

                        MemoryStream memorybits = new MemoryStream((byte[])ds.Tables[0].Rows[0]["SubjectPhoto"]);
                        Bitmap imgOrg = new Bitmap(memorybits);

                        divideByW = imgOrg.Width / SubjectPicture.Width;
                        divideByH = imgOrg.Height / SubjectPicture.Height;

                        if (divideByW > 1 | divideByH > 1)
                        {
                            if (divideByW > divideByH)
                            {
                                divideBy = divideByW;
                            }
                            else
                            {
                                divideBy = divideByH;
                            }

                            imgShow = new Bitmap(Convert.ToInt32(Convert.ToDouble(imgOrg.Width) / divideBy), Convert.ToInt32(Convert.ToDouble(imgOrg.Height) / divideBy));

                            imgShow.SetResolution(320, 240);
                            g = Graphics.FromImage(imgShow);
                            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                            g.DrawImage(imgOrg, new Rectangle(0, 0, Convert.ToInt32(Convert.ToDouble(imgOrg.Width) / divideBy), Convert.ToInt32(Convert.ToDouble(imgOrg.Height) / divideBy)), 0, 0, imgOrg.Width, imgOrg.Height, GraphicsUnit.Pixel);
                            g.Dispose();
                        }
                        else
                        {
                            imgShow = new Bitmap(imgOrg.Width, imgOrg.Height);
                            //   imgShow.SetResolution(imgOrg.HorizontalResolution, imgOrg.VerticalResolution)
                            imgShow.SetResolution(320, 240);
                            g = Graphics.FromImage(imgShow);
                            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                            g.DrawImage(imgOrg, new Rectangle(0, 0, imgOrg.Width, imgOrg.Height), 0, 0, imgOrg.Width, imgOrg.Height, GraphicsUnit.Pixel);
                            g.Dispose();
                        }
                        imgOrg.Dispose();
                        SubjectPicture.Image = imgShow;
                    }
                    else
                    {
                        SubjectPicture.Image = null;
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Subject Picture", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void RetrieveSubjectBasicInfo(string subjectKey)
        {
            int gender = -1;
            DateTime SubjectAge = default(DateTime);
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.RecruiteConnection))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT top 1 s.SubjectID,FORMAT(s.SubjectDateBirth, 'MMM d, yyyy') AS BirthDate,s.SubjectGender
                    FROM [dbo].[Subject] s
                    WHERE S.SubjectKey='" + subjectKey + "'");
                    SqlCommand cmd = new SqlCommand(query, connection);
                    var list = cmd.ExecuteReader();
                    while (list.Read())
                    {
                        txtSubjectIDs.Text = list["SubjectID"].ToString();
                        txtBirthDates.Text = list["BirthDate"].ToString();
                        int.TryParse(list["SubjectGender"].ToString(), out gender);
                    }
                    connection.Close();
                }
                if (gender == 0)
                {
                    txtGenders.Text = "Male";
                }
                else if (gender == 1)
                {
                    txtGenders.Text = "Female";
                }
                // txtGenders.Text = "Female"; // was for test
                // Age                    
                if (DateTime.TryParse(txtBirthDates.Text.Trim(), out SubjectAge))
                    txtAges.Text = CommonHelpers.GetAge(SubjectAge).ToString();
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Clear All Controls On PageView after re-selecting StudyID or SubjectName
        /// </summary>
        public void ResetAllControls()
        {
            txtUrineInvestigatorComment.ResetText();
            txtMHInvestigatorComment.ResetText();
            txtSEInvestigatorComment.ResetText();
            txtSCIECCPIComments.ResetText();
            switch (pgvOnScreeningPages.SelectedPage.Name)
            {
                case "pgvInfluenza":
                    //............ influenza..................
                    CommonHelpers.ResetControls(GBInfluenzaeSign);
                    CancelAddInfluenzaQuestionsAnsCheckBoxEvents(true);
                    CommonHelpers.ResetControls(QuestionsPanel.PanelContainer);
                    CancelAddInfluenzaQuestionsAnsCheckBoxEvents(false);
                    CommonHelpers.ResetControls(TempMeasurmentPanel.PanelContainer);
                    lblSCInfluenzaEsignedBy.Text = string.Empty;
                    lblSCInfluenzaEsignedDate.Text = string.Empty;
                    //CommonHelpers.ResetControls(TempMeasurmentPanel.PanelContainer);
                    break;
                case "pgvIDVerfication":
                    CommonHelpers.ResetControls(GBIDVery);
                    CommonHelpers.ResetControls(GBStudyPackageIDVer);
                    CommonHelpers.ResetControls(GBDemog);
                    CommonHelpers.ResetControls(GBSInfo);
                    CommonHelpers.ResetControls(GBSubjectESign);
                    lblSCIDVerEsignedBy.Text = string.Empty;
                    lblSCIDVerEsignedDate.Text = string.Empty;
                    break;
                case "pgvConsent":
                    GC.Collect();
                    switch (pgvConsentPCFVCF.SelectedPage.Name)
                    {
                        case "pgvVCF":
                            txtScanPCF.Clear();
                            txtScanPCF.Focus();
                            if (!string.IsNullOrEmpty(tmpVCFFile))
                            {
                                if (System.IO.File.Exists(tmpVCFFile))
                                    System.IO.File.Delete(tmpVCFFile);
                                tmpVCFFile = string.Empty;
                            }
                            pcmsWordSCVCF.Document.Selection.SelectAll();
                            pcmsWordSCVCF.Delete(false);
                            break;
                        case "pgvPCF":
                            txtScanPCF.Clear();
                            txtScanPCF.Focus();
                            if (!string.IsNullOrEmpty(tmpPCFFile))
                            {
                                if (System.IO.File.Exists(tmpPCFFile))
                                    System.IO.File.Delete(tmpPCFFile);
                                tmpPCFFile = string.Empty;
                            }
                            pcmsWordSCPCF.Document.Selection.SelectAll();
                            pcmsWordSCPCF.Delete(false);
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvICF":
                    GC.Collect();
                    if (IsICFRequired)
                    {
                        txtScanICF.Clear();
                        txtScanICF.Focus();
                        if (!string.IsNullOrEmpty(tmpPCFFile))
                        {
                            if (System.IO.File.Exists(tmpICFFile))
                                System.IO.File.Delete(tmpICFFile);
                            tmpICFFile = string.Empty;
                        }
                        pcmsWordSCICF.Document.Selection.SelectAll();
                        pcmsWordSCICF.Delete(false);
                    }
                    break;
                case "pgvMedicalInterview":
                    switch (pgvMedicalInterviews.SelectedPage.Name)
                    {
                        case "pgvDemographics":
                            txtScanDemographic.Clear();
                            txtScanDemographic.Focus();
                            CommonHelpers.ResetControls(GBRace);
                            CommonHelpers.ResetControls(GBEthincity);
                            CommonHelpers.ResetControls(GBeSignDemographic);
                            lblSCDemoGraphEsignedBy.Text = string.Empty;
                            lblSCDemoGraphEsignedDate.Text = string.Empty;
                            //HelperFunctions.EnableParentAndAllChildControls(GBRace);
                            //HelperFunctions.EnableParentAndAllChildControls(GBEthincity);
                            break;
                        case "pgvScreeningEvaluations":
                            GC.Collect();
                            txtScanScreeningEvaluation.Clear();
                            txtScanScreeningEvaluation.Focus();
                            ClearSCEvaluationControls();
                            lblSCSEEsignedBy.Text = string.Empty;
                            lblSCSEEsignedDate.Text = string.Empty;
                            break;
                        case "pgvMedicalHistory":
                            GC.Collect();
                            txtScanMedicalHistory.Clear();
                            txtScanMedicalHistory.Focus();
                            ClearMedicalHistoryControls();
                            lblSCMHEsignedBy.Text = string.Empty;
                            lblSCMHEsignedDate.Text = string.Empty;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvHeightWeight":
                    GC.Collect();
                    txtScanHeightWeight.Clear();
                    txtScanHeightWeight.Focus();
                    lblHWWeightRange.ResetText();
                    lblHWBMIRange.ResetText();
                    CommonHelpers.ResetControls(GBHW);
                    CommonHelpers.ResetControls(GBHWSign);
                    lblSCHWEsignedBy.Text = string.Empty;
                    lblSCHWEsignedDate.Text = string.Empty;
                    break;
                case "pgvVitals":
                    GC.Collect();
                    txtScanVital.Clear();
                    txtScanVital.Focus();
                    // this.cbConfirmSubjectSeated.CheckStateChanged -= new System.EventHandler(this.cbConfirmSubjectSeated_CheckStateChanged);
                    cbConfirmSubjectSeated.Checked = false;
                    // this.cbConfirmSubjectSeated.CheckStateChanged += new System.EventHandler(this.cbConfirmSubjectSeated_CheckStateChanged);

                    // this.cbConfirmSubjectSeatedR1.CheckStateChanged -= new System.EventHandler(this.cbConfirmSubjectSeatedR1_CheckStateChanged);
                    cbConfirmSubjectSeatedR1.Checked = false;
                    // this.cbConfirmSubjectSeatedR1.CheckStateChanged += new System.EventHandler(this.cbConfirmSubjectSeatedR1_CheckStateChanged);

                    // this.cbConfirmSubjectSeatedR2.CheckStateChanged -= new System.EventHandler(this.cbConfirmSubjectSeatedR2_CheckStateChanged);
                    cbConfirmSubjectSeatedR2.Checked = false;
                    // this.cbConfirmSubjectSeatedR2.CheckStateChanged += new System.EventHandler(this.cbConfirmSubjectSeatedR2_CheckStateChanged);
                    CommonHelpers.ResetControls(GBVital);
                    CommonHelpers.ResetControls(GBNoRepeatVital);
                    CommonHelpers.ResetControls(GBVitalR1);
                    CommonHelpers.ResetControls(GBVitalR2);
                    lblSCVitalEsignedBy1.Text = string.Empty;
                    lblSCVitalEsignedBy2.Text = string.Empty;
                    lblSCVitalEsignedBy3.Text = string.Empty;
                    lblSCVitalEsignedDate1.Text = string.Empty;
                    lblSCVitalEsignedDate2.Text = string.Empty;
                    lblSCVitalEsignedDate3.Text = string.Empty;
                    break;
                case "pgvECGG":
                    GC.Collect();
                    txtScanECG.Clear();
                    txtScanECG.Focus();
                    CommonHelpers.ResetControls(GBECGALL);
                    CommonHelpers.ResetControls(GBECGNoRepeat);
                    CommonHelpers.ResetControls(GBECGR1);
                    CommonHelpers.ResetControls(GBECGR2);
                    lblSCECGEsignedBy1.Text = string.Empty;
                    lblSCECGEsignedBy2.Text = string.Empty;
                    lblSCECGEsignedBy3.Text = string.Empty;
                    lblSCECGEsignedDate1.Text = string.Empty;
                    lblSCECGEsignedDate2.Text = string.Empty;
                    lblSCECGEsignedDate3.Text = string.Empty;
                    break;
                case "pgvSCSafetyLabs":
                    GC.Collect();
                    txtBloodSubjectScanID.Clear();
                    txtBloodSubjectScanID.Focus();
                    switch (pgvSafetyLabTests.SelectedPage.Name)
                    {
                        case "pgvLabBlood":
                            CommonHelpers.ResetControls(GBLabBloodCollection);
                            CommonHelpers.ResetControls(GBBloodSample);
                            lblSCLabBloodEsignedBy.Text = string.Empty;
                            lblSCLabBloodEsignedDate.Text = string.Empty;
                            txtLabBloodBarCodedBy.Text = string.Empty;
                            txtSCLabBloodBarCodedDate.Text = string.Empty;
                            break;
                        case "pgvLabUrine":
                            CommonHelpers.ResetControls(pnlLabUrineMain);
                            lblSCLabUrineEsignedBy.Text = string.Empty;
                            lblSCLabUrineEsignedDate.Text = string.Empty;
                            txtUrineCodedBy.Text = string.Empty;
                            txtSCLabUrineBarCodedDate.Text = string.Empty;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvUrineTests":
                    GC.Collect();
                    txtScanUrine.Clear();
                    txtScanUrine.Focus();
                    lblSCUrineRepeatComment.Text = string.Empty;
                    lblSCDrugTestPFBy.Text = string.Empty;
                    lblSCDrugTestPFDate.Text = string.Empty;
                    CommonHelpers.ResetControls(gbUrineTestParent);
                    lblSCUrineCotPerformedBy.Text = string.Empty;
                    lblSCUrineCotPerformedDate.Text = string.Empty;
                    lblSCUrineCotVerifiedBy.Text = string.Empty;
                    lblSCUrineCotVerifiedDate.Text = string.Empty;

                    lblSCUrineDrugPerformedBy.Text = string.Empty;
                    lblSCUrineDrugPerformedDate.Text = string.Empty;
                    lblSCUrineDrugVerifiedBy.Text = string.Empty;
                    lblSCUrineDrugVerifiedDate.Text = string.Empty;

                    lblSCUrineHCGPerformedBy.Text = string.Empty;
                    lblSCUrineHCGPerformedDate.Text = string.Empty;
                    lblSCUrineHCGVerifiedBy.Text = string.Empty;
                    lblSCUrineHCGVerifiedDate.Text = string.Empty;
                    CommonHelpers.ResetControls(GBDrugAbuse);
                    CommonHelpers.ResetControls(pnlSCDrugAbuseResult.PanelContainer);
                    CommonHelpers.ResetControls(GBCotinineTest);
                    CommonHelpers.ResetControls(pnlSCCotinineResult.PanelContainer);
                    CommonHelpers.ResetControls(GBhCGPregnancy);
                    CommonHelpers.ResetControls(pnlSCHCGResult.PanelContainer);
                    break;
                case "pgvResults":
                    ClearResults();
                    GC.Collect();
                    break;
                case "pgvIECC":
                    GC.Collect();
                    txtScanIECCSubjectID.Clear();
                    txtScanIECCSubjectID.Focus();
                    CommonHelpers.ResetControls(rgbIECC);
                    lblSCIECCEsignedBy.Text = string.Empty;
                    lblSCIECCEsignedDate.Text = string.Empty;
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// On Study Change reset all subjects and screening controls
        /// </summary>
        private void ResetScreeningOnStudyChange()
        {
            GC.Collect();
            ClearSubjectBasicInfoAndImage();
            txtSubjectNameIDVer.Text = "";
            txtSubjectIDIDVer.Text = "";
            txtSubjecteSignDateTime.Text = "";

            // ..... ID Verification Image....
            subjectSign.ClearTablet();
            subjectSignitureBox.Image = null;
            subjectSign.Visible = true;
            subjectSign.Location = new Point(421, 19);
            subjectSign.Size = new Size(260, 93);
            subjectSignitureBox.Visible = false;

            // ResetAllControls();
            RetrieveSubjectNameandKey();
            ResetAllControls();
        }

        /// <summary>
        /// Populate Screeing based on Subject Name
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ddSubjects_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                GC.Collect();
                ClearSubjectBasicInfoAndImage();
                //CheckScreeningDate();
                //if (!dateInRange)
                //    return;
                if (ddSubjects.SelectedIndex > -1 && ddSubjects.SelectedValue != null)
                {
                    ValueOfKey = ddSubjects.SelectedValue.ToString(); //listKeyValue.FirstOrDefault(x => x.Value == ddSubjects.SelectedItem.Text).Key;
                    RetrievePhoto(ValueOfKey);
                    SubjectKey = new RadTreeNode(ValueOfKey);
                    int.TryParse(SubjectKey.Text, out _subjectKey);
                    RetrieveSubjectBasicInfo(ValueOfKey);
                    //EnableControlsOnSubjectChange();
                    ResetScreeningEvaluationAnsTable();
                    ResetScreeningIECCAnsTable();
                    ResetScreeningMedicalHistoryAnsTable();
                    //counter of IECC
                    _CounterAnsweredIECC = 0;
                    _CounterAnsweredQuestionsMH = 0;
                    _CounterAnsweredQuestions = 0;
                    pgvOnScreeningPages_SelectedPageChanged(null, null);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Utils.HideProgressMessage();
            }
        }
        private void ResetScreeningEvaluationAnsTable()
        {
            if (dtScreeningEvaluationAns != null)
                dtScreeningEvaluationAns.Clear();
            dtScreeningEvaluationAns = null;
        }
        private void ResetScreeningIECCAnsTable()
        {
            if (dtScreeningIECCQuestionsAns != null)
                dtScreeningIECCQuestionsAns.Clear();
            dtScreeningIECCQuestionsAns = null;
        }
        private void ResetScreeningMedicalHistoryAnsTable()
        {
            if (dtMedicalHistoryAns != null)
                dtMedicalHistoryAns.Clear();
            dtMedicalHistoryAns = null;
        }
        private void ClearSubjectBasicInfoAndImage()
        {
            txtSubjectIDs.ResetText();
            txtBirthDates.ResetText();
            txtAges.ResetText();
            txtGenders.ResetText();
            SubjectPicture.Image = null;
        }

        /// <summary>
        /// Enable Controls When Subject Change
        /// </summary>
        private void EnableControlsOnSubjectChange()
        {
            ddlDocumentTypeInf.Enabled = true;
            ddlDocumentTypeIDVer.Enabled = true;
            cbICFCopyNo.Enabled = true;
            cbICFCopyYes.Enabled = true;
            cbYesRecievedPack.Enabled = true;
            cbNoRecievedPack.Enabled = true;
            GBLabBloodCollection.Enabled = true;
            GBBloodSample.Enabled = true;
            rgvScreeningEvaluation.Enabled = true;
            rgvMedicalHistory.Enabled = true;
        }

        /// <summary>
        /// Clear form after changing study
        /// </summary>
        private void ClearformAfterChangingStudy()
        {
            ResetAllControls();
            txtSubjectIDs.Text = "";
            txtBirthDates.Text = "";
            txtAges.Text = "";
            txtGenders.Text = "";
            txtSubjectNameIDVer.Text = "";
            txtSubjectIDIDVer.Text = "";
            txtSubjecteSignDateTime.Text = "";
            txtUrineCodedBy.Clear();
            SubjectPicture.Image = null;

            txtLabBloodBarCodedBy.Clear();
            // ..... Clear All Proceed/Fail/Drop Comments before population


            //txtPCFCordinatorComment.Clear();
            //txtVCFCordinatorComment.Clear();
            //txtICFCordinatorComment.Clear();
            txtDemographicCoridinatorComment.Clear();
            txtSECordinatorComment.Clear();
            txtMHCordinatorComment.Clear();
            txtHWCordinatorComment.Clear();

            txtBloodCordinatorComment.Clear();
            txtUrinePFComment.Clear();
            txtIECCPFComment.Clear();
        }
        #endregion

        #region ========================= Public Helper Methods===================
        private bool IsIDCheckedInInfluenza()
        {
            bool _isIDChecked = OnScreeningHelper.IsInfluenzaIDChecked(studyId, ValueOfKey);
            if (_isIDChecked)
                CommonHelpers.SetReadOnlyProperties(GBInfluenzaeSign, true);
            else
                CommonHelpers.SetReadOnlyProperties(GBInfluenzaeSign, false);
            return _isIDChecked;
        }
        private void CheckeSignDemographic(string subjectKey)
        {
            //....... Process Complete / Work Indicator
            if (_SelectedPage.Equals(pgvDemographics))
                GetDemographic(ValueOfKey);
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool DemographicSigned = OnScreeningHelper.IsDemographicSigned(studyId, subjectKey);

            //...... Demographic .....
            if (DemographicSigned == true)
            {
                _IsMedicalInterviewAllDone = true;
                if (_SelectedPage.Equals(pgvDemographics))
                {
                    CommonHelpers.SetReadOnlyProperties(GBRace, true);
                    CommonHelpers.SetReadOnlyProperties(GBEthincity, true);
                    CommonHelpers.SetReadOnlyProperties(GBeSignDemographic, true);
                    btnSCVerifyDemographic.Enabled = true;
                }
                pgvDemographics.Image = Complete;
            }
            else
            {
                _IsMedicalInterviewAllDone = false;
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvDemographics))
                {
                    List<Control> _noReadOnly = new List<Control>();
                    _noReadOnly.Add(txtDMOtherAsian);
                    CommonHelpers.SetReadOnlyWithException(GBRace, _noReadOnly, false);
                    CommonHelpers.SetReadOnlyProperties(GBEthincity, false);
                    CommonHelpers.SetReadOnlyProperties(GBeSignDemographic, false);
                    btnESignRace.Enabled = true;
                    GBRace.Enabled = true;
                    GBEthincity.Enabled = true;
                    GBeSignDemographic.Enabled = true;
                    btnSCVerifyDemographic.Enabled = false;
                }
            }
        }
        private void CheckeSignScreeningEvaluation(string subjectKey)
        {
            //....... Process Complete / Work Indicator
            if (_SelectedPage.Equals(pgvScreeningEvaluations))
                DipslayDataOnScreeningEvalualtionGrid();
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool SceeningEvalSigned = OnScreeningHelper.IsScreeningEvalSigned(studyId, subjectKey);
            DataTable IsAdditionalInfoRequired = InvestigatorScreeningHelper.IsScreeningEvalRequireAdditionalInfo(studyId, subjectKey);
            bool _isAddnRequired = default(bool);
            string _invComments = string.Empty;
            if (IsAdditionalInfoRequired.Rows.Count > 0)
            {
                _isAddnRequired = Convert.ToBoolean(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString());
                _invComments = IsAdditionalInfoRequired.Rows[0]["InvestigatorComment"].ToString();
            }
            txtSEInvestigatorComment.Visible = false;
            lblSEInvCommentLabel.Visible = false;
            if (SceeningEvalSigned == true)
            {
                if (_isAddnRequired)
                {
                    if (_SelectedPage.Equals(pgvScreeningEvaluations))
                    {
                        btnSCSEAdditionalInfo.Enabled = true;
                        txtSEInvestigatorComment.Text = _invComments.Split('|').LastOrDefault();
                        txtSEInvestigatorComment.Visible = true;
                        lblSEInvCommentLabel.Visible = true;
                        _IsMedicalInterviewAllDone = false;
                        //btneSignScreeningEval.Enabled = true;
                        //btnNextQuestionSE.Enabled = true;
                        //txtSECordinatorComment.ReadOnly = false;
                        //CommonHelpers.SetReadOnlyProperties(GBQ1, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ2, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ3, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ4, false);
                        //btneSignScreeningEval.Enabled = true;
                    }
                }
                else
                {
                    _IsMedicalInterviewAllDone = true;
                    btnSCSEAdditionalInfo.Enabled = false;
                    txtSEInvestigatorComment.Visible = false;
                    lblSEInvCommentLabel.Visible = false;
                    txtSEInvestigatorComment.Text = "";
                    pgvScreeningEvaluations.Image = Complete;
                }
                if (_SelectedPage.Equals(pgvScreeningEvaluations))
                {
                    LoadScreeningEvaluationEsignedInfo();
                    txtSECordinatorComment.ReadOnly = true;
                    btneSignScreeningEval.Enabled = false;
                    btnNextQuestionSE.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(GBQ1, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ2, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ3, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ4, true);
                    btnSCSEVerify.Enabled = true;
                }
            }
            else
            {
                _IsMedicalInterviewAllDone = false;
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvScreeningEvaluations))
                {
                    txtSECordinatorComment.ReadOnly = false;
                    CommonHelpers.SetReadOnlyProperties(GBQ1, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ2, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ3, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ4, false);
                    btneSignScreeningEval.Enabled = true;
                    btneSignScreeningEval.Enabled = true;
                    btnNextQuestionSE.Enabled = true;
                    btnSCSEVerify.Enabled = false;
                }
            }
        }
        private void CheckeSignMEdicalHistory(string subjectKey)
        {
            if (_SelectedPage.Equals(pgvMedicalHistory))
                DipslayDataOnMedicalGrid();
            //....... Process Complete / Work Indicator            
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool MedicalHistorySigned = OnScreeningHelper.IsMedicalHistorySigned(studyId, subjectKey);
            DataTable IsAdditionalInfoRequired = InvestigatorScreeningHelper.IsMedicalHistoryRequireAdditionalInfo(studyId, subjectKey);

            bool _isAddnRequired = default(bool);
            string _invComments = string.Empty;
            if (IsAdditionalInfoRequired.Rows.Count > 0)
            {
                _isAddnRequired = Convert.ToBoolean(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString());
                _invComments = IsAdditionalInfoRequired.Rows[0]["InvestigatorComment"].ToString();
            }
            txtMHInvestigatorComment.Visible = false;
            lblMHInvCommentLabel.Visible = false;
            if (MedicalHistorySigned == true)
            {
                if (_isAddnRequired)
                {
                    if (_SelectedPage.Equals(pgvMedicalHistory))
                    {
                        _IsMedicalInterviewAllDone = false;
                        btnSCMHAdditionalInfo.Enabled = true;
                        txtMHInvestigatorComment.Visible = true;
                        lblMHInvCommentLabel.Visible = true;
                        txtMHInvestigatorComment.Text = _invComments.Split('|').LastOrDefault();
                        //txtMHCordinatorComment.ReadOnly = false;
                        //CommonHelpers.SetReadOnlyProperties(GBQ1MH, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ2MH, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ3MH, false);
                        //CommonHelpers.SetReadOnlyProperties(GBQ4MH, false);
                        //btnNextMedicalH.Enabled = true;
                        //btneSignMH.Enabled = true;                    
                    }

                }
                else
                {
                    _IsMedicalInterviewAllDone = true;
                    txtMHInvestigatorComment.ResetText();
                    pgvMedicalHistory.Image = Complete;
                    txtMHInvestigatorComment.Visible = false;
                    lblMHInvCommentLabel.Visible = false;
                    btnSCMHAdditionalInfo.Enabled = false;
                }
                if (_SelectedPage.Equals(pgvMedicalHistory))
                {
                    LoadMedicalHistoryEsignedInfo();
                    txtMHCordinatorComment.ReadOnly = true;
                    CommonHelpers.SetReadOnlyProperties(GBQ1MH, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ2MH, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ3MH, true);
                    CommonHelpers.SetReadOnlyProperties(GBQ4MH, true);
                    btnNextMedicalH.Enabled = false;
                    btneSignMH.Enabled = false;
                    btnSCMHVerify.Enabled = true;
                }
            }
            else
            {
                _IsMedicalInterviewAllDone = false;
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvMedicalHistory))
                {
                    txtMHCordinatorComment.ReadOnly = false;
                    CommonHelpers.SetReadOnlyProperties(GBQ1MH, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ2MH, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ3MH, false);
                    CommonHelpers.SetReadOnlyProperties(GBQ4MH, false);
                    btnNextMedicalH.Enabled = true;
                    btneSignMH.Enabled = true;
                    txtMHInvestigatorComment.Text = _invComments.Split('|').LastOrDefault();
                    btnSCMHVerify.Enabled = false;
                }
            }
            // }
        }
        private void CheckeSignHeightWeight(string subjectKey)
        {
            if (_SelectedPage.Equals(pgvHeightWeight))
                GetHeightWeight(ValueOfKey);
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool HeightWeightESigned = OnScreeningHelper.IsHeightWeightSigned(studyId, subjectKey);
            //.... esign width and height
            if (HeightWeightESigned == true)
            {
                pgvHeightWeight.Image = Complete;
                if (_SelectedPage.Equals(pgvHeightWeight))
                {
                    txtHWCordinatorComment.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(GBHW, true);
                    CommonHelpers.SetReadOnlyProperties(GBHWSign, true);
                }
                //GBVital.Visible = true;
            }
            else
            {
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvHeightWeight))
                {
                    txtHWCordinatorComment.Enabled = true;
                    GBHW.Visible = true;
                    GBHWSign.Visible = true;
                    txtScanHeightWeight.Clear();
                    txtScanHeightWeight.Focus();
                    CommonHelpers.SetReadOnlyProperties(GBHW, false);
                    CommonHelpers.SetReadOnlyProperties(GBHWSign, false);
                }
            }
        }
        private void CheckeSignVital(string subjectKey)
        {
            try
            {
                if (_SelectedPage.Equals(pgvVitals))
                    GetVital(ValueOfKey);
                //....... Process Complete / Work Indicator
                Image Complete = new Bitmap(Properties.Resources.lock_closed);
                string _vitalRepeat = OnScreeningHelper.GetVitalRepeat(studyId, ValueOfKey);
                bool vitalEsigned = OnScreeningHelper.IsVitalESigned(studyId, subjectKey);
                if (vitalEsigned == true)
                {
                    if (_SelectedPage.Equals(pgvVitals))
                    {
                        btnSaveVital.Tag = "ESIGNED";
                        ValidateErrorRepeat1.Clear();
                        ValidateErrorRepeat2.Clear();
                        CommonHelpers.SetReadOnlyProperties(GBNoRepeatVital, true);
                        if (OnScreeningHelper.IsVitalsRepeat1Signed(studyId, subjectKey))
                        {
                            btneSignR1.Tag = "ESIGNED";
                            CommonHelpers.SetReadOnlyProperties(GBVitalR1, true);
                        }
                        else
                            btneSignR1.Tag = string.Empty;
                        //else
                        //    CommonHelpers.SetReadOnlyProperties(GBVitalR1, false);
                        if (OnScreeningHelper.IsVitalsRepeat2Signed(studyId, subjectKey))
                        {
                            btneSignR2.Tag = "ESIGNED";
                            CommonHelpers.SetReadOnlyProperties(GBVitalR2, true);
                        }
                        else
                            btneSignR2.Tag = string.Empty;
                        //else
                        //    CommonHelpers.SetReadOnlyProperties(GBVitalR2, false);
                        btnRepeatVital.Enabled = false;
                        // txtVitalComments.Enabled = false;                                              
                    }
                    if (OnScreeningStatusHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, pgvVitals.Name).Equals(SubjectStatusCode.Status.Proceed))
                    {
                        if (_vitalRepeat.Equals("NoRepeat"))
                            pgvVitals.Image = Complete;
                        else
                            IsAllTasksBeforeIECCEsigned = false;
                        CommonHelpers.SetReadOnlyProperties(gbSCVitalsEsign, true);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(gbSCVitalsEsign, false);
                }
                else
                {
                    btnSaveVital.Tag = string.Empty;
                    IsAllTasksBeforeIECCEsigned = false;
                    if (_SelectedPage.Equals(pgvVitals))
                    {
                        btnFailedVitals.Enabled = true;
                        GBVital.Visible = true;
                        GBVital.Enabled = true;
                        // txtVitalComments.Enabled = false;
                        GBNoRepeatVital.Visible = true;
                        GBNoRepeatVital.Enabled = true;
                        GBVitalR1.Visible = false;
                        GBVitalR2.Visible = false;
                        ValidateErrorRepeat1.Clear();
                        ValidateErrorRepeat2.Clear();
                        ValidationError.Clear();
                        cbConfirmSubjectSeated.Enabled = true;
                        cbConfirmSubjectSeated.ReadOnly = false;
                        // CommonHelpers.SetReadOnlyProperties(GBNoRepeatVital, false);                      
                    }
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        private void CheckeSignECG(string subjectKey)
        {
            if (_SelectedPage.Equals(pgvECGG))
                GetECG(ValueOfKey);
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            // bool ECGESigned = OnScreeningHelper.IsECGSigned(studyId, subjectKey);
            string _ecgRepeat = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
            //.............. ECG
            if (OnScreeningHelper.IsECGESigned(studyId, ValueOfKey))
            {
                List<Control> _noLock = new List<Control>();
                if (OnScreeningStatusHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, pgvECGG.Name).Equals(SubjectStatusCode.Status.Proceed))
                {
                    if (_ecgRepeat.Equals("NoRepeat"))
                    {
                        pgvECGG.Image = Complete;
                    }
                    else
                    {
                        IsAllTasksBeforeIECCEsigned = false;
                    }
                }
                if (_SelectedPage.Equals(pgvECGG))
                {
                    if (_ecgRepeat.Equals("NoRepeat"))
                        btnRepeatECG.Enabled = false;
                    else
                        btnRepeatECG.Enabled = true;
                    ValidateErrorRepeat1.Clear();
                    ValidateErrorRepeat2.Clear();
                    btnFailedECG.Enabled = false;
                    _noLock.Clear();
                    _noLock.Add(btnViewECG);
                    _noLock.Add(btnLoadECG);
                    _noLock.Add(txtECGComments);
                    CommonHelpers.SetReadOnlyWithException(GBECGNoRepeat, _noLock, true);
                    bool _ecg1Reviewed = OnScreeningHelper.IsFirstECGReviewedByPhysician(studyId, subjectKey);
                    if (_ecg1Reviewed)
                        gbECGEmail.Enabled = false;
                    else
                        gbECGEmail.Enabled = true;
                    #region ECG repeats esign check
                    if (OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))
                    {
                        _noLock.Clear();
                        _noLock.Add(btnViewECGR1);
                        _noLock.Add(btnLoadECGR1);
                        _noLock.Add(txtECGComments);
                        CommonHelpers.SetReadOnlyWithException(GBECGR1, _noLock, true);
                        bool _ecg2Reviewed = OnScreeningHelper.IsSecondECGReviewedByPhysician(studyId, subjectKey);
                        if (_ecg2Reviewed)
                            gbECGEmail.Enabled = false;
                        else
                            gbECGEmail.Enabled = true;
                    }
                    else
                    {
                        _noLock.Clear();
                        _noLock.Add(txtDateTimeNowECGR1);
                        _noLock.Add(gbECGPhysicianApprovalR1);
                        CommonHelpers.SetReadOnlyWithException(GBECGR1, _noLock, false);
                    }
                    if (OnScreeningHelper.IsECGRepeat2Signed(studyId, ValueOfKey))
                    {
                        _noLock.Clear();
                        _noLock.Add(btnViewECGR2);
                        _noLock.Add(btnLoadECGR2);
                        _noLock.Add(txtECGComments);
                        CommonHelpers.SetReadOnlyWithException(GBECGR2, _noLock, true);
                        bool _ecg3Reviewed = OnScreeningHelper.IsThirdECGReviewedByPhysician(studyId, subjectKey);
                        if (_ecg3Reviewed)
                            gbECGEmail.Enabled = false;
                        else
                            gbECGEmail.Enabled = true;
                    }
                    else
                    {
                        CommonHelpers.SetReadOnlyProperties(GBECGR2, false);
                        _noLock.Clear();
                        _noLock.Add(txtDateTimeECGR2);
                        _noLock.Add(gbECGPhysicianApprovalR2);
                        CommonHelpers.SetReadOnlyWithException(GBECGR2, _noLock, false);
                    }
                    #endregion                   
                }
            }
            else
            {
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvECGG))
                {
                    btnRepeatECG.Enabled = false;
                    ValidateErrorRepeat1.Clear();
                    ValidateErrorRepeat2.Clear();
                    ValidationError.Clear();
                    GBECGALL.Visible = true;
                    GBECGNoRepeat.Visible = true;
                    CommonHelpers.SetReadOnlyProperties(GBECGNoRepeat, false);
                }
            }
        }
        private void CheckeSignBlood(string subjectKey)
        {
            if (_SelectedPage.Equals(pgvLabBlood))
            {
                GetScreeningCheckedItemsBlood();
                GetBloodSample(ValueOfKey);
            }

            //....... Process Complete / Work Indicator
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool BloodESigned = OnScreeningHelper.IsBloodSigned(studyId, subjectKey);
            //......... Blood
            if (BloodESigned == true)
            {
                if (OnScreeningHelper.IsLabBloodSampleRequisitionSigned(studyId, subjectKey))
                    pgvLabBlood.Image = Complete;
                if (_SelectedPage.Equals(pgvLabBlood))
                {
                    btnFailedBlood.Enabled = false;
                    btnSCBloodEsign.Enabled = false;
                    txtBloodCordinatorComment.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, true);
                    if (OnScreeningHelper.IsLabBloodSampleRequisitionSigned(studyId, subjectKey))
                    {
                        CommonHelpers.SetReadOnlyProperties(GBBloodSample, true);
                    }
                    else
                    {
                        IsAllTasksBeforeIECCEsigned = false;
                        List<Control> _noLock = new List<Control>();
                        _noLock.Add(txtLabBloodBarCodedBy);
                        _noLock.Add(txtSCLabBloodBarCodedDate);
                        CommonHelpers.SetReadOnlyWithException(GBBloodSample, _noLock, false);
                    }

                }
                //CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, true);
                //CommonHelpers.SetReadOnlyProperties(GBBloodSample, true);               
            }
            else
            {
                IsAllTasksBeforeIECCEsigned = false;
                txtBloodCordinatorComment.Enabled = true;
                btnFailedBlood.Enabled = true;
                btnSCBloodEsign.Enabled = true;
                if (_SelectedPage.Equals(pgvLabBlood))
                {
                    CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, false);
                    if (OnScreeningHelper.IsLabBloodSampleRequisitionSigned(studyId, subjectKey))
                        CommonHelpers.SetReadOnlyProperties(GBBloodSample, true);
                    else
                    {
                        List<Control> _noLock = new List<Control>();
                        _noLock.Add(txtLabBloodBarCodedBy);
                        _noLock.Add(txtSCLabBloodBarCodedDate);
                        CommonHelpers.SetReadOnlyWithException(GBBloodSample, _noLock, false);
                    }
                }
                //CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, false);
                //CommonHelpers.SetReadOnlyProperties(GBBloodSample, false);
            }

        }
        private void CheckeSignUrineSample(string subjectKey)
        {
            if (_SelectedPage.Equals(pgvLabUrine))
            {
                GetScreeningCheckedItemsUrine();
                GetUrineSample(ValueOfKey);
            }

            //....... Process Complete / Work Indicator
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            bool UrineSampleESigned = OnScreeningHelper.IsUrineSampleSigned(studyId, subjectKey);
            //......... Blood
            if (UrineSampleESigned == true)
            {
                if (OnScreeningHelper.IsLabUrineSampleRequisitionSigned(studyId, subjectKey))
                {
                    pgvLabUrine.Image = Complete;
                }
                if (_SelectedPage.Equals(pgvLabUrine))
                {
                    CommonHelpers.SetReadOnlyProperties(GBLabUrineCollection, true);
                    if (OnScreeningHelper.IsLabUrineSampleRequisitionSigned(studyId, subjectKey))
                    {
                        CommonHelpers.SetReadOnlyProperties(GbUrineSample, true);
                    }
                    else
                    {
                        IsAllTasksBeforeIECCEsigned = false;
                        List<Control> _noLock = new List<Control>();
                        _noLock.Add(txtUrineCodedBy);
                        _noLock.Add(txtSCLabUrineBarCodedDate);
                        CommonHelpers.SetReadOnlyWithException(GbUrineSample, _noLock, false);
                    }
                    btneSignUrineCollection.Enabled = false;
                    btnFailedUrineSample.Enabled = false;
                }
            }
            else
            {
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvLabUrine))
                {
                    CommonHelpers.SetReadOnlyProperties(GBLabUrineCollection, false);
                    if (OnScreeningHelper.IsLabUrineSampleRequisitionSigned(studyId, subjectKey))
                        CommonHelpers.SetReadOnlyProperties(GbUrineSample, true);
                    else
                    {
                        List<Control> _noLock = new List<Control>();
                        _noLock.Add(txtUrineCodedBy);
                        _noLock.Add(txtSCLabUrineBarCodedDate);
                        CommonHelpers.SetReadOnlyWithException(GbUrineSample, _noLock, false);
                    }
                    btneSignUrineCollection.Enabled = true;
                    btnFailedUrineSample.Enabled = true;
                }
            }

        }
        private void CheckeSignUrine(string subjectKey)
        {
            //Image NotComplete = new Bitmap(Properties.Resources.lock_open);
            //Image Complete = new Bitmap(Properties.Resources.lock_closed);
            //bool UrineESigned = OnScreeningHelper.IsUrineSigned(subjectKey, studyId);
            ////........... Urine
            //if (UrineESigned == true)
            //{
            //    // 11-17-2017
            //    //foreach (Control ctrl in GBDrugAbuse.Controls)
            //    //{
            //    //    ctrl.Enabled = false;
            //    //}
            //    //foreach (Control ctrl in GBCotinineTest.Controls)
            //    //{
            //    //    ctrl.Enabled = false;
            //    //}
            //    //foreach (Control ctrl in GBhCGPregnancy.Controls)
            //    //{
            //    //    ctrl.Enabled = false;
            //    //}

            //    //foreach (Control ctrl in GBUrineTest.Controls)
            //    //{
            //    //    ctrl.Enabled = false;
            //    //}

            //    //GBDrugAbuse.Visible = true;
            //    //GBCotinineTest.Visible = true;
            //    //GBhCGPregnancy.Visible = true;
            //    //GBAllUrine.Visible = true;
            //    //GBUrineTest.Visible = true;
            //    // 11-17-2017
            //    // GBPhysical.Visible = true;
            //    pgvUrineTests.Image = Complete;


            //    // pgvPhysical.Image = NotComplete;
            //    //if (PhysicalESigned == true)
            //    //{
            //    //    foreach (Control ctrl in GBPhysical.Controls)
            //    //    {
            //    //        ctrl.Enabled = false;
            //    //    }
            //    //    GBPhysical.Visible = false;
            //    //    pgvPhysical.Image = Complete;

            //    //}
            //    //else
            //    //{
            //    //    
            //    //   HelperFunctions.ShowMessageBox("Physical has not been eSigned , Please eSign Physical first ", "Alert", MessageBoxButtons.OK, RadMessageIcon.Info);
            //    //    foreach (Control ctrl in GBPhysical.Controls)
            //    //    {
            //    //        ctrl.Enabled = true;
            //    //    }
            //    //    GBPhysical.Visible = true;
            //    //    pgvPhysical.Image = NotComplete;



            //    //}

            //}
            //else
            //{

            //    ValidateErrorRepeat1.Clear();
            //    ValidateErrorRepeat2.Clear();
            //    ValidationError.Clear();
            //    //  GBPhysical.Visible = false;
            //    // GBAllUrine.Visible = false;
            //    txtScanUrine.Clear();
            //    txtScanUrine.Focus();
            //    //GBDrugAbuse.Visible = true;
            //    //GBCotinineTest.Visible = true;
            //    //GBhCGPregnancy.Visible = true;

            //    //  GBUrineTest.Visible = true;
            //    // 11-17-2017
            //    //foreach (Control ctrl in GBDrugAbuse.Controls)
            //    //{
            //    //    ctrl.Enabled = true;
            //    //}
            //    //foreach (Control ctrl in GBCotinineTest.Controls)
            //    //{
            //    //    ctrl.Enabled = true;
            //    //}
            //    //foreach (Control ctrl in GBhCGPregnancy.Controls)
            //    //{
            //    //    ctrl.Enabled = true;
            //    //}

            //    //foreach (Control ctrl in GBUrineTest.Controls)
            //    //{
            //    //    ctrl.Enabled = true;
            //    //}
            //    // 11-17-2017
            //    //  
            //    // HelperFunctions.ShowMessageBox("Urine has not been eSigned , Please eSign Urine first ", "Alert", MessageBoxButtons.OK, RadMessageIcon.Info);
            //}
        }
        /// <summary>
        /// Check if its esigned yet
        /// </summary>
        /// <param name="subjectKey"></param>
        private void CheckeSign(string subjectKey)
        {
            try
            {
                Image Complete = new Bitmap(Properties.Resources.lock_closed);
                bool IDVerificationSigned = default(bool);
                bool PCFESigned = default(bool);
                bool VCFESigned = default(bool);
                bool ICFESigned = default(bool);
                bool PCFCopyGiven = default(bool);
                bool VCFCopyGiven = default(bool);
                //============================================================================
                SetAllTabIconIncomplete();
                //reset flag to true, then if any tab is not signed it will set to false
                IsAllTasksBeforeIECCEsigned = true;
                bool influenzaSigned = OnScreeningHelper.IsInfluenzaSigned(studyId, subjectKey);
                if (_SelectedPage.Equals(pgvInfluenza))
                    RetrieveScreeningInfluenza(ValueOfKey);
                SubjectStatusCode.Status _influenzaStatus = OnScreeningHelper.GetScreeningSubjectStatusByTab(studyId, subjectKey, pgvInfluenza.Name);
                if (_influenzaStatus.Equals(SubjectStatusCode.Status.Proceed))//if (influenzaSigned == true)
                {
                    if (_SelectedPage.Equals(pgvInfluenza))
                    {
                        CommonHelpers.SetReadOnlyProperties(GBInfluenzaeSign, true);
                        CommonHelpers.SetReadOnlyProperties(pnlSCInfluenzaBottom, true);
                        CommonHelpers.SetReadOnlyProperties(QuestionsPanel.PanelContainer, true);
                        CommonHelpers.SetReadOnlyProperties(TempMeasurmentPanel.PanelContainer, true);
                    }
                    pgvInfluenza.Image = Complete;
                    //...... ID Verification.........
                    pnlSCIDVerificationMain.Visible = true;
                    if (_SelectedPage.Equals(pgvIDVerfication))
                        GetScreeningIDVerificationeSign(ValueOfKey);
                    IDVerificationSigned = OnScreeningHelper.IsIDverificationSigned(studyId, subjectKey);
                    if (IDVerificationSigned == true)
                    {
                        pgvIDVerfication.Image = Complete;
                        if (_SelectedPage.Equals(pgvIDVerfication))
                        {
                            CommonHelpers.SetReadOnlyProperties(GBSInfo, true);
                            CommonHelpers.SetReadOnlyProperties(GBDemog, true);
                            CommonHelpers.SetReadOnlyProperties(GBSubjectESign, true);
                            CommonHelpers.SetReadOnlyProperties(GBIDVery, true);
                            CommonHelpers.SetReadOnlyProperties(GBStudyPackageIDVer, true);
                            List<Control> _noLock = new List<Control>();
                            _noLock.Add(btnPrintSubjectLabel);
                            CommonHelpers.SetReadOnlyWithException(pnlSCIDVerificationEsign, _noLock, true);
                        }
                        // .. PCF & VCF eSign Check
                        txtScanPCF.Clear();
                        txtScanPCF.Focus();
                        pnlSCVCFMain.Visible = true;
                        if (_SelectedPage.Equals(pgvVCF))
                        {
                            LoadVCFDocument(ValueOfKey);
                        }
                        VCFESigned = OnScreeningHelper.IsVCFSigned(subjectKey, studyId);
                        VCFCopyGiven = OnScreeningHelper.IsSignedVCFCopyGivenToSubject(subjectKey, studyId);
                        if (VCFESigned && VCFCopyGiven)
                        {
                            pgvVCF.Image = Complete;
                            //PCF                        
                            pnlSCPCFMain.Visible = true;
                            if (_SelectedPage.Equals(pgvPCF))
                            {
                                LoadPCFDocument(ValueOfKey);
                            }
                            PCFESigned = OnScreeningHelper.IsPCFSigned(subjectKey, studyId);
                            PCFCopyGiven = OnScreeningHelper.IsSignedPCFCopyGivenToSubject(subjectKey, studyId);
                            if (PCFESigned && PCFCopyGiven)
                            {
                                pgvPCF.Image = Complete;
                                pgvConsent.Image = Complete;
                                //...... ICF.....
                                if (IsICFRequired)
                                {
                                    pnlSCICFMain.Visible = true;
                                    if (_SelectedPage.Equals(pgvICF))
                                    {
                                        LoadICFDocument(ValueOfKey);
                                    }

                                    ICFESigned = OnScreeningHelper.IsICFSigned(subjectKey, studyId);
                                    if (ICFESigned)
                                    {
                                        pgvICF.Image = Complete;
                                        GBRace.Visible = true;
                                        GBEthincity.Visible = true;
                                        GBeSignDemographic.Visible = true;
                                        CheckeSignDemographic(subjectKey);
                                        CheckeSignScreeningEvaluation(subjectKey);
                                        CheckeSignMEdicalHistory(subjectKey);
                                        CheckeSignHeightWeight(subjectKey);
                                        CheckeSignVital(subjectKey);
                                        CheckeSignECG(subjectKey);
                                        CheckeSignUrineSample(subjectKey);
                                        CheckeSignBlood(subjectKey);
                                        //Safety lab main tab icon
                                        if (OnScreeningHelper.IsLabUrineSampleRequisitionSigned(studyId, subjectKey) && OnScreeningHelper.IsLabBloodSampleRequisitionSigned(studyId, subjectKey))
                                            pgvSCSafetyLabs.Image = Complete;
                                        CheckUrineTestEsign(subjectKey);
                                        CheckIfIECCSigned(subjectKey, SubjectStatusCode.Status.None);
                                    }
                                    else
                                    {
                                        IsAllTasksBeforeIECCEsigned = false;
                                        txtScanVCF.Clear();
                                        txtScanVCF.Focus();
                                    }
                                }
                                else
                                {
                                    //Make visible demographic tabs
                                    GBEthincity.Visible = true;
                                    GBeSignDemographic.Visible = true;
                                    GBRace.Visible = true;
                                    CheckeSignDemographic(subjectKey);
                                    CheckeSignScreeningEvaluation(subjectKey);
                                    CheckeSignMEdicalHistory(subjectKey);
                                    CheckeSignHeightWeight(subjectKey);
                                    CheckeSignVital(subjectKey);
                                    CheckeSignECG(subjectKey);
                                    CheckeSignUrineSample(subjectKey);
                                    CheckeSignBlood(subjectKey);
                                    //Safety lab main tab icon
                                    if (OnScreeningHelper.IsLabUrineSampleRequisitionSigned(studyId, subjectKey) && OnScreeningHelper.IsLabBloodSampleRequisitionSigned(studyId, subjectKey))
                                        pgvSCSafetyLabs.Image = Complete;
                                    CheckUrineTestEsign(subjectKey);
                                    CheckIfIECCSigned(subjectKey, SubjectStatusCode.Status.None);
                                }
                                if (_IsMedicalInterviewAllDone)
                                    pgvMedicalInterview.Image = Complete;
                            }
                            else
                            {
                                IsAllTasksBeforeIECCEsigned = false;
                                HideTabsUptoICFIfPreviousTabNotSigned(pgvPCF.Name);
                                txtScanICF.Clear();
                                txtScanICF.Focus();
                            }
                        }
                        else
                        {
                            IsAllTasksBeforeIECCEsigned = false;
                            HideTabsUptoICFIfPreviousTabNotSigned(pgvVCF.Name);
                            txtScanPCF.Clear();
                            txtScanPCF.Focus();
                        }
                    }
                    else
                    {
                        IsAllTasksBeforeIECCEsigned = false;
                        HideTabsUptoICFIfPreviousTabNotSigned(pgvIDVerfication.Name);
                        if (_SelectedPage.Equals(pgvIDVerfication))
                        {
                            //CommonHelpers.SetReadOnlyProperties(GBSInfo, false);
                            //CommonHelpers.SetReadOnlyProperties(GBDemog, false);
                            List<Control> _noLock = new List<Control>();
                            _noLock.Add(btnSigniture);
                            _noLock.Add(btnClearSign);
                            _noLock.Add(txtSubjectNameIDVer);
                            _noLock.Add(txtSubjectIDIDVer);
                            _noLock.Add(txtSubjecteSignDateTime);
                            //_noLock.Add(subjectSign);
                            CommonHelpers.SetReadOnlyWithException(GBSubjectESign, _noLock, false);
                            CommonHelpers.SetReadOnlyProperties(GBIDVery, false);
                            _noLock.Clear();
                            if (!IsICFRequired)
                            {
                                _noLock.Add(cbICFCopyNo);
                                _noLock.Add(cbICFCopyYes);
                            }
                            CommonHelpers.SetReadOnlyWithException(GBStudyPackageIDVer, _noLock, false);
                            CommonHelpers.SetReadOnlyProperties(pnlSCIDVerificationEsign, false);
                        }
                    }
                }
                else
                {
                    IsAllTasksBeforeIECCEsigned = false;
                    List<Control> _noUnlock = new List<Control>();
                    if (_SelectedPage.Equals(pgvInfluenza))
                    {
                        IsIDCheckedInInfluenza();
                        gbSCInfluenzaRepeat.Enabled = false;
                        gbSCInfTempOtherInfo.Enabled = false;
                        if (influenzaSigned)
                        {
                            gbSCInfTempOtherInfo.Enabled = true;
                            CommonHelpers.SetReadOnlyProperties(gbSCInfluenzaTemp, true);
                            CommonHelpers.SetReadOnlyProperties(QuestionsPanel.PanelContainer, true);
                            CommonHelpers.SetReadOnlyProperties(pnlSCInfluenzaBottom, false);
                            if (OnScreeningHelper.IsInfluenzaTempRepeatEnabled(studyId, ValueOfKey)) //(OnScreeningHelper.IsInfluenzaTempRepeatRequired(studyId, ValueOfKey) && 
                            {
                                btnSCInfluenzaTempRepeat.Enabled = false;
                                gbSCInfluenzaRepeat.Enabled = true;
                                if (OnScreeningHelper.IsInfluenzaTempRepeatSigned(studyId, ValueOfKey))
                                {
                                    CommonHelpers.SetReadOnlyProperties(gbSCInfluenzaRepeat, true);
                                }
                                else
                                {
                                    _noUnlock.Clear();
                                    _noUnlock.Add(btnSCInfluenzaTempRESign);
                                    CommonHelpers.SetReadOnlyWithException(gbSCInfluenzaRepeat, _noUnlock, false);
                                    gbSCInfTempOtherInfo.Enabled = false;
                                    CommonHelpers.SetReadOnlyProperties(pnlSCInfluenzaBottom, true);
                                    btnSCInfluenzaTempRESign.Enabled = true;
                                }
                            }
                            else
                            {
                                // if (OnScreeningHelper.IsInfluenzaSigned(studyId, ValueOfKey))
                                btnSCInfluenzaTempRepeat.Enabled = true;
                                //else
                                //    btnSCInfluenzaTempRepeat.Enabled = false;
                            }
                        }
                        else
                        {
                            _noUnlock.Clear();
                            // _noUnlock.Add(btnSCInfluenzaTempEsign);
                            _noUnlock.Add(btnSCInfluenzaTempRepeat);
                            CommonHelpers.SetReadOnlyProperties(pnlSCInfluenzaBottom, true);
                            CommonHelpers.SetReadOnlyWithException(gbSCInfluenzaTemp, _noUnlock, false);
                            CommonHelpers.SetReadOnlyProperties(QuestionsPanel.PanelContainer, false);
                            //gbSCInfluenzaRepeat.Enabled = false;
                            //gbSCInfTempOtherInfo.Enabled = false;
                        }

                        //_noUnlock.Clear();
                        //_noUnlock.Add(btnSCInfluenzaTempEsign);
                        //_noUnlock.Add(btnSCInfluenzaTempRepeat);
                        //_noUnlock.Add(btnSCInfluenzaTempRESign);
                        //CommonHelpers.SetReadOnlyWithException(TempMeasurmentPanel.PanelContainer, _noUnlock, false);
                    }
                    HideTabsUptoICFIfPreviousTabNotSigned(pgvInfluenza.Name);
                }
                if (IsICFRequired)
                {
                    if (!ICFESigned)
                        HideShowTabsAfterConsentOrICFIfRequired(false);
                    else
                        HideShowTabsAfterConsentOrICFIfRequired(true);
                }
                else
                {
                    if (PCFESigned && VCFESigned)
                        HideShowTabsAfterConsentOrICFIfRequired(true);
                    else
                        HideShowTabsAfterConsentOrICFIfRequired(false);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void HideTabsUptoICFIfPreviousTabNotSigned(string previousTab)
        {
            switch (previousTab)
            {
                case "pgvInfluenza":
                    pnlSCIDVerificationMain.Visible = false;
                    pnlSCVCFEsign.Visible = false;
                    gbSCVCF.Visible = false;
                    gbSCPCF.Visible = false;
                    pnlSCPCFEsign.Visible = false;
                    gbSCICF.Visible = false;
                    pnleSignICF.Visible = false;
                    break;
                case "pgvIDVerfication":
                    pnlSCVCFEsign.Visible = false;
                    gbSCVCF.Visible = false;
                    gbSCPCF.Visible = false;
                    pnlSCPCFEsign.Visible = false;
                    gbSCICF.Visible = false;
                    pnleSignICF.Visible = false;
                    break;
                case "pgvVCF":
                    gbSCPCF.Visible = false;
                    pnlSCPCFEsign.Visible = false;
                    gbSCICF.Visible = false;
                    pnleSignICF.Visible = false;
                    break;
                case "pgvPCF":
                    gbSCICF.Visible = false;
                    pnleSignICF.Visible = false;
                    break;
                default:
                    break;
            }
        }
        private void HideShowTabsAfterConsentOrICFIfRequired(bool visible)
        {
            switch (pgvOnScreeningPages.SelectedPage.Name)
            {
                case "pgvMedicalInterview":
                    switch (pgvMedicalInterviews.SelectedPage.Name)
                    {
                        case "pgvDemographics":
                            //Demographic
                            GBRace.Visible = visible;
                            GBEthincity.Visible = visible;
                            GBeSignDemographic.Visible = visible;
                            break;
                        case "pgvScreeningEvaluations":
                            //Screening Evaluation
                            ctnSCEQNA.Visible = visible;
                            pnlSCEvaluationEsign.Visible = visible;
                            break;
                        case "pgvMedicalHistory":
                            //Medical History
                            ctnSCMHQNA.Visible = visible;
                            pnlSCMHEsign.Visible = visible;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvHeightWeight":
                    //Height and Weight
                    GBHWSign.Visible = visible;
                    GBHW.Visible = visible;
                    break;
                case "pgvVitals":
                    //Vitals
                    GBVital.Visible = visible;
                    gbSCVitalsEsign.Visible = visible;
                    break;
                case "pgvECGG":
                    //ECG
                    GBECGALL.Visible = visible;
                    gbSCECGEsign.Visible = visible;
                    break;
                case "pgvSCSafetyLabs":
                    switch (pgvSafetyLabTests.SelectedPage.Name)
                    {
                        case "pgvLabBlood":
                            //Safety Labs
                            pnlBloodSampleAll.Visible = visible;
                            break;
                        case "pgvLabUrine":
                            //Safety Labs
                            pnlLabUrineMain.Visible = visible;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvUrineTests":
                    //Drug Test
                    gbUrineTestParent.Visible = visible;
                    break;
                case "pgvIECC":
                    //IECC
                    if (visible)
                    {
                        if (IsAllTasksBeforeIECCEsigned)
                            rgbIECC.Visible = visible;
                        else
                            rgbIECC.Visible = !visible;
                    }
                    else
                        rgbIECC.Visible = visible;
                    break;
                default:
                    break;
            }
        }
        private void LoadSubjectStatusByTab(string tabName)
        {
            try
            {//load subject status
                SubjectStatusCode.Status _status = SubjectStatusCode.Status.None;
                _status = OnScreeningStatusHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, tabName);
                System.Drawing.Color foreColor = System.Drawing.Color.Black;
                switch (_status)
                {
                    case SubjectStatusCode.Status.None:
                        foreColor = System.Drawing.Color.Black;
                        break;
                    case SubjectStatusCode.Status.Proceed:
                        foreColor = System.Drawing.Color.Blue;
                        break;
                    case SubjectStatusCode.Status.Fail:
                        foreColor = System.Drawing.Color.Orange;
                        break;
                    case SubjectStatusCode.Status.Pass:
                        foreColor = System.Drawing.Color.Green;
                        break;
                    case SubjectStatusCode.Status.Dropped:
                        foreColor = System.Drawing.Color.Red;
                        break;
                    default:
                        break;
                }
                lblSubjectStatus.Text = _status.ToString();
                lblSubjectStatus.ForeColor = foreColor;
                lblSubjectStausComment.Text = OnScreeningStatusHelper.GetScreeningSubjectStatusCommentByTab(studyId, ValueOfKey, tabName);
                lblSubjectStausComment.ForeColor = foreColor;
                LoadSubjectStatusIfFailedOrDroppedStatus();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadSubjectStatusIfFailedOrDroppedStatus()
        {
            try
            {
                string _comment = string.Empty;
                string _tab = string.Empty;
                string _failedOrFailedTab = string.Empty;
                string _status = string.Empty;
                if (OnScreeningStatusHelper.IsScreeningSubjectFailed(studyId, ValueOfKey, out _tab, out _comment))
                {
                    _status = SubjectStatusCode.Status.Fail.ToString();
                    lblSubjectStatus.Text = _status;
                    lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                    lblSubjectStausComment.Text = _comment;
                    lblSubjectStausComment.ForeColor = System.Drawing.Color.Orange;

                }
                else if (OnScreeningStatusHelper.IsScreeningSubjectDropped(studyId, ValueOfKey, out _tab, out _comment))
                {
                    _status = SubjectStatusCode.Status.Dropped.ToString();
                    lblSubjectStatus.Text = _status;
                    lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                    lblSubjectStausComment.Text = _comment;
                    lblSubjectStausComment.ForeColor = System.Drawing.Color.Red;
                }
                if (!string.IsNullOrEmpty(_tab) && !_status.Equals(SubjectStatusCode.Status.None.ToString()))
                {
                    RadPageViewPage _page = Controls.Find(_tab, true).FirstOrDefault() as RadPageViewPage;
                    if (_status.Equals(SubjectStatusCode.Status.Fail.ToString()))
                    {
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        _page.Image = Failed;
                        LockControlsByTabIfSubjectDropped(true);
                    }
                    else if (_status.Equals(SubjectStatusCode.Status.Dropped.ToString()))
                    {
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        _page.Image = Dropped;
                        LockControlsByTabIfSubjectDropped(true);
                    }
                    else
                    {
                        LockControlsByTabIfSubjectDropped(false);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LockControlsByTabIfSubjectDropped(bool enable)
        {
            List<Control> _noLock = new List<Control>();
            switch (pgvOnScreeningPages.SelectedPage.Name)
            {
                case "pgvInfluenza":

                    CommonHelpers.SetReadOnlyProperties(pgvInfluenza, enable);
                    break;
                case "pgvIDVerfication":
                    CommonHelpers.SetReadOnlyProperties(pgvIDVerfication, enable);
                    break;
                case "pgvConsent":
                    GC.Collect();
                    switch (pgvConsentPCFVCF.SelectedPage.Name)
                    {
                        case "pgvVCF":
                            if (enable)
                            {
                                _noLock.Clear();
                                _noLock.Add(txtScanVCF);
                                CommonHelpers.SetReadOnlyWithException(pgvVCF, _noLock, enable);
                            }
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvVCF, enable);
                            break;
                        case "pgvPCF":
                            if (enable)
                            {
                                _noLock.Clear();
                                _noLock.Add(txtScanPCF);
                                CommonHelpers.SetReadOnlyWithException(pgvPCF, _noLock, enable);
                            }
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvPCF, enable);
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvICF":
                    if (IsICFRequired)
                    {
                        if (enable)
                        {
                            _noLock.Clear();
                            _noLock.Add(txtScanICF);
                            CommonHelpers.SetReadOnlyWithException(pgvICF, _noLock, enable);
                        }
                        else
                            CommonHelpers.SetReadOnlyProperties(pgvICF, enable);
                    }
                    break;
                case "pgvMedicalInterview":
                    switch (pgvMedicalInterviews.SelectedPage.Name)
                    {
                        case "pgvDemographics":
                            if (enable)
                            {
                                _noLock.Clear();
                                _noLock.Add(txtScanMedicalHistory);
                                CommonHelpers.SetReadOnlyWithException(pgvDemographics, _noLock, enable);
                            }
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvDemographics, enable);
                            break;
                        case "pgvScreeningEvaluations":
                            if (enable)
                            {
                                _noLock.Clear();
                                _noLock.Add(txtScanScreeningEvaluation);
                                CommonHelpers.SetReadOnlyWithException(pgvScreeningEvaluations, _noLock, enable);
                            }
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvScreeningEvaluations, enable);
                            break;
                        case "pgvMedicalHistory":
                            if (enable)
                            {
                                _noLock.Clear();
                                _noLock.Add(txtScanMedicalHistory);
                                CommonHelpers.SetReadOnlyWithException(pgvMedicalHistory, _noLock, enable);
                            }
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvMedicalHistory, enable);
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvHeightWeight":
                    if (enable)
                    {
                        _noLock.Clear();
                        _noLock.Add(txtScanHeightWeight);
                        CommonHelpers.SetReadOnlyWithException(pgvHeightWeight, _noLock, enable);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(pgvHeightWeight, enable);
                    break;
                case "pgvVitals":
                    if (enable)
                    {
                        _noLock.Clear();
                        _noLock.Add(txtScanVital);
                        CommonHelpers.SetReadOnlyWithException(pgvVitals, _noLock, enable);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(pgvVitals, enable);
                    break;
                case "pgvECGG":
                    if (enable)
                    {
                        _noLock.Clear();
                        _noLock.Add(txtScanECG);
                        CommonHelpers.SetReadOnlyWithException(pgvECGG, _noLock, enable);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(pgvECGG, enable);
                    break;
                case "pgvSCSafetyLabs":
                    _noLock.Clear();
                    _noLock.Add(txtBloodSubjectScanID);
                    switch (pgvSafetyLabTests.SelectedPage.Name)
                    {
                        case "pgvLabBlood":
                            if (enable)

                                CommonHelpers.SetReadOnlyWithException(pgvLabBlood, _noLock, enable);
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvLabBlood, enable);
                            break;
                        case "pgvLabUrine":
                            if (enable)
                                CommonHelpers.SetReadOnlyWithException(pgvLabUrine, _noLock, enable);
                            else
                                CommonHelpers.SetReadOnlyProperties(pgvLabUrine, enable);
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvUrineTests":
                    if (enable)
                    {
                        _noLock.Clear();
                        _noLock.Add(txtScanUrine);
                        CommonHelpers.SetReadOnlyWithException(pgvUrineTests, _noLock, enable);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(pgvUrineTests, enable);
                    break;
                case "pgvResults":
                    switch (pgvTestResults.SelectedPage.Name)
                    {
                        case "tbScreeningResults":
                            CommonHelpers.SetReadOnlyProperties(tbScreeningResults, enable);
                            break;
                        case "tbScreeningRepeatResults":
                            CommonHelpers.SetReadOnlyProperties(tbScreeningRepeatResults, enable);
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvIECC":
                    if (enable)
                    {
                        _noLock.Clear();
                        _noLock.Add(txtScanIECCSubjectID);
                        CommonHelpers.SetReadOnlyWithException(pgvIECC, _noLock, enable);
                    }
                    else
                        CommonHelpers.SetReadOnlyProperties(pgvIECC, enable);
                    break;
                case "pgvLoadScreeningDocuments":
                    CommonHelpers.SetReadOnlyProperties(pgvLoadScreeningDocuments, enable);
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// Check Screening Date (Range) to be screened (if its in range or if its not in range) block On Screening
        /// </summary>
        private void CheckScreeningDate()
        {

            DataTable _dt = new DataTable();
            using (DbConnection db = new DbConnection())
            {
                db.OpenConnection();
                _dt = db.ExecuteSelectQuery("spScreeningDaysRange", new SqlParameter[] { new SqlParameter("@studyID", studyId) }, true);
            }
            if (_dt.Rows.Count > 0)
            {
                DateTime dateToCheck = DateTime.Today;
                DateTime expiryDate = Convert.ToDateTime(_dt.Rows[0]["Date"].ToString()).Date;
                var days = expiryDate.AddDays(-Convert.ToInt32(_dt.Rows[0]["NumScreeningDays"].ToString()));
                DateTime startDate = days;
                DateTime endDate = expiryDate;
                dateInRange = CommonHelpers.IsDateInRange(dateToCheck, startDate, endDate);
            }
        }

        /// <summary>
        /// When Study Change and On Screening Tab is Selected
        /// </summary>
        private void CheckScreeningDateByStudyChange()
        {
            if (IsStudyIDSelected())
            {
                CheckScreeningDate();
                if (dateInRange == true)
                {
                    foreach (Control ctrl in pgvOnScreeningPages.Controls)
                    {
                        ctrl.Enabled = true;
                    }
                    foreach (Control ctrl in subjectInfoPanel.Controls)
                    {
                        ctrl.Enabled = true;
                    }
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Screening days are Out of Range", "Alert", MessageBoxButtons.OK, RadMessageIcon.Info);

                    foreach (Control ctrl in pgvOnScreeningPages.Controls)
                    {
                        ctrl.Enabled = false;
                    }
                    foreach (Control ctrl in subjectInfoPanel.Controls)
                    {
                        ctrl.Enabled = false;
                    }
                }
            }

        }

        /// <summary>
        /// Check if Subject Dropped
        /// </summary>
        /// <param name="subjectKey"></param>
        private void CheckDroppedInfluenza(string subjectKey)
        {
            //=============================== Check Subject Dropped=============================
            bool subjectDroppedInfluenza = DroppedHelper.IsSubjectDroppedInfluenza(studyId, subjectKey);

            bool subjectDroppedIDVer = DroppedHelper.IsSubjectDroppedIDVerification(studyId, subjectKey);
            if (subjectDroppedInfluenza == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvInfluenza")
                    {
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvInfluenza.Image = Dropped;
                        pgvIDVerfication.Image = null;
                        TempMeasurmentPanel.ExpandDirection = RadDirection.Up;

                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }

            }


        }
        private void CheckDroppedIDVerification(string subjectKey)
        {
            //=============================== Check Subject Dropped=============================
            bool subjectDroppedIDVer = DroppedHelper.IsSubjectDroppedIDVerification(studyId, subjectKey);



            if (subjectDroppedIDVer == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvIDVerification")
                    {
                        ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvIDVerfication.Image = Dropped;
                        pgvInfluenza.Image = null;
                        TempMeasurmentPanel.ExpandDirection = RadDirection.Up;

                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }


        }

        /// <summary>
        ///  Check if the study design tabs has been locked
        ///  If yes , we can do screening
        ///  If No , We can not do screening untill all study design Tabs are locked (excpect Study Schedule)
        /// </summary>
        private void CheckStudyDesignLocked()
        {
            Dictionary<string, string> _dtabstatus = CheckStudyDesignLockedHelper.AllTabsStatus(studyId);
            string[] keys = _dtabstatus.Keys.ToArray();
            string[] Values = _dtabstatus.Values.ToArray();


            if ((keys[0] == "STUDYDESIGN" && Values[0] == "Unlocked") &&
                (keys[1] == "DRUGS" && Values[1] == "Unlocked") &&
                (keys[2] == "BLOOD" && Values[2] == "Unlocked") &&
                (keys[3] == "MEALS" && Values[3] == "Unlocked") &&
                (keys[5] == "SCREENINGTEST" && Values[5] == "Unlocked") &&
                (keys[6] == "CHECKINTEST" && Values[6] == "Unlocked") &&
                (keys[7] == "EG" && Values[7] == "Unlocked") &&
                (keys[8] == "GA" && Values[8] == "Unlocked") &&
                (keys[9] == "GM" && Values[9] == "Unlocked") &&
                (keys[10] == "HM" && Values[10] == "Unlocked") &&
                  (keys[11] == "NS" && Values[11] == "Unlocked") &&
                    (keys[12] == "VT" && Values[12] == "Unlocked"))
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    ctrl.Enabled = true;
                }
                ddSubjects.Enabled = true;
                btnSubjectDroppedScreening.Enabled = true;

            }
            else
            {

                HelperFunctions.ShowMessageBox("Can not do Screening , Study Design is not done yet", "Alert", MessageBoxButtons.OK, RadMessageIcon.Info);

                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    ctrl.Enabled = false;
                }
                ddSubjects.Enabled = false;
                btnSubjectDroppedScreening.Enabled = false;

            }
        }


        #endregion  ================================== End Helpers=================================System.Console.WriteLine("Hi");

        /// <summary>
        /// Check if the selected page is Consent or ICF to Set Focus the on Scan ID txtbox
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void pgvOnScreeningPages_SelectedPageChanged(object sender, EventArgs e)
        {
            try
            {
                LoadDataBySelectedTab();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, GetSelectedPage().Text, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void SetInfluenzaValuesFromAppSettings()
        {
            ApplicationSettingsHelper.SetTemperatureRange(lblSCTemp1Range);
            ApplicationSettingsHelper.SetTemperatureRange(lblSCTemp2Range);

            ApplicationSettingsHelper.SetTemperatureUnit(lblSCTemp1Unit);
            ApplicationSettingsHelper.SetTemperatureUnit(lblSCTemp2Unit);

        }
        private void SetVitalsValuesFromAppSettings()
        {
            ApplicationSettingsHelper.SetTemperatureRange(lblSCVitalTempRange1);
            ApplicationSettingsHelper.SetTemperatureRange(lblSCVitalTempRange2);
            ApplicationSettingsHelper.SetTemperatureRange(lblSCVitalTempRange3);
            ApplicationSettingsHelper.SetTemperatureUnit(lblSCVitalTempUnit1);
            ApplicationSettingsHelper.SetTemperatureUnit(lblSCVitalTempUnit2);
            ApplicationSettingsHelper.SetTemperatureUnit(lblSCVitalTempUnit3);
        }
        private void SetLabUrineValuesFromAppSettings()
        {
            ApplicationSettingsHelper.SetTemperatureRange(lblSCLabUrineTempRange, "Is Temperature {0} {1}");
        }
        private void LoadDataBySelectedTab()
        {
            try
            {
                ResetAllControls();
                if (!IsStudyIDSelected() || string.IsNullOrEmpty(ValueOfKey))
                    return;
                _SelectedPage = GetSelectedPage();
                switch (pgvOnScreeningPages.SelectedPage.Name)
                {
                    case "pgvInfluenza":
                        QuestionsPanel.Enabled = false;
                        pnlSCInfluenzaMain.Visible = true;
                        CollapseInfluenzaPanels();
                        ddlDocumentTypeInf.SelectedIndex = -1;
                        //cbNoRepeat.Checked = true;
                        SetInfluenzaValuesFromAppSettings();
                        CheckeSign(ValueOfKey);
                        break;
                    case "pgvIDVerfication":
                        GC.Collect();
                        CommonHelpers.ResetControls(GBIDVery);
                        CommonHelpers.ResetControls(GBStudyPackageIDVer);
                        CommonHelpers.ResetControls(GBDemog);
                        CommonHelpers.ResetControls(GBSInfo);
                        CommonHelpers.ResetControls(GBSubjectESign);
                        cbICFCopyNo.Checked = true;
                        cbNoRecievedPack.Checked = true;
                        RetrieveSCIDVerificationAddressAndContact(ValueOfKey);
                        RetrieveSCIDVerificationSubjectGeneralInfo(ValueOfKey);
                        if (IsICFRequired)
                        {
                            cbICFCopyYes.ReadOnly = false;
                            cbICFCopyNo.ReadOnly = false;
                        }
                        else
                        {
                            cbICFCopyYes.ReadOnly = true;
                            cbICFCopyNo.ReadOnly = true;
                        }
                        CheckeSign(ValueOfKey);
                        break;
                    case "pgvConsent":
                        GC.Collect();
                        switch (pgvConsentPCFVCF.SelectedPage.Name)
                        {
                            case "pgvVCF":
                                pnlSCVCFEsign.Visible = true;
                                gbSCVCF.Visible = true;
                                txtScanVCF.Focus();
                                //IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
                                if (IsVCFInvestigatorRequired)
                                {
                                    btnPrintVCF.Visible = false;
                                    btnSCVCFCopyToSubject.Visible = false;
                                    //btnSCVCFInvEsign.Visible = true;
                                }
                                else
                                {
                                    btnPrintVCF.Visible = true;
                                    btnSCVCFCopyToSubject.Visible = true;
                                    //btnSCVCFInvEsign.Visible = false;
                                }
                                CheckeSign(ValueOfKey);
                                CheckIfVCFAllProcessCompleted(ValueOfKey);
                                break;
                            case "pgvPCF":
                                pnlSCPCFEsign.Visible = true;
                                gbSCPCF.Visible = true;
                                txtScanPCF.Focus();
                                CheckeSign(ValueOfKey);
                                CheckIfPCFAllProcessCompleted(ValueOfKey);
                                break;
                            default:
                                break;
                        }
                        break;
                    case "pgvICF":
                        GC.Collect();
                        txtScanICF.Focus();
                        if (IsICFRequired)
                        {
                            gbSCICF.Visible = true;
                            pnleSignICF.Visible = true;
                            CheckeSign(ValueOfKey);
                            CheckIfICFAllProcessCompleted(ValueOfKey);
                        }
                        break;
                    case "pgvMedicalInterview":
                        switch (pgvMedicalInterviews.SelectedPage.Name)
                        {
                            case "pgvDemographics":
                                GC.Collect();
                                txtScanDemographic.Clear();
                                txtScanDemographic.Focus();
                                EnableCheckBoxes();
                                CheckeSign(ValueOfKey);
                                break;
                            case "pgvScreeningEvaluations":
                                GC.Collect();
                                txtScanScreeningEvaluation.Clear();
                                txtScanScreeningEvaluation.Focus();
                                if (dtScreeningEvaluationAns != null)
                                    dtScreeningEvaluationAns.Clear();
                                dtScreeningEvaluationAns = null;
                                _CounterAnsweredQuestions = 0;
                                ClearSCEvaluationControls();
                                CheckeSign(ValueOfKey);
                                break;
                            case "pgvMedicalHistory":
                                GC.Collect();
                                txtScanMedicalHistory.Clear();
                                txtScanMedicalHistory.Focus();
                                ClearMedicalHistoryControls();
                                if (dtMedicalHistoryAns != null)
                                    dtMedicalHistoryAns.Clear();
                                _CounterAnsweredQuestionsMH = 0;
                                CheckeSign(ValueOfKey);
                                break;
                            default:
                                break;
                        }
                        break;
                    case "pgvHeightWeight":
                        GC.Collect();
                        // ........... Body Measurement...................
                        if (CommonHelpers.GetRegion().ToUpper().Equals("CANADA"))
                        {
                            txtSTADID.Enabled = false;
                            txtSSID.Enabled = true;
                        }
                        else
                        {
                            txtSTADID.Enabled = true;
                            txtSSID.Enabled = false;
                        }
                        LoadWeightAndBMIRangeFromSetup();
                        CheckeSign(ValueOfKey);
                        break;
                    case "pgvVitals":
                        GC.Collect();
                        PulseOximetryRequired();
                        CheckVitalRepeat();
                        CheckeSign(ValueOfKey);
                        SetVitalsValuesFromAppSettings();
                        break;
                    case "pgvECGG":
                        GC.Collect();
                        SubjectSeatedPriorToECG();
                        txtDateTimeNowECG.Text = DateTime.Now.ToString("MMM dd,yyyy");
                        CommonHelpers.SetReadOnlyProperties(gbECGPhysicianApproval, true);
                        // CheckECGRepeatAndEnableRepeat();
                        CheckeSign(ValueOfKey);
                        ShowQTcFIfRequired();
                        break;
                    case "pgvSCSafetyLabs":
                        switch (pgvSafetyLabTests.SelectedPage.Name)
                        {
                            case "pgvLabBlood":
                                GC.Collect();
                                dtSCBloodCollectionDate.Value = DateTime.Now;
                                cbNoFastRequired.Checked = true;
                                CheckeSign(ValueOfKey);
                                break;
                            case "pgvLabUrine":
                                GC.Collect();
                                dtUrineCollectedDate.Value = DateTime.Now;
                                CheckeSign(ValueOfKey);
                                SetLabUrineValuesFromAppSettings();
                                break;
                            default:
                                break;
                        }
                        break;
                    case "pgvUrineTests":
                        GC.Collect();
                        txtScanUrine.Clear();
                        txtScanUrine.Focus();
                        LoadLastUrineSampleCollectionDateTime();
                        LoadUrineTestProducts();
                        CheckeSign(ValueOfKey);
                        break;
                    case "pgvResults":
                        ClearResults();
                        GC.Collect();
                        LoadBloodCollectedTimeDateForResult();
                        switch (pgvTestResults.SelectedPage.Name)
                        {
                            case "tbScreeningResults":
                                //GetLaboratoryResultsScreening(ValueOfKey);
                                GetLaboratoryResultsScreening();
                                break;
                            case "tbScreeningRepeatResults":
                                GetLaboratoryResultsScreeningRepeat();
                                //GetLaboratoryResultsScreeningRepeat(ValueOfKey);
                                break;
                            default:
                                break;
                        }
                        break;
                    case "pgvIECC":
                        GC.Collect();
                        CheckeSign(ValueOfKey);
                        break;
                    case "pgvLoadScreeningDocuments":
                        GC.Collect();
                        LoadUploadedFileLists();
                        break;
                    default:

                        break;
                }
                LoadSubjectStatusByTab(_SelectedPage != null ? _SelectedPage.Name : "");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void ShowQTcFIfRequired()
        {
            if (OnScreeningHelper.IsQTCFRequired(studyId))
            {
                lblECGQTcFInterval.Visible = true;
                lblECGQTcFIntervalR1.Visible = true;
                lblECGQTcFIntervalR2.Visible = true;
                txtQTcF.Visible = true;
                txtQTcFR1.Visible = true;
                txtQTcFR2.Visible = true;
                lblECGQTcFUnit.Visible = true;
                lblECGQTcFUnitR1.Visible = true;
                lblECGQTcFUnitR2.Visible = true;
            }
            else
            {
                lblECGQTcFInterval.Visible = false;
                lblECGQTcFIntervalR1.Visible = false;
                lblECGQTcFIntervalR2.Visible = false;
                txtQTcF.Visible = false;
                txtQTcFR1.Visible = false;
                txtQTcFR2.Visible = false;
                lblECGQTcFUnit.Visible = false;
                lblECGQTcFUnitR1.Visible = false;
                lblECGQTcFUnitR2.Visible = false;
            }
        }
        private void LoadWeightAndBMIRangeFromSetup()
        {
            Dictionary<string, string> _weightRange = CommonHelpers.GetWeightRangeForStudy(studyId);
            Dictionary<string, string> _bmiRange = CommonHelpers.GetBMIRangeForStudy(studyId);
            if (_weightRange != null)
            {
                if (string.IsNullOrEmpty(_weightRange["MinWeight"].ToString()) || string.IsNullOrEmpty(_weightRange["MaxWeight"].ToString()))
                    lblHWWeightRange.Visible = false;
                else
                {
                    lblHWWeightRange.Visible = true;
                    lblHWWeightRange.Text = "(Weight must be " + _weightRange["MinWeight"].ToString() + " kg To " + _weightRange["MaxWeight"].ToString() + " kg)";
                }
            }
            if (_bmiRange != null)
            {
                if (string.IsNullOrEmpty(_bmiRange["MinBMI"]) || string.IsNullOrEmpty(_bmiRange["MaxBMI"]))
                    lblHWBMIRange.Visible = false;
                else
                {
                    lblHWBMIRange.Visible = true;
                    lblHWBMIRange.Text = "(BMI must be between " + _bmiRange["MinBMI"] + " To " + _bmiRange["MaxBMI"] + ")";
                }
            }
        }
        private RadPageViewPage GetSelectedPage()
        {
            //tracking variable for selected page
            RadPageViewPage SelectedPage = null;
            switch (pgvOnScreeningPages.SelectedPage.Name)
            {
                case "pgvInfluenza":
                    SelectedPage = pgvInfluenza;
                    break;
                case "pgvIDVerfication":
                    SelectedPage = pgvIDVerfication;
                    break;
                case "pgvConsent":
                    GC.Collect();
                    switch (pgvConsentPCFVCF.SelectedPage.Name)
                    {
                        case "pgvVCF":
                            SelectedPage = pgvVCF;
                            break;
                        case "pgvPCF":
                            SelectedPage = pgvPCF;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvICF":
                    if (IsICFRequired)
                    {
                        SelectedPage = pgvICF;
                    }
                    break;
                case "pgvMedicalInterview":
                    switch (pgvMedicalInterviews.SelectedPage.Name)
                    {
                        case "pgvDemographics":
                            SelectedPage = pgvDemographics;
                            break;
                        case "pgvScreeningEvaluations":
                            SelectedPage = pgvScreeningEvaluations;
                            break;
                        case "pgvMedicalHistory":
                            SelectedPage = pgvMedicalHistory;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvHeightWeight":
                    SelectedPage = pgvHeightWeight;
                    break;
                case "pgvVitals":
                    SelectedPage = pgvVitals;
                    break;
                case "pgvECGG":
                    SelectedPage = pgvECGG;
                    break;
                case "pgvSCSafetyLabs":
                    switch (pgvSafetyLabTests.SelectedPage.Name)
                    {
                        case "pgvLabBlood":
                            SelectedPage = pgvLabBlood;
                            break;
                        case "pgvLabUrine":
                            SelectedPage = pgvLabUrine;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvUrineTests":
                    SelectedPage = pgvUrineTests;
                    break;
                case "pgvResults":
                    ClearResults();
                    GC.Collect();
                    switch (pgvTestResults.SelectedPage.Name)
                    {
                        case "tbScreeningResults":
                            SelectedPage = tbScreeningResults;
                            break;
                        case "tbScreeningRepeatResults":
                            SelectedPage = tbScreeningRepeatResults;
                            break;
                        default:
                            break;
                    }
                    break;
                case "pgvIECC":
                    SelectedPage = pgvIECC;
                    break;
                case "pgvLoadScreeningDocuments":
                    SelectedPage = pgvLoadScreeningDocuments;
                    break;
                default:
                    break;
            }
            return SelectedPage;
        }
        private void ShowCommonStatusIfDroppedOrFailed()
        {
            bool subjectDroppedInfluneza = DroppedHelper.IsSubjectDroppedInfluenza(studyId, ValueOfKey);
            bool subjectFailedInfluenza = FailedHelper.IsSubjectFailedInfluenza(studyId, ValueOfKey);
            Image Dropped = new Bitmap(Properties.Resources.dropped2);
            Image Failed = new Bitmap(Properties.Resources.FailedT1);
        }
        private void DropFailByTabs()
        {
            string tabName = string.Empty;
            SubjectStatusCode.Status _status = SubjectStatusCode.Status.None;
            Image Dropped = new Bitmap(Properties.Resources.dropped2);
            Image Failed = new Bitmap(Properties.Resources.FailedT1);
            using (DbConnection db = new DbConnection())
            {
                db.OpenConnection();
                string query = "select * from [FinalScreeningSubject] where studyID='" + studyId + "' and subjectKey=" + ValueOfKey;
                DataTable dt = db.ExecuteSelectQuery(query, null, false);
                if (dt.Rows.Count > 0)
                {
                    _status = (SubjectStatusCode.Status)int.Parse(dt.Rows[0]["SubjectStatus"].ToString());
                    tabName = dt.Rows[0]["SubjectStatus"].ToString();
                }
                if (_status.Equals(SubjectStatusCode.Status.Fail) || _status.Equals(SubjectStatusCode.Status.Dropped))
                {
                    foreach (var page in pgvOnScreeningPages.Pages)
                    {
                        page.Enabled = false;
                    }
                }
                else
                {
                    foreach (var page in pgvOnScreeningPages.Pages)
                    {
                        page.Enabled = true;
                    }
                }
                pgvOnScreeningPages.SelectedPageChanged -= new System.EventHandler(pgvOnScreeningPages_SelectedPageChanged);
                switch (tabName)
                {
                    case "OnScreeningInfluenza":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvInfluenza.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvInfluenza.Image = Dropped;
                        }
                        pgvInfluenza.Enabled = true;
                        pgvInfluenza.Select();
                        break;
                    case "OnScreeningIDVerification":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvIDVerfication.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvIDVerfication.Image = Dropped;
                        }
                        pgvIDVerfication.Enabled = true;
                        pgvIDVerfication.Select();
                        break;
                    case "OnScreeningPCF":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvPCF.Image = Failed;
                            pgvConsent.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvPCF.Image = Dropped;
                            pgvConsent.Image = Dropped;
                        }
                        pgvConsent.Enabled = true;
                        pgvPCF.Enabled = true;
                        pgvConsent.Select();
                        pgvPCF.Select();
                        break;
                    case "OnScreeningVCF":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvVCF.Image = Failed;
                            pgvConsent.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvVCF.Image = Dropped;
                            pgvConsent.Image = Dropped;
                        }
                        pgvConsent.Enabled = true;
                        pgvVCF.Enabled = true;
                        pgvConsent.Select();
                        pgvVCF.Select();
                        break;
                    case "OnScreeningICF":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvICF.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvICF.Image = Dropped;
                        }
                        pgvICF.Enabled = true;

                        pgvICF.Select();
                        break;
                    case "OnScreeningDemographics":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvMedicalInterview.Image = Failed;
                            pgvDemographics.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvDemographics.Image = Dropped;
                            pgvMedicalInterview.Image = Dropped;
                        }
                        pgvMedicalInterview.Enabled = true;
                        pgvDemographics.Enabled = true;
                        pgvMedicalInterview.Select();
                        pgvDemographics.Select();
                        break;
                    case "OnScreeningHeight&Weight":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvHeightWeight.Image = Failed;
                            //pgvECG.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvHeightWeight.Image = Dropped;
                            // pgvECG.Image = Dropped;
                        }
                        //  pgvECG.Enabled = true;
                        pgvHeightWeight.Enabled = true;
                        //pgvECG.Select();
                        pgvHeightWeight.Select();
                        break;
                    case "OnScreeningVitals":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvVitals.Image = Failed;
                            // pgvECG.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvVitals.Image = Dropped;
                            //  pgvECG.Image = Dropped;
                        }
                        // pgvECG.Enabled = true;
                        pgvVitals.Enabled = true;
                        // pgvECG.Select();
                        pgvVitals.Select();

                        break;
                    case "OnScreeningScreeningEvaluation":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvMedicalInterview.Image = Failed;
                            pgvScreeningEvaluations.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvScreeningEvaluations.Image = Dropped;
                            pgvMedicalInterview.Image = Dropped;
                        }
                        pgvMedicalInterview.Enabled = true;
                        pgvScreeningEvaluations.Enabled = true;
                        pgvMedicalInterview.Select();
                        pgvScreeningEvaluations.Select();
                        break;
                    case "OnScreeningMedicalHistory":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvMedicalHistory.Image = Failed;
                            pgvMedicalInterview.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvMedicalHistory.Image = Dropped;
                            pgvMedicalInterview.Image = Dropped;
                        }
                        pgvMedicalHistory.Enabled = true;
                        pgvMedicalInterview.Enabled = true;
                        pgvMedicalHistory.Select();
                        pgvMedicalInterview.Select();
                        break;
                    case "OnScreeningECG":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvECGG.Image = Failed;
                            // pgvECG.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvECGG.Image = Dropped;
                            // pgvECG.Image = Dropped;
                        }
                        // pgvECG.Enabled = true;
                        pgvECGG.Enabled = true;
                        //  pgvECG.Select();
                        pgvECGG.Select();

                        break;
                    case "OnScreeningBloodSample":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            // pgvECG.Image = Failed;
                            pgvLabBlood.Image = Failed;
                            pgvSCSafetyLabs.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvLabBlood.Image = Dropped;
                            //pgvECG.Image = Dropped;
                            pgvSCSafetyLabs.Image = Dropped;
                        }
                        //  pgvECG.Enabled = true;
                        pgvLabBlood.Enabled = true;
                        //  pgvECG.Select();
                        pgvLabBlood.Select();
                        break;
                    case "OnScreeningSafetyLabs(Urine)":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvLabUrine.Image = Failed;
                            //  pgvECG.Image = Failed;
                            pgvSCSafetyLabs.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvLabUrine.Image = Dropped;
                            //  pgvECG.Image = Dropped;
                            pgvSCSafetyLabs.Image = Dropped;
                        }
                        //   pgvECG.Enabled = true;
                        pgvSCSafetyLabs.Enabled = true;
                        pgvLabUrine.Enabled = true;

                        //  pgvECG.Select();
                        pgvSCSafetyLabs.Select();
                        pgvLabUrine.Select();
                        break;
                    case "pgvUrineTests":
                        if (_status.Equals(SubjectStatusCode.Status.Fail))
                        {
                            pgvUrineTests.Image = Failed;
                        }
                        else if (_status.Equals(SubjectStatusCode.Status.Dropped))
                        {
                            pgvUrineTests.Image = Dropped;
                        }
                        pgvUrineTests.Enabled = true;
                        pgvUrineTests.Select();
                        break;
                    default:
                        break;
                }
                pgvOnScreeningPages.SelectedPageChanged += new System.EventHandler(pgvOnScreeningPages_SelectedPageChanged);
                db.CloseConnection();
            }
        }
        private void SetAllTabIconIncomplete()
        {
            CommonHelpers.SetCompleteIncompleteImage(pgvInfluenza, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvIDVerfication, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvConsent, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvVCF, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvPCF, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvICF, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvMedicalInterview, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvDemographics, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvScreeningEvaluations, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvMedicalHistory, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvHeightWeight, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvVitals, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvECGG, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvSCSafetyLabs, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvLabBlood, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvLabUrine, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvUrineTests, false, SubjectStatusCode.Status.None);
            CommonHelpers.SetCompleteIncompleteImage(pgvIECC, false, SubjectStatusCode.Status.None);
        }

        //****************************** Influenza ******************************
        #region On Screening Influenza
        private void cbYesSubjectProcedue_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (!args.NewValue.Equals(CheckState.Checked))
                return;
            if (!ValidateFirstInfluenzaTempFields() && !ValidateRepeatInfluenzaTempFields())
            {
                cbNoSubjectProcedue.Checked = true;
                args.Cancel = true;
            }
        }

        private void txtSCInfluenzaTempC_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtSCInfluenzaTempCR_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }
        private void btnSCInfluenzaTempEsign_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (OnScreeningHelper.IsInfluenzaSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Temperature has already been e-signed.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!ValidateFirstInfluenzaTempFields())
                    return;
                DateTime _timeMeasured = new DateTime();
                if (!CommonHelpers.IsTimeFormatValid(txtTimeMeasuredB.Text.Trim(), out _timeMeasured))
                {
                    HelperFunctions.ShowMessageBox("Time is not in correct format.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeMeasuredB.Focus();
                    return;
                }
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                bool yesnoCough = default(bool);
                bool yesnoDiarrhea = default(bool);
                bool yesnoFever = default(bool);
                bool yesnoOtherSymptoms = default(bool);
                bool yesnoContactSymptoms = default(bool);
                //bool _isTempRepeat = default(bool);
                if (cbYesCough.Checked)
                {
                    yesnoCough = true;
                }
                else if (cbNoCough.Checked)
                {
                    yesnoCough = false;
                }
                if (cbYesDiarrhea.Checked)
                {
                    yesnoDiarrhea = true;
                }
                else if (cbNoDiarrhea.Checked)
                {
                    yesnoDiarrhea = false;
                }
                if (cbYesFever.Checked)
                {
                    yesnoFever = true;
                }
                else if (cbNoFever.Checked)
                {
                    yesnoFever = false;
                }
                if (cbYesAnyOther.Checked)
                {
                    yesnoOtherSymptoms = true;
                }
                else if (cbNoAnyOther.Checked)
                {
                    yesnoOtherSymptoms = false;
                }
                if (cbYesContact.Checked)
                {
                    yesnoContactSymptoms = true;
                }
                else if (cbNoContact.Checked)
                {
                    yesnoContactSymptoms = false;
                }
                //if (cbYesRepeat.Checked)
                //{
                //    _isTempRepeat = true;
                //}
                tabName = "Influenza";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    return;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                    DataTable dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    // + "',IsRepeatRequired=" + Convert.ToInt16(_isTempRepeat) 
                    if (dtExist.Rows.Count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET NewWroseCough='" + Convert.ToInt32(yesnoCough) + "',Diarrhea='" + Convert.ToInt32(yesnoDiarrhea) + "',FeverChills='" + Convert.ToInt32(yesnoFever) + "',OtherSymptoms='" + Convert.ToInt32(yesnoOtherSymptoms) + "',ContactWithAnyHasSymptoms='" + Convert.ToInt32(yesnoContactSymptoms) + "',EquipementID1='" + txtEquipmentIDB.Text + "',Temp1='" + txtSCInfluenzaTemp.Text + "',TimeMeasured1='" + txtTimeMeasuredB.Text + "',DateMeasured1='" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "',TempMeasureBy='" + App.EsignedUser.UserName + "',TempMeasureAt='" + GetCurrentStandardDateTime() + "' WHERE  StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        HelperFunctions.ShowMessageBox("Data saved successfully.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                    }
                    else
                        HelperFunctions.ShowMessageBox("Influenza has not been started yet.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    //else
                    //{
                    //    string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningInfluenza]
                    //             (StudyID,SubjectKey,NewWroseCough,Diarrhea,FeverChills,OtherSymptoms,ContactWithAnyHasSymptoms,EquipementID1,Temp1,TimeMeasured1,DateMeasured1,IsTempRepeat,TempMeasureBy,TempMeasureAt) VALUES
                    //             ('" + studyId + "','" + _subjectKey + "','" + Convert.ToInt32(yesnoCough) + "','" + Convert.ToInt32(yesnoDiarrhea) + "','" + Convert.ToInt32(yesnoFever) + "','" + Convert.ToInt32(yesnoOtherSymptoms) + "','" + Convert.ToInt32(yesnoContactSymptoms) + "','" + txtEquipmentIDB.Text + "','" + txtSCInfluenzaTemp.Text + "','" + txtTimeMeasuredB.Text + "','" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "'," + Convert.ToInt16(_isTempRepeat) + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                    //    db.ExecuteInsertQuery(InsertQuery, null, false);
                    //}
                    db.CloseConnection();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnSCInfluenzaTempRESign_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (!OnScreeningHelper.IsInfluenzaTempRepeatRequired(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Temperature repeat is not applicable.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningHelper.IsInfluenzaTempRepeatRequired(studyId, ValueOfKey) && OnScreeningHelper.IsInfluenzaTempRepeatSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Temperature has already been e-signed.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!ValidateRepeatInfluenzaTempFields())
                    return;
                DateTime _timeMeasured = new DateTime();
                if (!CommonHelpers.IsTimeFormatValid(txtTimeMeasuredR.Text.Trim(), out _timeMeasured))
                {
                    HelperFunctions.ShowMessageBox("Time is not in correct format.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeMeasuredR.Focus();
                    return;
                }
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string equipID2 = string.Empty;
                string temp2 = string.Empty;
                string timeMeasured2 = string.Empty;
                //if (cbYesRepeat.Checked)
                //{
                equipID2 = txtEquipmentIDR.Text.Trim();
                temp2 = txtSCInfluenzaTempR.Text.Trim();
                timeMeasured2 = txtTimeMeasuredR.Text.Trim();
                tabName = "Influenza";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    return;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                    DataTable dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    if (dtExist.Rows.Count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET IsRepeatRequired=0,EquipementID2='" + equipID2 + "',Temp2='" + temp2 + "',TimeMeasured2='" + timeMeasured2 + "',DateMeasured2='" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "',TempRMeasureBy ='" + App.EsignedUser.UserName + "',TempRMeasureDate='" + GetCurrentStandardDateTime() + "' WHERE  StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        HelperFunctions.ShowMessageBox("Data saved successfully.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Influenza has not been started yet.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                    //else
                    //{
                    //    string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningInfluenza]
                    //             (StudyID,SubjectKey,NewWroseCough,Diarrhea,FeverChills,OtherSymptoms,ContactWithAnyHasSymptoms,EquipementID1,Temp1,TimeMeasured1,DateMeasured1,IsTempRepeat,TempMeasureBy,TempMeasureAt) VALUES
                    //             ('" + studyId + "','" + _subjectKey + "','" + Convert.ToInt32(yesnoCough) + "','" + Convert.ToInt32(yesnoDiarrhea) + "','" + Convert.ToInt32(yesnoFever) + "','" + Convert.ToInt32(yesnoOtherSymptoms) + "','" + Convert.ToInt32(yesnoContactSymptoms) + "','" + txtEquipmentIDB.Text + "','" + txtSCInfluenzaTemp.Text + "','" + txtTimeMeasuredB.Text + "','" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "'," + Convert.ToInt16(_isTempRepeat) + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                    //    db.ExecuteInsertQuery(InsertQuery, null, false);
                    //}
                    db.CloseConnection();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private int GetFirstInfluenzaTempPassedTime()
        {
            int output = default(int);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "select dbo.spGetRemainingTimeForInfluenzaTempRepeat('" + studyId + "','" + ValueOfKey + "','" + DateTime.Now + "')";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = (int)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }

        private void btnSCInfluenzaTempRepeat_Click(object sender, EventArgs e)
        {
            double _temp = default(double);
            if (double.TryParse(txtSCInfluenzaTemp.Text.Trim(), out _temp))
            {
                if (CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
                {
                    if (HelperFunctions.ShowMessageBox("Temperature is in range. Would you still want to repeat(Y/N)?", "Influenza", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return;
                }
            }
            int _passedTime = GetFirstInfluenzaTempPassedTime();
            if (_passedTime < 10 || _passedTime > 60)
            {
                if (HelperFunctions.ShowMessageBox("Repeating time is not in the range of 10-60 mins. Would you still like to repeat(Y/N).", "Influenza", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    return;
            }
            tabName = "Influenza";
            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                return;
            using (DbConnection db = new DbConnection())
            {
                db.OpenConnection();
                string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                DataTable dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                if (dtExist.Rows.Count > 0)
                {
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET IsRepeatRequired=1,RepeatEnabledBy='" + App.EsignedUser.UserName + "',RepeatEnabledDate='" + GetCurrentStandardDateTime() + "' WHERE  StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    db.ExecuteUpdateQuery(UpdateQuery, null, false);
                    HelperFunctions.ShowMessageBox("Data saved successfully.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }
                else
                    HelperFunctions.ShowMessageBox("Influenza has not been started yet.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                db.CloseConnection();
            }
            txtEquipmentIDR.Focus();
        }

        /// <summary>
        /// Collapse panles on Influenza when load
        /// </summary>
        private void CollapseInfluenzaPanels()
        {
            // collapse Questions panel on load ----
            QuestionsPanel.ExpandDirection = RadDirection.Down;
            QuestionsPanel.EnableAnimation = false;
            QuestionsPanel.LoadElementTree();
            QuestionsPanel.IsExpanded = false;
            QuestionsPanel.EnableAnimation = true;
            QuestionsPanel.Enabled = false;
            // collapse Temp Measurment on load----
            TempMeasurmentPanel.ExpandDirection = RadDirection.Down;
            TempMeasurmentPanel.EnableAnimation = false;
            TempMeasurmentPanel.LoadElementTree();
            TempMeasurmentPanel.IsExpanded = false;
            TempMeasurmentPanel.Enabled = false;
            TempMeasurmentPanel.EnableAnimation = true;
            TempMeasurmentPanel.Enabled = false;
        }

        /// <summary>
        ///Expand panles on Influenza when eSigne saving is done
        /// </summary>

        private void ExpandPnaleAfterPopulate()
        {
            if (ddlDocumentTypeInf.SelectedIndex > -1)
            {
                //  btneSignInfluenza.Enabled = false;
                // expand Questions panel on load ----
                QuestionsPanel.ExpandDirection = RadDirection.Down;
                QuestionsPanel.EnableAnimation = false;
                QuestionsPanel.LoadElementTree();
                QuestionsPanel.IsExpanded = true;
                QuestionsPanel.EnableAnimation = true;
                QuestionsPanel.Enabled = true;
                // expand Temp Measurment on load----
                var count = QuestionsPanel.PanelContainer.Controls.OfType<RadCheckBox>().Count(x => x.Checked);
                //  }

                if (count == 5 && !TempMeasurmentPanel.IsExpanded)
                {
                    TempMeasurmentPanel.ExpandDirection = RadDirection.Down;
                    TempMeasurmentPanel.EnableAnimation = true;
                    TempMeasurmentPanel.LoadElementTree();
                    TempMeasurmentPanel.IsExpanded = true;
                    TempMeasurmentPanel.Enabled = true;
                    TempMeasurmentPanel.EnableAnimation = true;
                    TempMeasurmentPanel.Enabled = true;
                }
            }
            else
            {
                TempMeasurmentPanel.ExpandDirection = RadDirection.Down;
                TempMeasurmentPanel.EnableAnimation = false;
                TempMeasurmentPanel.LoadElementTree();
                TempMeasurmentPanel.IsExpanded = false;
                TempMeasurmentPanel.Enabled = false;
                TempMeasurmentPanel.EnableAnimation = false;
                TempMeasurmentPanel.Enabled = false;
                // btneSignInfluenza.Enabled = true;

                // collapse Questions panel if document not checked and signed----
                QuestionsPanel.ExpandDirection = RadDirection.Down;
                QuestionsPanel.EnableAnimation = false;
                QuestionsPanel.LoadElementTree();
                QuestionsPanel.IsExpanded = false;
                QuestionsPanel.EnableAnimation = true;
                QuestionsPanel.Enabled = true;
            }
        }

        private void ExpandpanelBeforpopulate()
        {

            QuestionsPanel.ExpandDirection = RadDirection.Down;
            QuestionsPanel.EnableAnimation = false;
            QuestionsPanel.LoadElementTree();
            QuestionsPanel.IsExpanded = true;
            QuestionsPanel.EnableAnimation = true;
            QuestionsPanel.Enabled = true;
        }

        /// <summary>
        /// trigger if (No) disable textboxes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoRepeat_CheckStateChanged(object sender, EventArgs e)
        {
            //if (cbNoRepeat.Checked)
            //{
            //    EnableDisableFirstTempMeasure(true);
            //    EnableDisableRepeatTempMeasure(false);
            //    cbYesRepeat.Checked = false;
            //    //...... Hide Fail.....
            //}
        }

        /// <summary>
        /// Trigger if(yes) Checked enable textboxes for tempreture
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private void cbYesRepeat_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            //if (cbYesRepeat.Checked)
            //{
            //    EnableDisableFirstTempMeasure(false);
            //    EnableDisableRepeatTempMeasure(true);
            //    cbNoRepeat.Checked = false;
            //    if (!string.IsNullOrEmpty(txtSCInfluenzaTemp.Text))
            //    {
            //        double _temp = default(double);
            //        if (double.TryParse(txtSCInfluenzaTemp.Text.Trim(), out _temp))
            //        {
            //            if (CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
            //            {
            //                if (HelperFunctions.ShowMessageBox("Temperature is in range. Are you sure you want to repeat (Y/N)?", "Influenza", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.Yes))
            //                    btnSCInfluenzaTempRepeat.Enabled = true;
            //                else
            //                    btnSCInfluenzaTempRepeat.Enabled = true;
            //            }
            //            else
            //            {
            //                btnSCInfluenzaTempRepeat.Enabled = true;
            //            }
            //        }
            //    }
            //}
            //else
            //    btnSCInfluenzaTempRepeat.Enabled = false;
        }
        private void EnableDisableFirstTempMeasure(bool enable)
        {
            try
            {
                txtTimeMeasuredB.Enabled = enable;
                txtEquipmentIDB.Enabled = enable;
                txtSCInfluenzaTemp.Enabled = enable;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void EnableDisableRepeatTempMeasure(bool enable)
        {
            try
            {
                txtTimeMeasuredR.Enabled = enable;
                txtEquipmentIDR.Enabled = enable;
                txtSCInfluenzaTempR.Enabled = enable;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        ///  trigger , caugh Yes/NO
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesCough_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesCough.Checked)
            {
                cbNoCough.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        ///  trigger , caugh NO/Yes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoCough_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoCough.Checked)
            {
                cbYesCough.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , Diarrhea Yes/NO
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesDiarrhea_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesDiarrhea.Checked)
            {
                cbNoDiarrhea.Checked = false;
            }
            CounterQuestionsChecked();
        }
        private void cbNoDiarrhea_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoDiarrhea.Checked)
            {
                cbYesDiarrhea.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , fever Yes/No
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesFever_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesFever.Checked)
            {
                cbNoFever.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , fever No,Yes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoFever_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoFever.Checked)
            {
                cbYesFever.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , anyother Yes/No
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesAnyOther_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesAnyOther.Checked)
            {
                cbNoAnyOther.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , anyother No/Yes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoAnyOther_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoAnyOther.Checked)
            {
                cbYesAnyOther.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , contact Yes/No
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesContact_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesContact.Checked)
            {
                cbNoContact.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// trigger , contact No/Yes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoContact_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoContact.Checked)
            {
                cbYesContact.Checked = false;
            }
            CounterQuestionsChecked();
        }

        /// <summary>
        /// Count How many questions are checked , if (5) then The Temreature Measurement Panel Will show
        /// </summary>
        private void CounterQuestionsChecked()
        {
            count = QuestionsPanel.PanelContainer.Controls.OfType<RadCheckBox>().Count(x => x.Checked);
            if (count == 5 && (cbNoCough.Checked || cbNoDiarrhea.Checked || cbNoFever.Checked || cbNoAnyOther.Checked || cbNoContact.Checked))
            {
                TempMeasurmentPanel.ExpandDirection = RadDirection.Down;
                TempMeasurmentPanel.EnableAnimation = true;
                TempMeasurmentPanel.LoadElementTree();
                TempMeasurmentPanel.IsExpanded = true;
                TempMeasurmentPanel.Enabled = true;
                TempMeasurmentPanel.EnableAnimation = true;
                cbNoSubjectProcedue.Checked = true;
                if (!string.IsNullOrEmpty(ValueOfKey))
                {
                    bool influenzaSigned = OnScreeningHelper.IsInfluenzaSigned(studyId, ValueOfKey);
                    SubjectStatusCode.Status _status = OnScreeningHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, pgvInfluenza.Name);
                    if (_status.Equals(SubjectStatusCode.Status.Proceed))// if (influenzaSigned == true)
                    {
                        CommonHelpers.SetReadOnlyProperties(TempMeasurmentPanel.PanelContainer, true);
                    }
                    else
                    {
                        // CommonHelpers.SetReadOnlyProperties(TempMeasurmentPanel.PanelContainer, false);
                        List<Control> _noUnlock = new List<Control>();
                        _noUnlock.Add(btnSCInfluenzaTempEsign);
                        _noUnlock.Add(btnSCInfluenzaTempRepeat);
                        _noUnlock.Add(btnSCInfluenzaTempRESign);
                        CommonHelpers.SetReadOnlyWithException(TempMeasurmentPanel.PanelContainer, _noUnlock, false);
                    }

                }

            }
            //else if (count != 5 && (cbNoCough.Checked || cbNoDiarrhea.Checked || cbNoFever.Checked || cbNoAnyOther.Checked || cbNoContact.Checked))
            //{
            //    GBCoordinator.Visible = false;
            //}
            //else if (count != 5 && (cbYesCough.Checked || cbYesDiarrhea.Checked || cbYesFever.Checked || cbYesAnyOther.Checked || cbYesContact.Checked))
            //{
            //    GBCoordinator.Visible = true;
            //}
            else
            {
                // Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith((t) => AlertMessage(), TaskScheduler.FromCurrentSynchronizationContext());
                TempMeasurmentPanel.ExpandDirection = RadDirection.Down;
                TempMeasurmentPanel.EnableAnimation = true;
                TempMeasurmentPanel.LoadElementTree();
                TempMeasurmentPanel.IsExpanded = false;
                TempMeasurmentPanel.Enabled = false;
            }

            //if (count != 5 && (cbNoCough.Checked || cbNoDiarrhea.Checked || cbNoFever.Checked || cbNoAnyOther.Checked || cbNoContact.Checked))
            //{
            //    GBCoordinator.Visible = false;
            //}
            if ((count != 5 || count == 5) && (cbYesCough.Checked || cbYesDiarrhea.Checked || cbYesFever.Checked || cbYesAnyOther.Checked || cbYesContact.Checked))
            {
                btnFailedInfluenza.Enabled = true;
                //  btnSaveInfluenze.Enabled = false;
            }
            else if ((count != 5 || count == 5) && (cbNoCough.Checked || cbNoDiarrhea.Checked || cbNoFever.Checked || cbNoAnyOther.Checked || cbNoContact.Checked))
            {
                // btnSaveInfluenze.Visible = true;
                btnFailedInfluenza.Enabled = false;
                //  btnSaveInfluenze.Enabled = true;
            }

        }

        /// <summary>
        /// trigger , contact No/Yes/others
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesSubjectProcedue_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesSubjectProcedue.Checked)
            {
                txtTemMeasureComments.Enabled = true;
                cbNoSubjectProcedue.Checked = false;
                cbOtherSubjectProcedue.Checked = false;
                txtOtherSubjectProcedue.Enabled = false;
                bool influenzaSigned = OnScreeningHelper.IsInfluenzaIDChecked(studyId, ValueOfKey);
                if (influenzaSigned == true && cbYesSubjectProcedue.Checked)
                {
                    btnSaveInfluenze.Enabled = true;
                }
                else
                {
                    btnSaveInfluenze.Enabled = false;
                }
                btnFailedInfluenza.Enabled = false;
            }
        }
        /// <summary>
        /// Validates fields before the check box for Yes subject can proceed is checked
        /// </summary>
        /// <returns></returns>
        private bool ValidateFirstInfluenzaTempFields()
        {
            if (string.IsNullOrEmpty(txtEquipmentIDB.Text.Trim()))
            {
                HelperFunctions.ShowMessageBox("Please enter equipment ID.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtEquipmentIDB.Focus();
                return false;
            }
            if (string.IsNullOrEmpty(txtSCInfluenzaTemp.Text.Trim()))
            {
                HelperFunctions.ShowMessageBox("Please enter temperature.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtSCInfluenzaTemp.Focus();
                return false;
            }
            if (string.IsNullOrEmpty(txtTimeMeasuredB.Text.Trim()) || txtTimeMeasuredB.Text.Trim().Equals("__:__"))
            {
                HelperFunctions.ShowMessageBox("Please enter temperature measured time.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtTimeMeasuredB.Focus();
                return false;
            }
            return true;
        }
        private bool ValidateRepeatInfluenzaTempFields()
        {
            if (OnScreeningHelper.IsInfluenzaTempRepeatRequired(studyId, ValueOfKey))
            {
                if (string.IsNullOrEmpty(txtEquipmentIDR.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter equipment ID.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtEquipmentIDR.Focus();
                    return false;
                }
                if (string.IsNullOrEmpty(txtSCInfluenzaTempR.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter repeat temperature.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtSCInfluenzaTempR.Focus();
                    return false;
                }
                if (string.IsNullOrEmpty(txtTimeMeasuredR.Text.Trim()) || txtTimeMeasuredR.Text.Trim().Equals("__:__"))
                {
                    HelperFunctions.ShowMessageBox("Please enter repeat temperature measured time.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeMeasuredR.Focus();
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// trigger , contact No/Yes/others
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoSubjectProcedue_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoSubjectProcedue.Checked)
            {
                cbYesSubjectProcedue.Checked = false;
                cbOtherSubjectProcedue.Checked = false;
                txtOtherSubjectProcedue.Enabled = false;
                btnSaveInfluenze.Enabled = false;
                btnFailedInfluenza.Enabled = true;
            }
        }

        /// <summary>
        /// trigger , contact No/Yes/others
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbOtherSubjectProcedue_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbOtherSubjectProcedue.Checked)
            {
                txtTemMeasureComments.Enabled = true;
                cbYesSubjectProcedue.Checked = false;
                cbNoSubjectProcedue.Checked = false;
                txtOtherSubjectProcedue.Enabled = true;
                txtOtherSubjectProcedue.Focus();
                bool influenzaSigned = OnScreeningHelper.IsInfluenzaIDChecked(studyId, ValueOfKey);
                if (influenzaSigned == true && (cbYesSubjectProcedue.Checked || cbOtherSubjectProcedue.Checked)) //&& !string.IsNullOrEmpty(txtOtherSubjectProcedue.Text.Trim()))
                {
                    btnSaveInfluenze.Enabled = true;
                }
                else
                {
                    btnSaveInfluenze.Enabled = false;
                }
                btnFailedInfluenza.Enabled = true;
            }
        }

        /// <summary>
        /// Enable Tempreture TextBox when isSacned or has value
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtEquipmentIDB_TextChanged(object sender, EventArgs e)
        {
            //if (!string.IsNullOrEmpty(txtEquipmentIDB.Text))
            //{
            //    if (OnScreeningHelper.IsInfluenzaSigned(studyId, ValueOfKey))
            //    {
            //        txtSCInfluenzaTemp.Enabled = false;
            //    }
            //    else
            //    {
            //        txtSCInfluenzaTemp.Enabled = true;
            //    }
            //}
            //else
            //{
            //    txtSCInfluenzaTemp.Enabled = false;
            //}
        }

        /// <summary>
        /// Enable Tempreture TextBox when isSacned or has value
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtEquipmentIDR_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtEquipmentIDR.Text))
            {
                // txtSCInfluenzaTempR.Enabled = true;
            }
            else
            {
                // txtSCInfluenzaTempR.Enabled = false;
            }
        }


        /// <summary>
        /// Allow only one decimal point for the Temp.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSCInfluenzaTemp_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
            var _values = txtSCInfluenzaTemp.Text.Trim().Split('.');
            if (_values != null && _values.Count() >= 2 && _values[1].Length > 0 && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }

            //if (txtSCInfluenzaTemp.Text.Length == 0)
            //{
            //    if (e.KeyChar == '.')
            //    {
            //        e.Handled = true;
            //    }
            //}
            //if (!char.IsDigit(e.KeyChar) && e.KeyChar != 8 && e.KeyChar != 46)
            //{
            //    e.Handled = true;
            //}
            //if (e.KeyChar == '.' && txtSCInfluenzaTemp.Text.IndexOf('.') > -1)
            //{
            //    e.Handled = true;
            //}
        }
        /// <summary>
        /// Allow only one decimal point for the Temp.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSCInfluenzaTempR_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
            var _values = txtSCInfluenzaTempR.Text.Trim().Split('.');
            if (_values != null && _values.Count() >= 2 && _values[1].Length > 0 && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
            //if (txtSCInfluenzaTempR.Text.Length == 0)
            //{
            //    if (e.KeyChar == '.')
            //    {
            //        e.Handled = true;
            //    }
            //}
            //if (!char.IsDigit(e.KeyChar) && e.KeyChar != 8 && e.KeyChar != 46)
            //{
            //    e.Handled = true;
            //}
            //if (e.KeyChar == '.' && txtSCInfluenzaTempR.Text.IndexOf('.') > -1)
            //{
            //    e.Handled = true;
            //}
        }

        /// <summary>
        ///  IsVisable Time Measured Repeat(1)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSCInfluenzaTemp_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtSCInfluenzaTemp.Text))
            {
                double _temp = default(double);
                //if (this.ActiveControl.Parent.Name.Equals("txtSCInfluenzaTemp"))
                //{
                //    if (double.TryParse(txtSCInfluenzaTemp.Text.Trim(), out _temp))
                //        txtSCInfluenzaTempC.Text = CommonHelpers.ToCelsius(_temp).ToString();
                //    else
                //        txtSCInfluenzaTempC.ResetText();
                //}\
                if (double.TryParse(txtSCInfluenzaTemp.Text.Trim(), out _temp))
                {
                    if (CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
                    {
                        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
                    }
                }
            }
            else
            {

            }
        }

        /// <summary>
        ///  IsVisable Time Measured Repeat(2)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSCInfluenzaTempR_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtSCInfluenzaTempR.Text))
            {
                double _temp = default(double);
                //if (this.ActiveControl.Parent.Name.Equals("txtSCInfluenzaTempR"))
                //{
                //    if (double.TryParse(txtSCInfluenzaTempR.Text.Trim(), out _temp))
                //        txtSCInfluenzaTempCR.Text = CommonHelpers.ToCelsius(_temp).ToString();
                //}                
                if (double.TryParse(txtSCInfluenzaTempR.Text.Trim(), out _temp))
                {
                    if (CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
                    {
                        txtSCInfluenzaTempR.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        txtSCInfluenzaTempR.ForeColor = System.Drawing.Color.Red;
                    }
                }
            }
            else
            {

            }
        }

        /// <summary>
        /// Validate Tempreture
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveTempB_Click(object sender, EventArgs e)
        {

            //if (decimal.Parse(txtSCInfluenzaTemp.Text) >= 95.7M && decimal.Parse(txtSCInfluenzaTemp.Text) <= 99.5M)
            //{
            //    txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Black;
            //    cbNoRepeat.Checked = true;
            //    cbYesRepeat.Checked = false;
            //    //Disable Repeat CheckBoxes
            //    cbNoRepeat.Enabled = false;
            //    cbYesRepeat.Enabled = false;
            //    //........ block first repeat......
            //    txtTimeMeasuredB.Enabled = false;
            //    txtEquipmentIDB.Enabled = false;
            //    txtSCInfluenzaTemp.Enabled = false;
            //    //........ Enable second repeat......
            //    txtTimeMeasuredR.Enabled = false;
            //    txtEquipmentIDR.Enabled = false;
            //    txtSCInfluenzaTempR.Enabled = false;
            //    btnSaveInfluenze.Enabled = true;
            //    btnSaveTempB.Enabled = false;
            //    btnSaveTempR.Enabled = false;
            //    cbOtherSubjectProcedue.Checked = false;
            //    cbYesSubjectProcedue.Checked = false;
            //    cbNoSubjectProcedue.Checked = false;
            //}
            //else
            //{
            //    
            //   HelperFunctions.ShowMessageBox("You Entered '" + txtSCInfluenzaTemp.Text + "' Tempreture Range is Between  (95.7F° -  99.5F°)   Are you sure you want to save?", "Validate Temreture", MessageBoxButtons.YesNo, RadMessageIcon.Question);
            //    
            //    
            //    {
            //        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //        txtSCInfluenzaTemp.Enabled = false;
            //        txtTimeMeasuredB.Enabled = false;
            //        txtEquipmentIDB.Enabled = false;
            //        cbNoRepeat.Checked = false;
            //        cbYesRepeat.Checked = true;
            //        txtTimeMeasuredR.Enabled = true;
            //        txtEquipmentIDR.Enabled = true;
            //        txtSCInfluenzaTempR.Enabled = true;
            //        //Disable Repeat CheckBoxes
            //        cbNoRepeat.Enabled = true;
            //        cbYesRepeat.Enabled = true;
            //        btnSaveTempB.Enabled = false;
            //        btnSaveTempR.Enabled = true;
            //        txtEquipmentIDR.Focus();
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;
            //    }
            //    else
            //    {
            //        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //        txtSCInfluenzaTemp.Focus();
            //        cbNoRepeat.Checked = true;
            //        cbYesRepeat.Checked = false;
            //        txtTimeMeasuredR.Enabled = false;
            //        txtEquipmentIDR.Enabled = false;
            //        txtSCInfluenzaTempR.Enabled = false;
            //        btnSaveTempB.Enabled = true;
            //        btnSaveTempR.Enabled = true;
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;
            //    }

            //}
        }

        /// <summary>
        /// Validate Temreture
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveTempR_Click(object sender, EventArgs e)
        {

            //if (decimal.Parse(txtSCInfluenzaTempR.Text) >= 95.7M && decimal.Parse(txtSCInfluenzaTempR.Text) <= 99.5M)
            //{
            //    txtSCInfluenzaTempR.ForeColor = System.Drawing.Color.Black;
            //    cbNoRepeat.Checked = false;
            //    cbYesRepeat.Checked = true;
            //    // Disable CheckBoxes
            //    cbNoRepeat.Enabled = false;
            //    cbYesRepeat.Enabled = false;
            //    //........ block second repeat......
            //    txtTimeMeasuredR.Enabled = false;
            //    txtEquipmentIDR.Enabled = false;
            //    txtSCInfluenzaTempR.Enabled = false;
            //    btnSaveInfluenze.Enabled = true;
            //    btnSaveTempR.Enabled = false;
            //    cbOtherSubjectProcedue.Checked = false;
            //    cbYesSubjectProcedue.Checked = false;
            //    cbNoSubjectProcedue.Checked = false;
            //}
            //else
            //{
            //    
            //   HelperFunctions.ShowMessageBox("You Entered '" + txtSCInfluenzaTempR.Text + "' Tempreture Range is Between  (95.7F° - 99.5F°)   Are you sure you want to save?", "Validate Temreture", MessageBoxButtons.YesNo, RadMessageIcon.Question);
            //    
            //    
            //    {
            //        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;

            //        cbYesRepeat.Checked = true;
            //        txtTimeMeasuredR.Enabled = false;
            //        txtEquipmentIDR.Enabled = false;
            //        txtSCInfluenzaTempR.Enabled = false;
            //        // Disable CheckBoxes
            //        cbNoRepeat.Enabled = false;
            //        cbYesRepeat.Enabled = false;
            //        txtOtherSubjectProcedue.Enabled = false;
            //        btnSaveInfluenze.Enabled = true;
            //        btnSaveTempR.Enabled = false;
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;

            //    }
            //    else
            //    {
            //        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //        txtSCInfluenzaTemp.Focus();

            //        cbYesRepeat.Checked = true;
            //        btnSaveTempR.Enabled = true;
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;
            //    }

            //}
        }

        /// <summary>
        /// Save verified eSign in ScreeningInfluenza table before Tempreatuer & Questions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignInfluenza_Click(object sender, EventArgs e)
        {
            string documentType = string.Empty;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            if (ddlDocumentTypeInf.SelectedIndex < 0 || string.IsNullOrEmpty(ddlDocumentTypeInf.Text.Trim()))
            {
                HelperFunctions.ShowMessageBox("Please select document.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                ddlDocumentTypeInf.Focus();
                return;
            }
            if (ddlDocumentTypeInf.Text.Trim().Equals("Others") && string.IsNullOrEmpty(txtSCInfluenzaOtherDoc.Text.Trim()))
            {
                HelperFunctions.ShowMessageBox("Please specify other document.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtSCInfluenzaOtherDoc.Focus();
                return;
            }
            if (ddlDocumentTypeInf.SelectedIndex > -1)
            {
                documentType = ddlDocumentTypeInf.SelectedItem.Text;
                if (ddlDocumentTypeInf.Text.Trim().Equals("Others") && !string.IsNullOrEmpty(txtSCInfluenzaOtherDoc.Text.Trim()))
                    documentType += "|" + txtSCInfluenzaOtherDoc.Text.Trim();
            }
            try
            {
                tabName = "Influenza";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    ddlDocumentTypeInf.SelectedIndex = -1;
                    return;
                }
                else
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND  SubjectKey='" + _subjectKey + "')");

                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningInfluenza]
                                 (StudyId,SubjectKey,DocumentType,DocumentEsignedBy,DocumentEsignedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + documentType + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "')");

                        SqlCommand command = new SqlCommand(InsertQuery, connection);

                        SqlCommand cmd = new SqlCommand(checkExist, connection);
                        int count = (int)cmd.ExecuteScalar();
                        if (count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET DocumentType='" + documentType + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
                            cmdUpdate.ExecuteNonQuery();
                        }
                        else
                        {
                            command.ExecuteNonQuery();
                        }
                        connection.Close();
                        LoadDataBySelectedTab();
                        ExpandpanelBeforpopulate();
                    }
                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Influenza eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }

        }

        /// <summary>
        /// Disable eSign Button after eSign verification
        /// </summary>
        private void DisableESignInfluenzaAfterSign()
        {
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                if (_subjectKey != 0)
                {
                    connection.Open();
                    //string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                    string checkExist = string.Format(@"(if exists(select 1 FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "') begin select cast(1 as bit) as 'exist' end else begin select cast(0 as bit) as 'exist' end)");
                    SqlCommand cmd = new SqlCommand(checkExist, connection);
                    int count = (int)cmd.ExecuteScalar();
                    if (count > 0)
                    {
                        btneSignInfluenza.Enabled = false;
                        ddlDocumentTypeInf.Enabled = false;
                        //foreach (Control c in GBInfluenzaeSign.Controls)
                        //{
                        //    if (c is RadDropDownList)
                        //    {
                        //        RadDropDownList dropDown = c as RadDropDownList;
                        //        dropDown.Enabled = false;
                        //    }
                        //}
                        //foreach (Control c in QuestionsPanel.PanelContainer.Controls)
                        //{
                        //    c.Enabled = false;
                        //    //if (c is RadTextBox)
                        //    //{
                        //    //    RadTextBox textBox = c as RadTextBox;

                        //    //}
                        //}
                        //foreach (Control c in TempMeasurmentPanel.PanelContainer.Controls)
                        //{
                        //    c.Enabled = false;
                        //    //if (c is RadTextBox)
                        //    //{
                        //    //    RadTextBox textBox = c as RadTextBox;

                        //    //}
                        //}
                    }
                    else
                    {
                        // btneSignInfluenza.Enabled = true;
                        ddlDocumentTypeInf.Enabled = true;
                    }
                    connection.Close();
                }
            }
        }


        /// <summary>
        /// Disable Influenza Controls
        /// </summary>
        private void DisableInfluenzaControlsAfterSave()
        {
            //foreach (Control c in GBInfluenzaeSign.Controls)
            //{
            //    if (c is RadDropDownList)
            //    {
            //        RadDropDownList dropDown = c as RadDropDownList;
            //        dropDown.Enabled = false;
            //    }
            //}
            //foreach (Control c in QuestionsPanel.PanelContainer.Controls)
            //{
            //    c.Enabled = false;
            //    //if (c is RadTextBox)
            //    //{
            //    //    RadTextBox textBox = c as RadTextBox;

            //    //}
            //}
            //foreach (Control c in TempMeasurmentPanel.PanelContainer.Controls)
            //{
            //    c.Enabled = false;
            //    //if (c is RadTextBox)
            //    //{
            //    //    RadTextBox textBox = c as RadTextBox;

            //    //}
            //}
            CommonHelpers.SetReadOnlyProperties(GBInfluenzaeSign, true);
            CommonHelpers.SetReadOnlyProperties(QuestionsPanel.PanelContainer, true);
            CommonHelpers.SetReadOnlyProperties(TempMeasurmentPanel.PanelContainer, true);
            btnSaveInfluenze.Enabled = false;

            btnFailedInfluenza.Enabled = false;
        }

        /// <summary>
        /// Lock all tabs after the subject is not been used 
        /// </summary>
        private void DisableAllControlsAfterSubjectDrop()
        {

            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvInfluenza")
                {
                    ctrl.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                }
            }

        }
        /// <summary>
        /// Save Questions & Temp Measurment
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveInfluenze_Click(object sender, EventArgs e)
        {
            try
            {
                if (SaveInfluenza(SubjectStatusCode.Status.Proceed))
                {
                    HelperFunctions.ShowMessageBox("Influenza saved successfully.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Subject Failed Influenza
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedInfluenza_Click(object sender, EventArgs e)
        {
            try
            {
                if (SaveInfluenza(SubjectStatusCode.Status.Fail))
                {
                    HelperFunctions.ShowMessageBox("Influenza saved successfully. Subject has failed influenza.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private bool SaveInfluenza(SubjectStatusCode.Status status)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return false;
                if (!OnScreeningHelper.IsInfluenzaSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Influenza data has not been e-singed yet.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return false;
                }
                if (OnScreeningHelper.IsInfluenzaTempRepeatRequired(studyId, ValueOfKey) && !OnScreeningHelper.IsInfluenzaTempRepeatSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Influenza temperature repeat is required. Please repeat temperature first.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtEquipmentIDR.Focus();
                    return false;
                }
                if (!ValidateFirstInfluenzaTempFields())
                    return false;
                if (!ValidateRepeatInfluenzaTempFields())
                    return false;
                bool _isTemperaturesInRange = true;
                double _temp = default(double);
                if (double.TryParse(txtSCInfluenzaTemp.Text.Trim(), out _temp))
                {
                    if (!CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
                        _isTemperaturesInRange = false;
                }
                if (double.TryParse(txtSCInfluenzaTempR.Text.Trim(), out _temp))
                {
                    if (!CommonHelpers.IsTemperatureInRange(Convert.ToDecimal(_temp)))
                        _isTemperaturesInRange = false;
                    else
                        _isTemperaturesInRange = true;
                }
                if (status.Equals(SubjectStatusCode.Status.Proceed) && !_isTemperaturesInRange)
                {
                    if (HelperFunctions.ShowMessageBox("Temperature is not in range. Would you still want to proceed (Y/N)?", "Influenza", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return false;
                }
                if (!cbYesSubjectProcedue.Checked && !cbNoSubjectProcedue.Checked && !cbOtherSubjectProcedue.Checked)
                {
                    HelperFunctions.ShowMessageBox("Can subject proceed with  other clinical procedures? at least one of the fields should be selected:" + Environment.NewLine + "1-Yes" + Environment.NewLine + "2-No" + Environment.NewLine + "3-Others, please specify", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    cbYesSubjectProcedue.Focus();
                    return false;
                }
                if (cbOtherSubjectProcedue.Checked)
                {
                    if (string.IsNullOrEmpty(txtOtherSubjectProcedue.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please specify other reason.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        txtOtherSubjectProcedue.Focus();
                        return false;
                    }
                }
                if (status.Equals(SubjectStatusCode.Status.Fail) && string.IsNullOrEmpty(txtTemMeasureComments.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter comments.", "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTemMeasureComments.Focus();
                    return false;
                }
                //if (txtEquipmentIDB.Text == string.Empty || txtSCInfluenzaTemp.Text == string.Empty || txtTimeMeasuredB.Text == string.Empty && (cbYesSubjectProcedue.Checked || cbNoSubjectProcedue.Checked || cbOtherSubjectProcedue.Checked))
                //{
                //    string msg = "***Fields below Should not be empty:***" + Environment.NewLine + "1-EquipmentID" + Environment.NewLine + "2-Temp" + Environment.NewLine + "3-Time Measured" + Environment.NewLine + "***Can subject proceed with  other clinical procedures? at least one of the fields should be selected:***" + Environment.NewLine + "1-Yes" + Environment.NewLine + "2-No" + Environment.NewLine + "3-Others, please specify";
                //    HelperFunctions.ShowMessageBox(msg, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                //    return false;
                //}                
                tabName = "Influenza";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    return false;
                string documentType = string.Empty;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                bool yesnoCough = default(bool);
                bool yesnoDiarrhea = default(bool);
                bool yesnoFever = default(bool);
                bool yesnoOtherSymptoms = default(bool);
                bool yesnoContactSymptoms = default(bool);
                string equipID1 = string.Empty;
                string temp1 = string.Empty;
                string timeMeasured1 = string.Empty;
                string equipID2 = string.Empty;
                string temp2 = string.Empty;
                string timeMeasured2 = string.Empty;
                string subjectProceed = string.Empty;
                string _tempEsignedBy = string.Empty;
                string _tempEsignedDate = string.Empty;
                string _tempRepeatEsignedBy = string.Empty;
                string _tempRepeatEsignedDate = string.Empty;
                if (cbYesCough.Checked)
                {
                    yesnoCough = true;
                }
                else if (cbNoCough.Checked)
                {
                    yesnoCough = false;
                }
                if (cbYesDiarrhea.Checked)
                {
                    yesnoDiarrhea = true;
                }
                else if (cbNoDiarrhea.Checked)
                {
                    yesnoDiarrhea = false;
                }
                if (cbYesFever.Checked)
                {
                    yesnoFever = true;
                }
                else if (cbNoFever.Checked)
                {
                    yesnoFever = false;
                }
                if (cbYesAnyOther.Checked)
                {
                    yesnoOtherSymptoms = true;
                }
                else if (cbNoAnyOther.Checked)
                {
                    yesnoOtherSymptoms = false;
                }
                if (cbYesContact.Checked)
                {
                    yesnoContactSymptoms = true;
                }
                else if (cbNoContact.Checked)
                {
                    yesnoContactSymptoms = false;
                }
                if (!string.IsNullOrEmpty(txtEquipmentIDB.Text.Trim()) && !string.IsNullOrEmpty(txtSCInfluenzaTemp.Text.Trim()) && !string.IsNullOrEmpty(txtTimeMeasuredB.Text.Trim()))
                {
                    equipID1 = txtEquipmentIDB.Text.Trim();
                    temp1 = txtSCInfluenzaTemp.Text.Trim();
                    timeMeasured1 = txtTimeMeasuredB.Text.Trim();
                    _tempEsignedBy = App.EsignedUser.UserName;
                    _tempEsignedDate = GetCurrentStandardDateTime();
                }
                if (!string.IsNullOrEmpty(txtEquipmentIDR.Text.Trim()) && !string.IsNullOrEmpty(txtSCInfluenzaTempR.Text.Trim()) && !string.IsNullOrEmpty(txtTimeMeasuredR.Text.Trim()))
                {
                    equipID2 = txtEquipmentIDR.Text.Trim();
                    temp2 = txtSCInfluenzaTempR.Text.Trim();
                    timeMeasured2 = txtTimeMeasuredR.Text.Trim();
                    _tempRepeatEsignedBy = App.EsignedUser.UserName;
                    _tempRepeatEsignedDate = GetCurrentStandardDateTime();
                }
                //....... select document type......
                if (ddlDocumentTypeInf.SelectedIndex > -1)
                {
                    documentType = ddlDocumentTypeInf.SelectedItem.Text;
                }
                else
                {
                    documentType = "";
                }
                //..........Subject proceed with other clinical Yes/No/Others......
                if (cbYesSubjectProcedue.Checked)
                {
                    subjectProceed = cbYesSubjectProcedue.Checked.ToString();
                }
                else if (cbNoSubjectProcedue.Checked)
                {
                    subjectProceed = cbNoSubjectProcedue.Checked.ToString();
                }
                else if (cbOtherSubjectProcedue.Checked)
                {
                    subjectProceed = txtOtherSubjectProcedue.Text.Trim();
                }
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningInfluenza] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                    DataTable dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    db.BeginTransaction();
                    if (dtExist.Rows.Count > 0)
                    {
                        // string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET NewWroseCough='" + Convert.ToInt32(yesnoCough) + "',Diarrhea='" + Convert.ToInt32(yesnoDiarrhea) + "',FeverChills='" + Convert.ToInt32(yesnoFever) + "',OtherSymptoms='" + Convert.ToInt32(yesnoOtherSymptoms) + "',ContactWithAnyHasSymptoms='" + Convert.ToInt32(yesnoContactSymptoms) + "',EquipementID1='" + equipID1 + "',Temp1='" + temp1 + "',TimeMeasured1='" + timeMeasured1 + "',DateMeasured1='" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "',EquipementID2='" + equipID2 + "',Temp2='" + temp2 + "',TimeMeasured2='" + timeMeasured2 + "',DateMeasured2='" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "',SubjectProceed='" + subjectProceed + "',Comments='" + txtTemMeasureComments.Text + "',TempMeasureBy='" + _tempEsignedBy + "',TempMeasureAt='" + _tempEsignedDate + "',SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',TempRMeasureBy='" + _tempRepeatEsignedBy + "',TempRMeasureDate='" + _tempRepeatEsignedDate + "' WHERE  StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET SubjectProceed='" + subjectProceed + "',Comments='" + txtTemMeasureComments.Text + "',SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',ModifiedBy='" + _tempRepeatEsignedBy + "',ModifiedDate='" + _tempRepeatEsignedDate + "' WHERE  StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                    }
                    else
                    {
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningInfluenza]
                                 (StudyID,SubjectKey,NewWroseCough,Diarrhea,FeverChills,OtherSymptoms,ContactWithAnyHasSymptoms,EquipementID1,Temp1,TimeMeasured1,DateMeasured1,IsTempRepeat,EquipementID2,Temp2,TimeMeasured2,DateMeasured2,SubjectProceed,Comments,TempMeasureBy,TempMeasureAt,SubjectStatus,TempRMeasureBy,TempRMeasureDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + Convert.ToInt32(yesnoCough) + "','" + Convert.ToInt32(yesnoDiarrhea) + "','" + Convert.ToInt32(yesnoFever) + "','" + Convert.ToInt32(yesnoOtherSymptoms) + "','" + Convert.ToInt32(yesnoContactSymptoms) + "','" + equipID1 + "','" + temp1 + "','" + timeMeasured1 + "','" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "'," + equipID2 + "','" + temp2 + "','" + timeMeasured2 + "','" + CommonHelpers.PCMSDateFormat(DateTime.Now) + "','" + subjectProceed + "','" + txtTemMeasureComments.Text + "','" + _tempEsignedBy + "','" + _tempEsignedDate + "','" + (int)SubjectStatusCode.Status.Proceed + "','" + _tempRepeatEsignedBy + "','" + _tempRepeatEsignedDate + "')");
                        db.ExecuteInsertQuery(InsertQuery, null, false);
                    }
                    // .... Subject Status..........................
                    string _actionAt = string.Empty;
                    if (status.Equals(SubjectStatusCode.Status.Proceed))
                        _actionAt = "InfluenzaProceed";
                    else
                        _actionAt = "InfluenzaFail";
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningInfluenza", pgvInfluenza.Name, _actionAt, status, txtTemMeasureComments.Text, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningInfluenza", status, txtTemMeasureComments.Text);
                    db.CommitTransaction();
                    db.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }

        private void txtSCInfluenzaTemp_Leave(object sender, EventArgs e)
        {
            //................ Repeat..................
            //#region .......Reapeat if Temp is not between the range...........
            //if (!string.IsNullOrEmpty(txtSCInfluenzaTemp.Text))
            //{
            //    if (decimal.Parse(txtSCInfluenzaTemp.Text) >= 95.7M && decimal.Parse(txtSCInfluenzaTemp.Text) <= 99.5M)
            //    {
            //        txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Black;
            //        cbNoRepeat.Checked = true;
            //        cbYesRepeat.Checked = false;
            //        //Disable Repeat CheckBoxes
            //        cbNoRepeat.Enabled = false;
            //        cbYesRepeat.Enabled = false;
            //        //........ block first repeat......
            //        txtTimeMeasuredB.Enabled = false;
            //        txtEquipmentIDB.Enabled = false;
            //        txtSCInfluenzaTemp.Enabled = false;
            //        //........ Enable second repeat......
            //        txtTimeMeasuredR.Enabled = false;
            //        txtEquipmentIDR.Enabled = false;
            //        txtSCInfluenzaTempR.Enabled = false;
            //        btnSaveInfluenze.Enabled = true;
            //        btnSaveTempB.Enabled = false;
            //        btnSaveTempR.Enabled = false;
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;
            //    }
            //    else
            //    {
            //        
            //       HelperFunctions.ShowMessageBox("You Entered '" + txtSCInfluenzaTemp.Text + "' Tempreture Range is Between  (95.7F° -  99.5F°)   Are you sure you want to save?", "Validate Temreture", MessageBoxButtons.YesNo, RadMessageIcon.Question);
            //        
            //        
            //        {
            //            txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //            txtSCInfluenzaTemp.Enabled = false;
            //            txtTimeMeasuredB.Enabled = false;
            //            txtEquipmentIDB.Enabled = false;
            //            cbNoRepeat.Checked = false;
            //            cbYesRepeat.Checked = true;
            //            txtTimeMeasuredR.Enabled = true;
            //            txtEquipmentIDR.Enabled = true;
            //            txtSCInfluenzaTempR.Enabled = true;
            //            //Disable Repeat CheckBoxes
            //            cbNoRepeat.Enabled = true;
            //            cbYesRepeat.Enabled = true;
            //            btnSaveTempB.Enabled = false;
            //            btnSaveTempR.Enabled = true;
            //            txtEquipmentIDR.Focus();
            //            cbOtherSubjectProcedue.Checked = false;
            //            cbYesSubjectProcedue.Checked = false;
            //            cbNoSubjectProcedue.Checked = false;
            //        }
            //        else
            //        {
            //            txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //            txtSCInfluenzaTemp.Focus();
            //            cbNoRepeat.Checked = true;
            //            cbYesRepeat.Checked = false;
            //            txtTimeMeasuredR.Enabled = false;
            //            txtEquipmentIDR.Enabled = false;
            //            txtSCInfluenzaTempR.Enabled = false;
            //            btnSaveTempB.Enabled = true;
            //            btnSaveTempR.Enabled = true;
            //            cbOtherSubjectProcedue.Checked = false;
            //            cbYesSubjectProcedue.Checked = false;
            //            cbNoSubjectProcedue.Checked = false;
            //        }
            //    }
            //}


            //#endregion
        }

        private void txtSCInfluenzaTempR_Leave(object sender, EventArgs e)
        {
            ////............. For Repeat.................
            //#region .........Block if the temp is not correct...

            //if (!string.IsNullOrEmpty(txtSCInfluenzaTempR.Text))
            //{
            //    if (decimal.Parse(txtSCInfluenzaTempR.Text) >= 95.7M && decimal.Parse(txtSCInfluenzaTempR.Text) <= 99.5M)
            //    {
            //        txtSCInfluenzaTempR.ForeColor = System.Drawing.Color.Black;
            //        cbNoRepeat.Checked = false;
            //        cbYesRepeat.Checked = true;
            //        // Disable CheckBoxes
            //        cbNoRepeat.Enabled = false;
            //        cbYesRepeat.Enabled = false;
            //        //........ block second repeat......
            //        txtTimeMeasuredR.Enabled = false;
            //        txtEquipmentIDR.Enabled = false;
            //        txtSCInfluenzaTempR.Enabled = false;
            //        btnSaveInfluenze.Enabled = true;
            //        btnSaveTempR.Enabled = false;
            //        cbOtherSubjectProcedue.Checked = false;
            //        cbYesSubjectProcedue.Checked = false;
            //        cbNoSubjectProcedue.Checked = false;
            //    }
            //    else
            //    {
            //        
            //       HelperFunctions.ShowMessageBox("You Entered '" + txtSCInfluenzaTempR.Text + "' Tempreture Range is Between  (95.7F° - 99.5F°)   Are you sure you want to save?", "Validate Temreture", MessageBoxButtons.YesNo, RadMessageIcon.Question);
            //        
            //        
            //        {
            //            txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;

            //            cbYesRepeat.Checked = true;
            //            txtTimeMeasuredR.Enabled = false;
            //            txtEquipmentIDR.Enabled = false;
            //            txtSCInfluenzaTempR.Enabled = false;
            //            // Disable CheckBoxes
            //            cbNoRepeat.Enabled = false;
            //            cbYesRepeat.Enabled = false;
            //            txtOtherSubjectProcedue.Enabled = false;
            //            btnSaveInfluenze.Enabled = true;
            //            btnSaveTempR.Enabled = false;
            //            cbOtherSubjectProcedue.Checked = false;
            //            cbYesSubjectProcedue.Checked = false;
            //            cbNoSubjectProcedue.Checked = false;

            //        }
            //        else
            //        {
            //            txtSCInfluenzaTemp.ForeColor = System.Drawing.Color.Red;
            //            txtSCInfluenzaTemp.Focus();

            //            cbYesRepeat.Checked = true;
            //            btnSaveTempR.Enabled = true;
            //            cbOtherSubjectProcedue.Checked = false;
            //            cbYesSubjectProcedue.Checked = false;
            //            cbNoSubjectProcedue.Checked = false;
            //        }

            //    }
            //}

            //#endregion
        }

        /// <summary>
        /// Get and populate Influenza
        /// </summary>
        /// <param name="subjectKey"></param>
        private void RetrieveScreeningInfluenza(string subjectKey)
        {
            string documentType = string.Empty;
            int yesnoCough = default(int);
            int yesnoDiarrhea = default(int);
            int yesnoFever = default(int);
            int yesnoOtherSymptoms = default(int);
            int yesnoContactSymptoms = default(int);
            string subjectProcedue = string.Empty;
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT * FROM [dbo].[ScreeningInfluenza]  WHERE  StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "'");
                    SqlCommand cmd = new SqlCommand(query, connection);
                    SqlDataReader dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        //.... Questions
                        CancelAddInfluenzaQuestionsAnsCheckBoxEvents(true);
                        lblSCInfluenzaEsignedBy.Text = dr["TempMeasureBy"].ToString();
                        if (!string.IsNullOrEmpty(dr["TempMeasureAt"].ToString()))
                        {
                            DateTime _esignedDate = default(DateTime);
                            if (DateTime.TryParse(dr["TempMeasureAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                lblSCInfluenzaEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                        }
                        lblSCInfluenzaREsignedBy.Text = dr["TempRMeasureBy"].ToString();
                        if (!string.IsNullOrEmpty(dr["TempRMeasureDate"].ToString()))
                        {
                            DateTime _esignedDate = default(DateTime);
                            if (DateTime.TryParse(dr["TempRMeasureDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                lblSCInfluenzaREsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                        }
                        if (dr["NewWroseCough"] != DBNull.Value)
                        {
                            yesnoCough = Convert.ToInt32(dr["NewWroseCough"]);
                            if (yesnoCough == 1)
                            {
                                cbYesCough.Checked = true;
                            }
                            else if (yesnoCough == 0)
                            {
                                cbNoCough.Checked = true;
                            }
                        }
                        if (dr["Diarrhea"] != DBNull.Value)
                        {
                            yesnoDiarrhea = Convert.ToInt32(dr["Diarrhea"]);
                            if (yesnoDiarrhea == 1)
                            {
                                cbYesDiarrhea.Checked = true;
                            }
                            else if (yesnoDiarrhea == 0)
                            {
                                cbNoDiarrhea.Checked = true;
                            }
                        }

                        if (dr["FeverChills"] != DBNull.Value)
                        {
                            yesnoFever = Convert.ToInt32(dr["FeverChills"]);
                            if (yesnoFever == 1)
                            {
                                cbYesFever.Checked = true;
                            }
                            else if (yesnoFever == 0)
                            {
                                cbNoFever.Checked = true;
                            }
                        }
                        if (dr["OtherSymptoms"] != DBNull.Value)
                        {
                            yesnoOtherSymptoms = Convert.ToInt32(dr["OtherSymptoms"]);
                            if (yesnoOtherSymptoms == 1)
                            {
                                cbYesAnyOther.Checked = true;
                            }
                            else if (yesnoOtherSymptoms == 0)
                            {
                                cbNoAnyOther.Checked = true;
                            }
                        }
                        if (dr["ContactWithAnyHasSymptoms"] != DBNull.Value)
                        {
                            yesnoContactSymptoms = Convert.ToInt32(dr["ContactWithAnyHasSymptoms"]);
                            if (yesnoContactSymptoms == 1)
                            {
                                cbYesContact.Checked = true;
                            }
                            else if (yesnoContactSymptoms == 0)
                            {
                                cbNoContact.Checked = true;
                            }
                        }
                        CancelAddInfluenzaQuestionsAnsCheckBoxEvents(false);
                        if (dr["IsRepeatRequired"] != DBNull.Value)
                        {
                            bool _isTempRepeat = default(bool);
                            _isTempRepeat = Convert.ToBoolean(dr["IsRepeatRequired"]);
                            if (_isTempRepeat)
                            {
                                //cbYesRepeat.Checked = true;
                                btnSCInfluenzaTempRepeat.Enabled = true;
                            }
                            else
                            {
                                //cbNoRepeat.Checked = true;
                                btnSCInfluenzaTempRepeat.Enabled = false;
                            }
                        }
                        //....Time , EquipmentID , Tempreture
                        txtEquipmentIDB.Text = dr["EquipementID1"].ToString();
                        txtSCInfluenzaTemp.Text = dr["Temp1"].ToString();
                        txtTimeMeasuredB.Text = dr["TimeMeasured1"].ToString();

                        txtEquipmentIDR.Text = dr["EquipementID2"].ToString();
                        txtSCInfluenzaTempR.Text = dr["Temp2"].ToString();

                        txtTimeMeasuredR.Text = dr["TimeMeasured2"].ToString();

                        //...... Subjetc Procedue
                        subjectProcedue = dr["SubjectProceed"].ToString();
                        if (subjectProcedue == "True")
                        {
                            cbYesSubjectProcedue.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(cbYesSubjectProcedue_CheckStateChanging);
                            cbYesSubjectProcedue.Checked = true;
                            cbYesSubjectProcedue.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(cbYesSubjectProcedue_CheckStateChanging);
                        }
                        else if (subjectProcedue == "False")
                        {
                            cbNoSubjectProcedue.Checked = true;
                        }
                        else
                        {
                            cbOtherSubjectProcedue.Checked = true;
                            txtOtherSubjectProcedue.Text = subjectProcedue;
                        }
                        txtTemMeasureComments.Text = dr["Comments"].ToString();
                        //....Document Type
                        documentType = dr["DocumentType"].ToString();
                        string _docType = string.Empty;
                        string[] _docs = documentType.Split('|');
                        if (_docs.Count() > 1)
                        {
                            _docType = _docs[0];
                            txtSCInfluenzaOtherDoc.Text = _docs[1];
                        }
                        else
                            _docType = documentType;
                        var item = ddlDocumentTypeInf.Items.Where(i => i.Text.Equals(_docType)).FirstOrDefault();
                        if (item != null)
                            ddlDocumentTypeInf.SelectedIndex = item.Index;
                        else
                            ddlDocumentTypeInf.SelectedIndex = -1;

                        ExpandPnaleAfterPopulate();
                    }
                    connection.Close();
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Subject Comments", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void CancelAddInfluenzaQuestionsAnsCheckBoxEvents(bool cancel)
        {
            var controls = QuestionsPanel.PanelContainer.Controls.OfType<RadCheckBox>().ToList();
            foreach (RadCheckBox chk in controls)
            {
                switch (chk.Name)
                {
                    case "cbYesCough":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbYesCough_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbYesCough_CheckStateChanged);
                        }
                        break;
                    case "cbNoCough":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbNoCough_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbNoCough_CheckStateChanged);
                        }
                        break;
                    case "cbYesDiarrhea":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbYesDiarrhea_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbYesDiarrhea_CheckStateChanged);
                        }
                        break;
                    case "cbNoDiarrhea":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbNoDiarrhea_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbNoDiarrhea_CheckStateChanged);
                        }
                        break;
                    case "cbYesFever":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbYesFever_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbYesFever_CheckStateChanged);
                        }
                        break;
                    case "cbNoFever":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbNoFever_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbNoFever_CheckStateChanged);
                        }
                        break;
                    case "cbYesAnyOther":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbYesAnyOther_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbYesAnyOther_CheckStateChanged);
                        }
                        break;
                    case "cbNoAnyOther":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbNoAnyOther_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbNoAnyOther_CheckStateChanged);
                        }
                        break;
                    case "cbYesContact":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbYesContact_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbYesContact_CheckStateChanged);
                        }
                        break;
                    case "cbNoContact":
                        if (cancel)
                        {
                            chk.CheckStateChanged -= new System.EventHandler(cbNoContact_CheckStateChanged);
                        }
                        else
                        {
                            chk.CheckStateChanged += new System.EventHandler(cbNoContact_CheckStateChanged);
                        }
                        break;
                    default:
                        break;
                }
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ddlDocumentTypeInf_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddlDocumentTypeInf.SelectedIndex > -1)
            {
                btneSignInfluenza.Enabled = true;
                if (ddlDocumentTypeInf.Text.Trim().Equals("Others"))
                {
                    txtSCInfluenzaOtherDoc.Enabled = true;
                    txtSCInfluenzaOtherDoc.Focus();
                }
                else
                    txtSCInfluenzaOtherDoc.Enabled = false;
            }
            else
            {
                btneSignInfluenza.Enabled = false;
            }
        }
        #endregion _______On Screening Influenza_______

        //****************************** ID Verification ******************************
        #region On Screening ID verification
        private void btnPrintSubjectLabel_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            frmLabelPrintDialog _objLPD = new frmLabelPrintDialog();
            _objLPD.StudyID = studyId;
            _objLPD.SubjectID = txtSubjectIDs.Text.Trim();
            _objLPD.Module = "Screening";
            // _objLPD.TNumber = OnScreeningHelper.GetTNumberBySubjectKey(ValueOfKey, studyId);
            _objLPD.ShowDialog();
            _objLPD.Dispose();
        }

        /// <summary>
        /// Check if Subject Dropped or Failed
        /// </summary>
        /// <param name="subjectkey"></param>
        private void SubjectDroppedFailedIDVer(string subjectkey)
        {
            bool subjectDroppedIDVer = DroppedHelper.IsSubjectDroppedIDVerification(studyId, subjectkey);
            bool subjectFailedIDVer = FailedHelper.IsSubjectFailedIDVerification(studyId, subjectkey);
            // =================== Check Subject Dropped=====================
            if (subjectDroppedIDVer == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvIDVerfication")
                    {
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvIDVerfication.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);

                        pgvInfluenza.Image = Locked;
                        pgvConsent.Image = null;
                        //pgvECG.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        foreach (Control c in pgvIDVerfication.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        pgvOnScreeningPages.SelectedPage = pgvIDVerfication;
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }

            if (subjectFailedIDVer == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvIDVerfication")
                    {
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvIDVerfication.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvConsent.Image = null;
                        //pgvECG.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        foreach (Control c in pgvIDVerfication.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        pgvOnScreeningPages.SelectedPage = pgvIDVerfication;
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }

        }
        /// <summary>
        /// populate subject information based on key
        /// </summary>
        /// <returns></returns>
        private void RetrieveSCIDVerificationAddressAndContact(string subjectKey)
        {
            string phoneNumber = string.Empty;
            string phonetype = string.Empty;
            string address = string.Empty;
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.RecruiteConnection))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT top 1 s.SubjectID,csp.CodeSubjectPhone,sp.SubjectPhoneNumber,CONCAT(s.SubjectAddressStreet,',',s.SubjectAddressCity,',',cps.CodeProvinceState,',',s.SubjectAddressPostalCode) AS Addres FROM [dbo].[Subject] s
                    left join[dbo].[SubjectPhone] sp on s.SubjectKey=sp.SubjectKey
                    left join[dbo].[CodeSubjectPhone] csp on sp.[SubjectPhoneKey]=csp.CodeSubjectPhoneKey
                     left join[dbo].[CodeProvinceState] cps on cps.CodeProvinceStateKey=s.SubjectAddressProvince
                     WHERE S.SubjectKey='" + subjectKey + "' and csp.CodeSubjectPhone<> 'Email'");
                    SqlCommand cmd = new SqlCommand(query, connection);
                    var list = cmd.ExecuteReader();
                    while (list.Read())
                    {
                        SubjectID = list["SubjectID"].ToString();
                        phonetype = list["CodeSubjectPhone"].ToString();
                        address = list["Addres"].ToString();
                        phoneNumber = list["SubjectPhoneNumber"].ToString();

                    }
                    connection.Close();
                }
                if (phonetype != "" && phonetype == "Home")
                {
                    txtContactHomeScreening.Text = phoneNumber;
                }
                else if (phonetype != "" && (phonetype == "Cell" || phonetype == "Others"))
                {
                    txtContactCellScreening.Text = phoneNumber;
                }
                if (!string.IsNullOrEmpty(address.Split(',').Aggregate((a, b) => a + b).ToString().Trim()))
                    txtAddressScreening.Text = address;
                txtSubjectIDscreening.Text = SubjectID;
                if (ddSubjects.SelectedIndex > -1)
                {
                    txtSubjectNameIDVer.Text = ddSubjects.SelectedItem.Text;
                }
                else
                {
                    txtSubjectNameIDVer.Text = string.Empty;
                }
                txtSubjectIDIDVer.Text = SubjectID;
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Get Subject DemographicsInfoby SubjectKey
        /// </summary>
        /// <param name="subjectKey"></param>
        private void RetrieveSCIDVerificationSubjectGeneralInfo(string subjectKey)
        {
            //--- Demographic Fields
            int gender = 0;
            DateTime dateBirth = default(DateTime);
            string menstrual = string.Empty;
            int regularDiet = 0;
            int regular = 0;

            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.RecruiteConnection))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT FORMAT(SubjectDateBirth, 'MMM d, yyyy') AS BirthDate,SubjectGender,SubjectAge,SubjectMenstrualCycle,SubjectRegularDiet,SubjectMenstrualCycleRegIrreg,SubjectBloodAvailable,SubjectBloodUsed,FORMAT(SubjectDateWashOutStudy, 'MMM d, yyyy') AS LockOutDate,SubjectLastStudy,SubjectWeight,SubjectHeight,SubjectBMI  FROM [dbo].[Subject]
                  WHERE SubjectKey='" + subjectKey + "'");
                    SqlCommand cmd = new SqlCommand(query, connection);
                    var list = cmd.ExecuteReader();
                    if (list.Read())
                    {
                        DateTime.TryParse(list["BirthDate"].ToString(), out dateBirth);
                        gender = Convert.ToInt32(list["SubjectGender"]);
                        menstrual = list["SubjectMenstrualCycle"].ToString();
                        regular = Convert.ToInt32(list["SubjectMenstrualCycleRegIrreg"]);
                        regularDiet = Convert.ToInt32(list["SubjectRegularDiet"]);
                    }
                    connection.Close();
                }
                //Birth Date
                txtBDScreening.Text = CommonHelpers.PCMSDateFormat(dateBirth);
                // Age                
                txtAgeScreening.Text = CommonHelpers.GetAge(dateBirth).ToString();
                // Gender
                if (gender == 0)
                {
                    txtGenderScreening.Text = "Male";
                }
                else
                {
                    txtGenderScreening.Text = "Female";
                }
                //Menstrual
                txtMenstrualScreening.Text = menstrual;
                //Regular
                if (regular == 0)
                {
                    txtRegularScreening.Text = "No";
                }
                else if (regular == 1)
                {
                    txtRegularScreening.Text = "Yes";
                }
                else
                {
                    txtRegularScreening.Text = "";
                }
                //Regular Diet
                if (regularDiet == 1)
                {
                    txtRegularDietScreening.Text = "Yes";
                }
                else
                {
                    txtRegularDietScreening.Text = "No";
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Subject Droped Lock
        /// </summary>
        private void DisableAllControlsAfterSubjectDropIDVerification()
        {

            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvIDVerification")
                {
                    ctrl.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                }
            }

        }

        /// <summary>
        /// Toogle, Subject Received ICF (Yes/No/NA)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbICFIDNo_CheckStateChanged(object sender, EventArgs e)
        {
            cbICFCopyYes.CheckStateChanged -= new System.EventHandler(cbICFIDYes_CheckStateChanged);
            if (cbICFCopyNo.Checked)
            {
                cbICFCopyYes.Checked = false;
            }
            cbICFCopyYes.CheckStateChanged += new System.EventHandler(cbICFIDYes_CheckStateChanged);
        }

        /// <summary>
        /// Toogle, Subject Received ICF (Yes/No/NA)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbICFIDYes_CheckStateChanged(object sender, EventArgs e)
        {
            cbICFCopyNo.CheckStateChanged -= new System.EventHandler(cbICFIDNo_CheckStateChanged);
            if (cbICFCopyYes.Checked)
            {
                bool _enable = default(bool);
                if (IsICFRequired)
                {
                    if (ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned && cbYesRecievedPack.Checked)
                        _enable = true;
                    else
                        _enable = false;
                }
                else
                {
                    if (ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned)
                        _enable = true;
                    else
                        _enable = false;
                }
                btnIDVer.Enabled = _enable;
                cbICFCopyNo.Checked = false;
            }
            else
                btnIDVer.Enabled = false;
            cbICFCopyNo.CheckStateChanged += new System.EventHandler(cbICFIDNo_CheckStateChanged);
        }


        /// <summary>
        /// toggle between Yes/NO
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesRecievedPack_CheckStateChanged(object sender, EventArgs e)
        {
            cbNoRecievedPack.CheckStateChanged -= new System.EventHandler(cbNoRecievedPack_CheckStateChanged);
            if (cbYesRecievedPack.Checked)
            {
                bool _enable = default(bool);
                if (IsICFRequired)
                {
                    if (ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned && cbICFCopyYes.Checked)
                        _enable = true;
                    else
                        _enable = false;
                }
                else
                {
                    if (ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned)
                        _enable = true;
                    else
                        _enable = false;
                }
                btnIDVer.Enabled = _enable;
                cbNoRecievedPack.Checked = false;
            }
            else
            {
                btnIDVer.Enabled = false;
            }
            cbNoRecievedPack.CheckStateChanged += new System.EventHandler(cbNoRecievedPack_CheckStateChanged);
        }

        /// <summary>
        /// toggle between No/Yes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoRecievedPack_CheckStateChanged(object sender, EventArgs e)
        {
            cbYesRecievedPack.CheckStateChanged -= new System.EventHandler(cbYesRecievedPack_CheckStateChanged);
            if (cbNoRecievedPack.Checked && isSubjectSigned)
            {
                btnIDVer.Enabled = false;
                cbYesRecievedPack.Checked = false;
                cbNoRecievedPack.Checked = true;

            }
            else if (cbNoRecievedPack.Checked)
            {
                cbYesRecievedPack.Checked = false;
            }
            cbYesRecievedPack.CheckStateChanged += new System.EventHandler(cbYesRecievedPack_CheckStateChanged);
        }

        /// <summary>
        /// Disable and Block All Controls After E-Sign
        /// </summary>
        private void DisableIDVerificationControlsAfterESign()
        {
            foreach (Control control in GBSubjectESign.Controls)
            {
                control.Enabled = false;
            }
            foreach (Control control in GBSInfo.Controls)
            {
                control.Enabled = false;
            }
            foreach (Control control in GBDemog.Controls)
            {
                control.Enabled = false;
            }
            foreach (Control control in GBIDVery.Controls)
            {
                control.Enabled = false;
            }
            cbYesRecievedPack.Enabled = false;
            cbNoRecievedPack.Enabled = false;


            cbICFCopyYes.Enabled = false;
            cbICFCopyNo.Enabled = false;
        }

        /// <summary>
        /// Subject Signiture
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSigniture_Click(object sender, EventArgs e)
        {
            subjectSign.Enabled = true;
            subjectSign.SetTabletState(1);
        }
        /// <summary>
        /// Clear Subject Signiture
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClearSign_Click(object sender, EventArgs e)
        {
            txtSubjecteSignDateTime.ResetText();
            subjectSign.SetTabletState(0);
            subjectSign.ClearTablet();
            isSubjectSigned = false;
            btnIDVer.Enabled = false;
            //if (cbYesRecievedPack.Checked && ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned)
            //{
            //    btnIDVer.Enabled = true;
            //}
            //else
            //{
            //    btnIDVer.Enabled = false;
            //}            
        }

        /// <summary>
        /// eSign IDVerification
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnIDVer_Click(object sender, EventArgs e)
        {
            try
            {
                if (SaveIDVerification(SubjectStatusCode.Status.Proceed))
                {
                    HelperFunctions.ShowMessageBox("ID verification saved with subject proceed status.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void subjectSign_PenUp(object sender, EventArgs e)
        {
            btnClearSign.Enabled = true;
            isSubjectSigned = true;
            txtSubjecteSignDateTime.Text = DateTime.Now.ToString("MMM dd,yyyy H:mm");
            if (cbYesRecievedPack.Checked && ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned && ((IsICFRequired && cbICFCopyYes.Checked) || !IsICFRequired))
            {
                btnIDVer.Enabled = true;
            }
            else
            {
                btnIDVer.Enabled = false;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ddlDocumentTypeIDVer_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            btnSigniture.Enabled = true;
            btnClearSign.Enabled = true;
            //if (cbICFIDYes.Checked && cbYesRecievedPack.Checked && ddlDocumentTypeIDVer.SelectedIndex>-1 && isSubjectSigned)
            if (cbYesRecievedPack.Checked && ddlDocumentTypeIDVer.SelectedIndex > -1 && isSubjectSigned)
            {
                btnIDVer.Enabled = true;
            }
            else
            {
                btnIDVer.Enabled = false;
            }
            if (ddlDocumentTypeIDVer.Text.Trim().Equals("Others"))
            {
                txtOtherIDDoc.Enabled = true;
                txtOtherIDDoc.Focus();
            }
            else
                txtOtherIDDoc.Enabled = false;
        }
        /// <summary>
        /// ... Retrieve Screening ID Verification
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetScreeningIDVerificationeSign(string subjectKey)
        {
            string documentType = string.Empty;
            Byte[] subjectSignImage = default(Byte[]);
            string recievedCopy = string.Empty;
            string recievedCopyICF = string.Empty;
            // bool influenzaSigned = OnScreeningHelper.IsInfluenzaSigned(studyId, subjectKey);
            bool IDVerificationSigned = OnScreeningHelper.IsIDverificationSigned(studyId, subjectKey);
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    string query = string.Format(@"SELECT * FROM [dbo].[ScreeningIDVerification] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "' and Visit=" + Visit);
                    SqlCommand cmd = new SqlCommand(query, connection);
                    SqlDataReader dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        if (dr["SubjectSigniture"] != DBNull.Value)
                        {
                            subjectSignImage = (byte[])dr["SubjectSigniture"];
                            subjectSignitureBox.Location = new Point(421, 19);
                            subjectSignitureBox.Size = new Size(270, 93);
                            subjectSignitureBox.Image = CommonHelpers.ByteArrayToImage(subjectSignImage);
                            subjectSign.Visible = false;
                            subjectSignitureBox.Visible = true;
                        }
                        else
                        {
                            subjectSign.Visible = true;
                            subjectSignitureBox.Visible = false;
                        }

                        //....Document Type
                        documentType = (dr["DocumentType"].ToString());
                        var item = ddlDocumentTypeIDVer.Items.Where(i => i.Text.Equals(documentType)).FirstOrDefault();
                        ddlDocumentTypeIDVer.SelectedIndexChanged -= new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlDocumentTypeIDVer_SelectedIndexChanged);
                        if (item != null)
                            ddlDocumentTypeIDVer.SelectedIndex = item.Index;
                        else
                            ddlDocumentTypeIDVer.SelectedIndex = -1;
                        txtOtherIDDoc.Text = dr["OtherDocument"].ToString();
                        ddlDocumentTypeIDVer.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlDocumentTypeIDVer_SelectedIndexChanged);
                        //........... Subject Recieved study package
                        recievedCopy = dr["SubjectRecivedPackage"].ToString();
                        if (recievedCopy == "Yes")
                        {
                            cbNoRecievedPack.Checked = false;
                            cbYesRecievedPack.Checked = true;
                        }
                        else if (recievedCopy == "No")
                        {
                            cbNoRecievedPack.Checked = true;
                            cbYesRecievedPack.Checked = false;
                        }
                        //........... Subject Recieved ICF
                        recievedCopyICF = dr["SubjectRecivedICF"].ToString();
                        if (recievedCopyICF == "Yes")
                        {
                            cbICFCopyYes.Checked = true;
                        }
                        else if (recievedCopyICF == "No")
                        {
                            cbICFCopyNo.Checked = true;
                        }
                        lblSCIDVerEsignedBy.Text = dr["eSignedBy"].ToString();
                        if (!string.IsNullOrEmpty(dr["eSignedAt"].ToString()))
                        {
                            DateTime _esignedDate = default(DateTime);
                            if (DateTime.TryParse(dr["eSignedAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                lblSCIDVerEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                        }
                        if (!string.IsNullOrEmpty(dr["SignedDateTime"].ToString()))
                            txtSubjecteSignDateTime.Text = CommonHelpers.PCMSDateTimeFormat(Convert.ToDateTime(dr["SignedDateTime"].ToString()));
                    }
                    else
                    {
                        subjectSign.Visible = true;
                        subjectSign.Location = new Point(421, 19);
                        subjectSign.Size = new Size(270, 93);
                        subjectSignitureBox.Visible = false;
                    }
                    connection.Close();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        ///  Subject Failed at Id Verivifaction
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtFailedIDverification_Click(object sender, EventArgs e)
        {
            try
            {
                if (SaveIDVerification(SubjectStatusCode.Status.Fail))
                {
                    HelperFunctions.ShowMessageBox("ID verification saved with subject failed status.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening ID Verification eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private bool SaveIDVerification(SubjectStatusCode.Status status)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return false;
                if (ddlDocumentTypeIDVer.SelectedIndex < 0)
                {
                    HelperFunctions.ShowMessageBox("Please select document type.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Info);
                    ddlDocumentTypeIDVer.Focus();
                    return false;
                }
                if (ddlDocumentTypeIDVer.Text.Trim().Equals("Others") && string.IsNullOrEmpty(txtOtherIDDoc.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please specify other document.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Info);
                    txtOtherIDDoc.Focus();
                    return false;
                }
                if (status.Equals(SubjectStatusCode.Status.Proceed))
                {
                    if (!cbYesRecievedPack.Checked)
                    {
                        HelperFunctions.ShowMessageBox("Please check 'Subject recieved study package(Yes)'.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Info);
                        cbYesRecievedPack.Focus();
                        return false;
                    }
                    if (IsICFRequired && !cbICFCopyYes.Checked)
                    {
                        HelperFunctions.ShowMessageBox("Please check 'Subject recieved ICF package(Yes)'.", "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Info);
                        cbICFCopyYes.Focus();
                        return false;
                    }
                }
                string _comments = string.Empty;
                if (status.Equals(SubjectStatusCode.Status.Fail))
                {
                    using (frmCommentDialogBox objDialog = new frmCommentDialogBox())
                    {
                        objDialog.Text = "ID Verification (Comments)";
                        if (!objDialog.ShowDialog().Equals(DialogResult.OK))
                            return false;
                        _comments = objDialog.txtComment.Text.Trim();
                    }
                }
                tabName = "ID Verification";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    return false;
                string documentType = string.Empty;
                string YesNoReceived = string.Empty;
                string YesNoReceivedICF = string.Empty;
                string _action = string.Empty;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                // Received Package....
                if (cbYesRecievedPack.Checked)
                {
                    YesNoReceived = cbYesRecievedPack.Text;
                }
                else if (cbNoRecievedPack.Checked)
                {
                    YesNoReceived = cbNoRecievedPack.Text;
                }
                // Received ICF....
                if (cbICFCopyYes.Checked)
                {
                    YesNoReceivedICF = cbICFCopyYes.Text;
                }
                else if (cbICFCopyNo.Checked)
                {
                    YesNoReceivedICF = cbICFCopyNo.Text;
                }

                // Document Type......
                if (ddlDocumentTypeIDVer.SelectedIndex > -1)
                {
                    documentType = ddlDocumentTypeIDVer.SelectedItem.Text;
                }
                else
                {
                    documentType = "";
                }
                if (status.Equals(SubjectStatusCode.Status.Proceed))
                    _action = "IDVerficationProceed";
                else if (status.Equals(SubjectStatusCode.Status.Fail))
                    _action = "IDVerficationFail";
                List<SqlParameter> _params = new List<SqlParameter>();
                _params.Add(new SqlParameter("@studyid", studyId));
                _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                _params.Add(new SqlParameter("@sign", CommonHelpers.ImageToByteArray(CommonHelpers.GetSubjectSignatureImage(subjectSign))));
                _params.Add(new SqlParameter("@doctype", documentType));
                _params.Add(new SqlParameter("@dob", txtBDScreening.Text.Trim()));
                _params.Add(new SqlParameter("@age", txtAgeScreening.Text.Trim()));
                _params.Add(new SqlParameter("@gender", txtGenderScreening.Text.Trim()));
                _params.Add(new SqlParameter("@srICF", YesNoReceivedICF));
                _params.Add(new SqlParameter("@srPackage", YesNoReceived));
                _params.Add(new SqlParameter("@subjectstatus", status));
                _params.Add(new SqlParameter("@signedBy", App.EsignedUser.UserName));
                _params.Add(new SqlParameter("@signedAt", DateTime.Now));
                _params.Add(new SqlParameter("@OtherDocument", txtOtherIDDoc.Text.Trim()));
                _params.Add(new SqlParameter("@Visit", Visit));
                _params.Add(new SqlParameter("@SignedDateTime", txtSubjecteSignDateTime.Text.Trim()));

                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningIDVerification] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                    // ('" + _subjectKey + "','"+ subjImg + "','" + documentType + "','" + YesNoReceivedICF + "','" + YesNoReceived + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                    DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    db.BeginTransaction();
                    if (_dtExist.Rows.Count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningIDVerification] SET SubjectSigniture=@sign,SignedDateTime=@SignedDateTime, DocumentType=@doctype,OtherDocument=@OtherDocument,DOB=@dob,Age=@age,Gender=@gender,SubjectRecivedICF=@srICF, SubjectRecivedPackage=@srPackage,SubjectStatus=@subjectstatus,eSignedBy=@signedBy,eSignedAt=@signedAt WHERE StudyID=@studyid AND SubjectKey=@subjectkey and Visit=@Visit"); //,Comments=@cordinatorcomment                       
                        db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                    }
                    else
                    {
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningIDVerification]
                                 (StudyID,SubjectKey,SubjectSigniture,SignedDateTime,DocumentType,OtherDocument,DOB,Age,Gender,SubjectRecivedICF,SubjectRecivedPackage,SubjectStatus,eSignedBy,eSignedAt,Visit) VALUES
                                (@studyid,@subjectkey,@sign,@SignedDateTime,@doctype,@OtherDocument,@dob,@age,@gender,@srICF,@srPackage,@subjectstatus,@signedBy,@signedAt,@Visit)");
                        db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                    }
                    // .... Subject Status..........................
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningIDVerification", pgvIDVerfication.Name, _action, status, _comments, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningIDVerification", status, _comments);
                    db.CommitTransaction();
                    LoadDataBySelectedTab();
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void btnDropIDVerification_Click(object sender, EventArgs e)
        {

        }

        #endregion ___________On Screening ID verification_____

        //****************************** Consent ******************************
        #region Consent 

        //****************************** PCF ******************************
        #region  On Screening Consent(PCF)        
        private void btnSCPCFCopyToSubject_Click(object sender, EventArgs e)
        {
            try
            {
                string _updateQuery = "";
                if (!OnScreeningHelper.IsPCFSignedBySubject(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Subject has not been done signature.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!OnScreeningHelper.IsPCFSigned(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Subject has not been consented.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "PCF";
                string reason = string.Format("This action will be e-signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }

                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningPCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", ValueOfKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { sp1, sp2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                    if (dtSelect.Rows.Count > 0)
                    {
                        SqlParameter[] sqlParams;
                        SqlParameter sp4 = new SqlParameter("@CopyGivenBy", App.EsignedUser.UserName);
                        SqlParameter sp5 = new SqlParameter("@CopyReceivedDate", DateTime.Now);
                        SqlParameter sp6 = new SqlParameter("@IsSubjectReceivedCopy", 1);

                        sqlParams = new SqlParameter[] { sp1, sp2, sp4, sp5, sp6 };
                        _updateQuery = "update ScreeningPCF set CopyGivenBy=@CopyGivenBy,CopyReceivedDate=@CopyReceivedDate,IsSubjectReceivedCopy=@IsSubjectReceivedCopy where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        DbConn.ExecuteUpdateQuery(_updateQuery, sqlParams, false);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(DbConn, studyId, ValueOfKey, "ScreeningPCF", "pgvPCF", "PCFProceed", SubjectStatusCode.Status.Proceed, "", App.EsignedUser.UserName);
                        DbConn.CloseConnection();
                        HelperFunctions.ShowMessageBox("Marked as a copy of signed PCF has been given to subject.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        CheckIfPCFAllProcessCompleted(ValueOfKey);
                        CheckeSign(ValueOfKey);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "PCF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void DisableAllControlsAfterSubjectDropPCF()
        {

            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvConsent")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvConsentPCFVCF.Controls)
            {
                if (c.Name == "pgvPCF")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }
            }

        }
        //......
        // Section tfor scanning subject ID and make a desicion

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanPCF_TextChanged(object sender, EventArgs e)
        {
            ConsentTimer.Interval = (700);
            ConsentTimer.Enabled = true;
            ConsentTimer.Start();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ConsentTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                ConsentTimer.Stop();
                if (string.IsNullOrEmpty(txtScanPCF.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanPCF.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "PCF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanPCF.ResetText();
            }

        }
        private void CheckIfPCFAllProcessCompleted(string subjectKey)
        {
            try
            {
                btnPrintPCF.Enabled = false;
                // bool isPCFInitialized = OnScreeningHelper.IsPCFInitialized(subjectKey, studyId);               
                bool isPCFSignedBySubject = OnScreeningHelper.IsPCFSignedBySubject(subjectKey, studyId);
                //  if (isPCFInitialized)
                // {
                // btnPCFSubjectInitials.Enabled = false;
                if (isPCFSignedBySubject)
                {
                    btnPCFSubjectEsign.Enabled = false;
                    bool isPCFConsented = OnScreeningHelper.IsPCFConsentedByStaff(subjectKey, studyId);
                    if (isPCFConsented)
                    {
                        btneSignPCF.Enabled = false;
                        btnPrintPCF.Enabled = true;
                        if (OnScreeningHelper.IsSignedPCFCopyGivenToSubject(subjectKey, studyId))
                        {
                            btnSCPCFCopyToSubject.Enabled = false;
                            btnPrintPCF.Enabled = false;
                        }
                    }
                    else
                    {
                        btnPCFSubjectInitials.Enabled = false;
                        btneSignPCF.Enabled = true;
                        btnPCFSubjectEsign.Enabled = false;

                    }
                }
                else
                {
                    btnPCFSubjectInitials.Enabled = false;
                    btneSignPCF.Enabled = false;
                    btnPCFSubjectEsign.Enabled = true;

                }

                //  }
                //else
                //{
                //    btnPCFSubjectInitials.Enabled = true;
                //    btneSignPCF.Enabled = false;
                //    btnPCFSubjectEsign.Enabled = false;

                //}
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private string GetPCFConsentedBy(string subjectKey, string studyId)
        {
            string consentedByName = string.Empty;
            try
            {
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery("spGetScreeningPCFConsentedBy", prs, true);
                    if (dtSelect.Rows.Count > 0)
                    {
                        consentedByName = dtSelect.Rows[0]["FullName"].ToString();
                    }
                    if (string.IsNullOrEmpty(consentedByName))
                    {
                        consentedByName = App.EsignedUser.FullName;
                    }
                }
                return consentedByName;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void GetPCFSetupDocument(string subjectKey)
        {
            try
            {
                string eSignedby = App.EsignedUser.UserName;
                string icfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "Select * from SetupDocuments where StudyId=@StudyId  and DocumentType=@DocumentType";
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@DocumentType", "PCF");

                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);

                    if (dtSelect.Rows.Count > 0)
                    {
                        string subjectNo = OnScreeningHelper.GetTNumberBySubjectKey(subjectKey, studyId);
                        string subjectID = HelperFunctions.GetSubjectIDBySubjectKey(subjectKey);
                        string subjectName = HelperFunctions.GetSubjectNameBySubjectKey(subjectKey);
                        byte[] wordContent = (byte[])dtSelect.Rows[0]["Document"];
                        RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                        string _studyRNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
                        RadDocument _pcfHeaderDoc = PCMSWordDocHelper.CreatePCFVCFHeaderDoc(string.IsNullOrEmpty(_studyRNumber) ? studyId : _studyRNumber, subjectID, null);
                        RadDocument _icfSignDoc = PCMSWordDocHelper.CreatePCFVCFSignatureDoc(subjectName);
                        Dictionary<string, RadDocument> _docList = new Dictionary<string, RadDocument>();
                        _docList.Add("Content", docContent);
                        _docList.Add("Header", _pcfHeaderDoc);
                        _docList.Add("Signature", _icfSignDoc);
                        RadDocument mergedDoc = PCMSWordDocHelper.MergeDocs(_docList);
                        pcmsWordSCPCF.Document = mergedDoc;
                        pcmsWordSCPCF.IsReadOnly = true;
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("PCF document has not been set up.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void LoadPCFDocument(string subjectKey)
        {

            try
            {
                if (!IsStudyIDSelected() || string.IsNullOrEmpty(subjectKey))
                    return;
                if (!string.IsNullOrEmpty(tmpPCFFile))
                {
                    System.IO.File.Delete(tmpPCFFile);
                    tmpPCFFile = string.Empty;
                }
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                string eSignedby = App.EsignedUser.UserName;
                string pcfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "Select * from [dbo].[ScreeningPCF] where StudyId=@StudyId and SubjectKey=@SubjectKey";
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@SubjectKey", subjectKey);

                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    if (dtSelect.Rows.Count > 0)
                    {
                        DataTable dt = new DataTable();
                        SqlParameter[] sparams = new SqlParameter[] { p1, p2 };
                        dt = dbConn.ExecuteSelectQuery("spGetSCreeningPCFDocBySubject", sparams, true);
                        if (!string.IsNullOrEmpty(dtSelect.Rows[0]["PCFDoc"].ToString()))
                        {
                            byte[] wordContent = (byte[])dtSelect.Rows[0]["PCFDoc"];
                            pcfEsignedBy = dtSelect.Rows[0]["eSignedBy"].ToString();
                            RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                            pcmsWordSCPCF.Document = docContent;
                            pcmsWordSCPCF.IsReadOnly = true;
                        }
                        else
                        {
                            GetPCFSetupDocument(subjectKey);
                        }
                    }
                    else
                    {
                        GetPCFSetupDocument(subjectKey);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                if (pcmsWordSCPCF.Document != null)
                {
                    pcmsWordSCPCF.Document.CaretPosition.MoveToFirstPositionInDocument();
                }
                Utils.HideProgressMessage();
            }
        }


        private void btnPCFSubjectInitials_Click(object sender, EventArgs e)
        {
            try
            {
                DocomentSubjectEsign form = new DocomentSubjectEsign();
                form.StartPosition = FormStartPosition.CenterParent;
                form.Text = "Subject Initials";
                form.signType = "Initials";
                form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
                form.ShowDialog();
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load with initials
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    pcmsWordSCPCF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCPCF.Document;
                    if (_activeDoc == null)
                    {
                        HelperFunctions.ShowMessageBox("PCF Document not found.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "INITIALS", out _currentDateTime);
                    tmpPCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpPCFFile);
                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpPCFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectInitials", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@PCFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@InitializedBy", HelperFunctions.GetSubjectNameBySubjectKey(_subjectKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@InitializedDate", _currentDateTime);


                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6 };

                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningPCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);


                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningPCF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening PCF has been initialized successfully.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningPCF", sqlParams, true);
                        }

                        DbConn.CloseConnection();
                    }
                    LoadPCFDocument(ValueOfKey);
                    CheckeSign(_subjectKey.ToString());
                    CheckIfPCFAllProcessCompleted(_subjectKey.ToString());
                    btnPCFSubjectEsign_Click(null, null);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Utils.HideProgressMessage();
            }
        }

        private void btnPCFSubjectEsign_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsPCFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}
            DocomentSubjectEsign form = new DocomentSubjectEsign();
            form.StartPosition = FormStartPosition.CenterParent;
            form.Text = "Subject Signature";
            form.signType = "Signature";
            form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
            form.ShowDialog();
            try
            {
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load doc with subject signature
                    pcmsWordSCPCF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCPCF.Document;
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithSubSign = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "PCFSUBJECTSIGN", out _currentDateTime);
                    tmpPCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithSubSign, tmpPCFFile);
                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpPCFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectSign", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@PCFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@SubjectSignedBy", HelperFunctions.GetSubjectNameBySubjectKey(_subjectKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@SubjectSignedDate", _currentDateTime);
                    SqlParameter sp7 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                    SqlParameter sp8 = new SqlParameter("@eSignedDate", _currentDateTime);
                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningPCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningPCF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening PCF has been Signed by Subject successfully.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningPCF", sqlParams, true);
                        }

                        DbConn.CloseConnection();
                    }
                    LoadPCFDocument(_subjectKey.ToString());
                    CheckeSign(_subjectKey.ToString());
                    CheckIfPCFAllProcessCompleted(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Utils.HideProgressMessage();
            }
        }

        /// <summary>
        /// Save PCF to Database & Audit Trail
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignPCF_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsPCFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}

            if (!OnScreeningHelper.IsPCFSignedBySubject(_subjectKey.ToString(), studyId))
            {
                HelperFunctions.ShowMessageBox("Subject has not been done signature.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }

            try
            {
                tabName = "PCF";
                string reason = string.Format("This action will be Consented by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                SqlParameter[] sqlParams;
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                pcmsWordSCPCF.IsReadOnly = false;
                RadDocument _activeDoc = pcmsWordSCPCF.Document;
                if (_activeDoc == null)
                {
                    HelperFunctions.ShowMessageBox("PCF Document not found.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string consentedBy = GetICFConsentedBy(_subjectKey.ToString(), studyId);
                string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, consentedBy, "PCFCONSENTEDBY", out _currentDateTime);
                tmpPCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpPCFFile);
                byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpPCFFile);

                SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                SqlParameter sp3 = new SqlParameter("@PCFDoc", fileBytes);
                SqlParameter sp4 = new SqlParameter("@ConsentedBy", App.EsignedUser.UserName);
                SqlParameter sp5 = new SqlParameter("@ConsentedDate", _currentDateTime);
                SqlParameter sp6 = new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Proceed);
                // SqlParameter sp7 = new SqlParameter("@CordinatorComment", txtPCFCordinatorComment.Text);
                SqlParameter sp7 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                SqlParameter sp8 = new SqlParameter("@eSignedDate", _currentDateTime);


                sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningPCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };

                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);
                    DbConn.BeginTransaction();
                    if (dtSelect.Rows.Count > 0)
                    {
                        DbConn.ExecuteUpdateQuery("spUpdateScreeningPCF", sqlParams, true);
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(DbConn, studyId, _subjectKey.ToString(), "ScreeningPCF", pgvPCF.Name, "PCFProceed", SubjectStatusCode.Status.Proceed, "", App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(DbConn, studyId, _subjectKey, "OnScreeningPCF", SubjectStatusCode.Status.Proceed, string.Empty);
                        DbConn.CommitTransaction();
                        HelperFunctions.ShowMessageBox("Screening PCF has been Consented and e-signed successfully.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    //else
                    //{
                    //    HelperFunctions.ShowMessageBox("PCF has not been initialized yet.", "Screening PCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                    //    return;
                    //}

                    DbConn.CloseConnection();
                    LoadPCFDocument(_subjectKey.ToString());
                    CheckeSign(_subjectKey.ToString());
                    CheckIfPCFAllProcessCompleted(_subjectKey.ToString());
                    btnPrintPCF_Click(null, null);
                }

            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }

        }

        /// <summary>
        /// Print PCF
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPrintPCF_Click(object sender, EventArgs e)
        {
            try
            {
                pcmsWordSCPCF.Print(true);
                btnSCPCFCopyToSubject.Enabled = true;
                string detail = "PCF has been printed by :" + App.EsignedUser.UserName + " for subject " + ValueOfKey;
                App.EsignedUser.AddAudit(ModuleNames, EnumModules.AuditAction.Print.ToString(), detail, DateTime.Now, "", "");
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }

        /// <summary>
        ///  View PCF Document 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewPCF_Click(object sender, EventArgs e)
        {
            ViewDocument frmViewDoc = new ViewDocument();
            frmViewDoc.StudyID = studyId;
            frmViewDoc.DocType = SetupDocumentsHelper.PCF;
            frmViewDoc.StartPosition = FormStartPosition.CenterParent;
            frmViewDoc.ShowDialog();
        }
        #endregion ________ On Screening Consent(PCF)________

        //****************************** VCF******************************
        #region  On Screening Consent(VCF)
        private void btnSCVCFCopyToSubject_Click(object sender, EventArgs e)
        {
            try
            {
                string _updateQuery = "";
                if (!OnScreeningHelper.IsVCFSignedBySubject(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Subject has not been done signature.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!OnScreeningHelper.IsVCFConsentedByStaff(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Subject has not been consented by staff yet.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!OnScreeningHelper.IsVCFSigned(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("VCF has not been signed yet.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "VCF";
                string reason = string.Format("This action will be e-signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningVCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", ValueOfKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { sp1, sp2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                    if (dtSelect.Rows.Count > 0)
                    {
                        SqlParameter[] sqlParams;
                        SqlParameter sp4 = new SqlParameter("@CopyGivenBy", App.EsignedUser.UserName);
                        SqlParameter sp5 = new SqlParameter("@CopyReceivedDate", DateTime.Now);
                        SqlParameter sp6 = new SqlParameter("@IsSubjectReceivedCopy", 1);
                        sqlParams = new SqlParameter[] { sp1, sp2, sp4, sp5, sp6 };
                        _updateQuery = "update ScreeningVCF set CopyGivenBy=@CopyGivenBy,CopyReceivedDate=@CopyReceivedDate,IsSubjectReceivedCopy=@IsSubjectReceivedCopy where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        DbConn.ExecuteUpdateQuery(_updateQuery, sqlParams, false);
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(DbConn, studyId, ValueOfKey, "ScreeningVCF", pgvVCF.Name, "VCFProceed", SubjectStatusCode.Status.Proceed, "", App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(DbConn, studyId, _subjectKey, "OnScreeningVCF", SubjectStatusCode.Status.Proceed, string.Empty);
                        DbConn.CloseConnection();
                        HelperFunctions.ShowMessageBox("Marked as a copy of signed VCF has been given to subject.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        CheckIfVCFAllProcessCompleted(ValueOfKey);
                        CheckeSign(ValueOfKey);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "VCF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void DisableAllControlsAfterSubjectDropVCF()
        {

            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvConsent")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvConsentPCFVCF.Controls)
            {
                if (c.Name == "pgvVCF")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }
            }

        }
        private void VCFTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                VCFTimer.Stop();
                if (string.IsNullOrEmpty(txtScanVCF.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanVCF.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "VCF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanVCF.ResetText();
            }
        }
        private void txtScanVCF_TextChanged(object sender, EventArgs e)
        {
            VCFTimer.Interval = (700);
            VCFTimer.Enabled = true;
            VCFTimer.Start();
        }

        private void CheckIfVCFAllProcessCompleted(string subjectKey)
        {
            try
            {
                // bool isVCFInitialized = OnScreeningHelper.IsVCFInitialized(subjectKey, studyId);                
                bool isVCFSignedBySubject = OnScreeningHelper.IsVCFSignedBySubject(subjectKey, studyId);
                btnPrintVCF.Enabled = false;
                btnSCVCFCopyToSubject.Enabled = false;
                //if (!isVCFConsented && !isVCFSignedBySubject)
                //{
                //    btneSignVCF.Enabled = false;
                //    btnVCFSubjectEsign.Enabled = true;
                //    btnSCVCFInvEsign.Enabled = false;
                //    return;
                //}
                // if (isVCFInitialized)
                // {
                // btnVCFSubjectInitials.Enabled = false;
                if (isVCFSignedBySubject)
                {
                    btnVCFSubjectEsign.Enabled = false;
                    bool isVCFConsented = OnScreeningHelper.IsVCFConsentedByStaff(subjectKey, studyId);
                    if (isVCFConsented)
                    {
                        btneSignVCF.Enabled = false;
                        IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
                        if (IsVCFInvestigatorRequired)
                        {
                            bool isVCFInvestigated = OnScreeningHelper.IsVCFInvestigatorSigned(subjectKey, studyId);
                            if (isVCFInvestigated)
                            {
                                btnPrintVCF.Enabled = true;
                                btnSCVCFInvEsign.Enabled = false;
                                //btnSCVCFCopyToSubject.Enabled = true;
                                if (OnScreeningHelper.IsSignedVCFCopyGivenToSubject(subjectKey, studyId))
                                {
                                    btnSCVCFCopyToSubject.Enabled = false;
                                    btnPrintVCF.Enabled = false;
                                }
                            }
                            else
                            {
                                btnSCVCFInvEsign.Enabled = true;
                            }
                        }
                        else
                        {
                            btnPrintVCF.Enabled = true;
                            if (OnScreeningHelper.IsSignedVCFCopyGivenToSubject(subjectKey, studyId))
                            {
                                btnSCVCFCopyToSubject.Enabled = false;
                                btnPrintVCF.Enabled = false;
                            }
                        }
                    }
                    else
                    {
                        btneSignVCF.Enabled = true;
                    }
                }
                else
                {
                    btnVCFSubjectInitials.Enabled = false;
                    btneSignVCF.Enabled = false;
                    btnSCVCFInvEsign.Enabled = false;
                    btnVCFSubjectEsign.Enabled = true;

                }

                // }
                //else
                //{
                //    btnVCFSubjectInitials.Enabled = true;
                //    btneSignVCF.Enabled = false;
                //    btnVCFSubjectEsign.Enabled = false;

                //}
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private string GetVCFConsentedBy(string subjectKey, string studyId)
        {
            string consentedByName = string.Empty;
            try
            {
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery("spGetScreeningVCFConsentedBy", prs, true);
                    if (dtSelect.Rows.Count > 0)
                    {
                        consentedByName = dtSelect.Rows[0]["FullName"].ToString();
                    }
                    if (string.IsNullOrEmpty(consentedByName))
                    {
                        consentedByName = App.EsignedUser.FullName;
                    }
                }
                return consentedByName;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void GetVCFSetupDocument(string subjectKey)
        {
            try
            {
                string eSignedby = App.EsignedUser.UserName;
                string vcfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "Select * from SetupDocuments where StudyId=@StudyId  and DocumentType=@DocumentType";
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@DocumentType", "VCF".Trim());

                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    if (dtSelect.Rows.Count > 0)
                    {
                        string subjectNo = OnScreeningHelper.GetTNumberBySubjectKey(subjectKey, studyId);
                        string subjectID = HelperFunctions.GetSubjectIDBySubjectKey(subjectKey);
                        string subjectName = HelperFunctions.GetSubjectNameBySubjectKey(subjectKey);
                        IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
                        byte[] wordContent = (byte[])dtSelect.Rows[0]["Document"];
                        RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                        string _studyRNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
                        RadDocument _vcfHeaderDoc = PCMSWordDocHelper.CreatePCFVCFHeaderDoc(string.IsNullOrEmpty(_studyRNumber) ? studyId : _studyRNumber, subjectID, null);
                        RadDocument _vcfSignDoc = PCMSWordDocHelper.CreatePCFVCFSignatureDoc(subjectName, IsVCFInvestigatorRequired);
                        Dictionary<string, RadDocument> _docList = new Dictionary<string, RadDocument>();
                        _docList.Add("Content", docContent);
                        _docList.Add("Header", _vcfHeaderDoc);
                        _docList.Add("Signature", _vcfSignDoc);
                        RadDocument mergedDoc = PCMSWordDocHelper.MergeDocs(_docList);
                        pcmsWordSCVCF.Document = mergedDoc;
                        pcmsWordSCVCF.IsReadOnly = true;
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("VCF document has not been set up.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void LoadVCFDocument(string subjectKey)
        {
            try
            {
                if (!IsStudyIDSelected() || string.IsNullOrEmpty(subjectKey))
                    return;
                if (!string.IsNullOrEmpty(tmpVCFFile))
                {
                    if (System.IO.File.Exists(tmpVCFFile))
                        System.IO.File.Delete(tmpVCFFile);
                    tmpVCFFile = string.Empty;
                }
                Cursor = Cursors.WaitCursor;
                string eSignedby = App.EsignedUser.UserName;
                string vcfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "Select * from [dbo].[ScreeningVCF] where StudyId=@StudyId and SubjectKey=@SubjectKey";
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@SubjectKey", subjectKey);

                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    if (dtSelect.Rows.Count > 0)
                    {
                        //DataTable dt = new DataTable();
                        //SqlParameter[] sparams = new SqlParameter[] { p1, p2 };
                        //dt = dbConn.ExecuteSelectQuery("spGetScreeningVCFDocBySubject", sparams, true);
                        if (!string.IsNullOrEmpty(dtSelect.Rows[0]["VCFDoc"].ToString()))
                        {
                            byte[] wordContent = (byte[])dtSelect.Rows[0]["VCFDoc"];
                            vcfEsignedBy = dtSelect.Rows[0]["eSignedBy"].ToString();
                            RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                            pcmsWordSCVCF.Document = docContent;
                            pcmsWordSCVCF.IsReadOnly = true;
                        }
                        else
                        {
                            GetVCFSetupDocument(subjectKey);
                        }
                    }
                    else
                    {
                        GetVCFSetupDocument(subjectKey);
                    }

                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void btnVCFSubjectInitials_Click(object sender, EventArgs e)
        {
            try
            {
                DocomentSubjectEsign form = new DocomentSubjectEsign();
                form.StartPosition = FormStartPosition.CenterParent;
                form.Text = "Subject Initials";
                form.signType = "Initials";
                form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
                form.ShowDialog();
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load with initials
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    pcmsWordSCVCF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCVCF.Document;
                    if (_activeDoc == null)
                    {
                        HelperFunctions.ShowMessageBox("VCF Document not found.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "INITIALS", out _currentDateTime);
                    tmpVCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpVCFFile);

                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpVCFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectInitials", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@VCFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@InitializedBy", HelperFunctions.GetSubjectNameBySubjectKey(_subjectKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@InitializedDate", _currentDateTime);


                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6 };

                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningVCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);


                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningVCF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening VCF has been initialized successfully.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningVCF", sqlParams, true);
                        }

                        DbConn.CloseConnection();
                    }

                    //LoadVCFDocument(ValueOfKey);
                    //CheckeSign(_subjectKey.ToString());
                    LoadDataBySelectedTab();
                    //CheckIfVCFAllProcessCompleted(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }
        }

        private void btnVCFSubjectEsign_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsVCFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}
            if (!ValidateCommonScreeningRequiredFields())
                return;
            DocomentSubjectEsign form = new DocomentSubjectEsign();
            form.StartPosition = FormStartPosition.CenterParent;
            form.Text = "Subject Signature";
            form.signType = "Signature";
            form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
            form.ShowDialog();
            try
            {
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load doc with subject signature
                    pcmsWordSCVCF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCVCF.Document;
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithSubSign = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "VCFSUBJECTSIGN", out _currentDateTime);
                    tmpVCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithSubSign, tmpVCFFile);
                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpVCFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", ValueOfKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectSign", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@VCFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@SubjectSignedBy", HelperFunctions.GetSubjectNameBySubjectKey(ValueOfKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@SubjectSignedDate", Convert.ToDateTime(_currentDateTime));
                    SqlParameter sp7 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                    SqlParameter sp8 = new SqlParameter("@eSignedDate", Convert.ToDateTime(_currentDateTime));

                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningVCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", ValueOfKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningVCF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening VCF has been Signed by Subject successfully.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningVCF", sqlParams, true);
                        }
                        //else
                        //{
                        //    HelperFunctions.ShowMessageBox("VCF has not been initialized yet.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        //    return;
                        //}

                        DbConn.CloseConnection();
                    }
                    //LoadVCFDocument(ValueOfKey);
                    //CheckeSign(ValueOfKey);
                    //CheckIfVCFAllProcessCompleted(ValueOfKey);
                    LoadDataBySelectedTab();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }
        }

        /// <summary>
        /// Save VCF to Database & Audit Trail
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignVCF_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsVCFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}
            if (!ValidateCommonScreeningRequiredFields())
                return;
            if (!OnScreeningHelper.IsVCFSignedBySubject(ValueOfKey.ToString(), studyId))
            {
                HelperFunctions.ShowMessageBox("Subject has not been done signature.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }
            if (OnScreeningHelper.IsVCFConsentedByStaff(ValueOfKey.ToString(), studyId))
            {
                HelperFunctions.ShowMessageBox("VCF has been already signed by consent staff.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }

            try
            {
                tabName = "VCF";
                string reason = string.Format("This action will be Consented by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }

                SqlParameter[] sqlParams;
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                pcmsWordSCVCF.IsReadOnly = false;
                RadDocument _activeDoc = pcmsWordSCVCF.Document;
                if (_activeDoc == null)
                {
                    HelperFunctions.ShowMessageBox("VCF Document not found.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string consentedBy = GetICFConsentedBy(_subjectKey.ToString(), studyId);
                string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, consentedBy, "VCFCONSENTEDBY", out _currentDateTime);
                tmpVCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpVCFFile);
                byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpVCFFile);

                SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                SqlParameter sp3 = new SqlParameter("@VCFDoc", fileBytes);
                SqlParameter sp4 = new SqlParameter("@ConsentedBy", App.EsignedUser.UserName);
                SqlParameter sp5 = new SqlParameter("@ConsentedDate", Convert.ToDateTime(_currentDateTime));
                SqlParameter sp6 = new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Proceed);
                //  SqlParameter sp7 = new SqlParameter("@CordinatorComment", txtVCFCordinatorComment.Text);
                SqlParameter sp7 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                SqlParameter sp8 = new SqlParameter("@eSignedDate", Convert.ToDateTime(_currentDateTime));


                sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningVCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };

                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);
                    DbConn.BeginTransaction();
                    if (dtSelect.Rows.Count > 0)
                    {
                        DbConn.ExecuteUpdateQuery("spUpdateScreeningVCF", sqlParams, true);
                        DbConn.CommitTransaction();
                        HelperFunctions.ShowMessageBox("Screening VCF has been Consented and e-signed successfully.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    DbConn.CloseConnection();
                    LoadDataBySelectedTab();
                    //LoadVCFDocument(_subjectKey.ToString());
                    //CheckeSign(_subjectKey.ToString());
                    //CheckIfVCFAllProcessCompleted(_subjectKey.ToString());
                    IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
                    if (!IsVCFInvestigatorRequired)
                        btnPrintVCF_Click(null, null);
                }

            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }
        }

        /// <summary>
        /// Print VCF
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPrintVCF_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                pcmsWordSCVCF.Print(true);
                btnSCVCFCopyToSubject.Enabled = true;
                string detail = "VCF has been printed by :" + App.EsignedUser.UserName + " for subject " + ValueOfKey;
                App.EsignedUser.AddAudit(ModuleNames, EnumModules.AuditAction.Print.ToString(), detail, DateTime.Now, "", "");
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        /// <summary>
        /// View VCF Document
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewVCF_Click(object sender, EventArgs e)
        {
            ViewDocument frmViewDoc = new ViewDocument();
            frmViewDoc.StudyID = studyId;
            frmViewDoc.DocType = SetupDocumentsHelper.VCF;
            frmViewDoc.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            frmViewDoc.ShowDialog();
        }

        #endregion   ________ On Screening Consent(VCF)________
        #endregion

        //****************************** ICF ******************************
        #region    ICF
        private void DisableAllControlsAfterSubjectDropICF()
        {

            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvICF")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }


        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanICF_TextChanged(object sender, EventArgs e)
        {
            ICFTimer.Interval = (700);
            ICFTimer.Enabled = true;
            ICFTimer.Start();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ICFTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                ICFTimer.Stop();
                if (string.IsNullOrEmpty(txtScanICF.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanICF.Text);
                if (string.IsNullOrEmpty(txtScanICF.Text.Trim()))
                    return;
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "ICF", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ICF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanICF.ResetText();
            }

        }

        private void CheckIfICFAllProcessCompleted(string subjectKey)
        {
            try
            {
                bool isICFInitialized = true;// OnScreeningHelper.IsICFInitialized(subjectKey, studyId);
                bool isICFConsented = OnScreeningHelper.IsICFConsentedByStaff(subjectKey, studyId);

                btnICFPrint.Enabled = false;
                //if (!isICFInitialized && !isICFConsented && !isICFSignedBySubject && !isICFInvestigated)
                //{
                //    btneSignICF.Enabled = false;
                //    btnICFSubjectInitials.Visible = true;
                //    btnICFSubjectEsign.Enabled = false;
                //    btnInverstigatorSignICF.Enabled = false;
                //    return;
                //}
                if (isICFInitialized)
                {
                    btnICFSubjectInitials.Enabled = false;
                    if (isICFConsented)
                    {
                        btneSignICF.Enabled = false;
                        bool isICFSignedBySubject = OnScreeningHelper.IsICFSignedBySubject(subjectKey, studyId);

                        if (isICFSignedBySubject)
                        {
                            btnICFSubjectEsign.Enabled = false;
                            bool isICFInvestigated = OnScreeningHelper.IsICFInvestigatedByDoctor(subjectKey, studyId);
                            // .... Added (11/9/2017)
                            if (isICFInvestigated)
                            {
                                btnInverstigatorSignICF.Enabled = false;
                                btnICFPrint.Enabled = true;
                            }
                            else
                            {
                                btnICFSubjectEsign.Enabled = false;
                                btnInverstigatorSignICF.Enabled = true;
                            }

                        }
                        else
                        {
                            btnICFSubjectEsign.Enabled = true;
                            btnInverstigatorSignICF.Enabled = false;

                        }
                    }
                    else
                    {
                        btneSignICF.Enabled = true;
                        btnICFSubjectEsign.Enabled = false;
                        btnInverstigatorSignICF.Enabled = false;
                    }
                }
                else
                {
                    btnICFSubjectInitials.Enabled = true;
                    btneSignICF.Enabled = false;
                    btnICFSubjectEsign.Enabled = false;
                    btnInverstigatorSignICF.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private string GetICFConsentedBy(string subjectKey, string studyId)
        {
            string consentedByName = string.Empty;
            try
            {
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery("spGetScreeningICFConsentedBy", prs, true);
                    if (dtSelect.Rows.Count > 0)
                    {
                        consentedByName = dtSelect.Rows[0]["FullName"].ToString();
                    }
                    if (string.IsNullOrEmpty(consentedByName))
                    {
                        consentedByName = App.EsignedUser.FullName;
                    }
                }
                return consentedByName;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private string GetICFInvestigatedBy(string subjectKey, string studyId)
        {
            string investigatedByName = string.Empty;
            try
            {
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery("spGetScreeningICFInvestigatedBy", prs, true);
                    if (dtSelect.Rows.Count > 0)
                    {
                        investigatedByName = dtSelect.Rows[0]["FullName"].ToString();
                    }
                }
                return investigatedByName;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void GetICFSetupDocument(string subjectKey)
        {
            try
            {
                int period = 1;
                string eSignedby = App.EsignedUser.UserName;
                string icfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "Select * from SetupDocuments where StudyId=@StudyId and Period='" + period + "' and DocumentType=@DocumentType";
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@DocumentType", "ICF".Trim());

                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    if (dtSelect.Rows.Count > 0)
                    {
                        string subjectNo = OnScreeningHelper.GetTNumberBySubjectKey(subjectKey, studyId);
                        string subjectID = HelperFunctions.GetSubjectIDBySubjectKey(subjectKey);
                        string subjectName = HelperFunctions.GetSubjectNameBySubjectKey(subjectKey);

                        byte[] wordContent = (byte[])dtSelect.Rows[0]["Document"];
                        RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                        string _studyRNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
                        RadDocument _icfHeaderDoc = PCMSWordDocHelper.CreateICFHeaderDoc(string.IsNullOrEmpty(_studyRNumber) ? studyId : _studyRNumber, subjectID, subjectNo);
                        RadDocument _icfSignDoc = PCMSWordDocHelper.CreateICFSignatureDoc(subjectName, "SCREENING");
                        Dictionary<string, RadDocument> _docList = new Dictionary<string, RadDocument>();
                        _docList.Add("Content", docContent);
                        _docList.Add("Header", _icfHeaderDoc);
                        _docList.Add("Signature", _icfSignDoc);
                        RadDocument mergedDoc = PCMSWordDocHelper.MergeDocs(_docList);
                        pcmsWordSCICF.Document = mergedDoc;
                        pcmsWordSCICF.IsReadOnly = true;
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("ICF document has not been set up.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void LoadICFDocument(string subjectKey)
        {
            try
            {
                if (!string.IsNullOrEmpty(tmpICFFile))
                {
                    System.IO.File.Delete(tmpICFFile);
                    tmpICFFile = string.Empty;
                }
                Utils.ShowProgressMessage("Please Wait, Loading Data...");

                string eSignedby = App.EsignedUser.UserName;
                string icfEsignedBy = string.Empty;
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    SqlParameter p1 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p2 = new SqlParameter("@SubjectKey", subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery("spGetScreeningICFDocBySubject", sps, true);
                    if (dtSelect.Rows.Count > 0)
                    {
                        if (!string.IsNullOrEmpty(dtSelect.Rows[0]["ICFDoc"].ToString()))
                        {
                            byte[] wordContent = (byte[])dtSelect.Rows[0]["ICFDoc"];
                            icfEsignedBy = dtSelect.Rows[0]["eSignedBy"].ToString();
                            RadDocument docContent = PCMSWordDocHelper.ImportToRadDoc(wordContent);
                            pcmsWordSCICF.Document = docContent;
                            pcmsWordSCICF.IsReadOnly = true;
                        }
                        else
                        {
                            GetICFSetupDocument(subjectKey);
                        }
                    }
                    else
                    {
                        GetICFSetupDocument(subjectKey);
                    }


                }
                Utils.HideProgressMessage();

                //.......... Lock/Unlock...........
                // ToggleLockUnlockButtonText();
                // LockUnlockControls();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        private void btnICFSubjectInitials_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                DocomentSubjectEsign form = new DocomentSubjectEsign();
                form.StartPosition = FormStartPosition.CenterParent;
                form.Text = "Subject Signature";
                form.signType = "Signature";
                form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
                form.ShowDialog();
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load with initials
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    pcmsWordSCICF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCICF.Document;
                    if (_activeDoc == null)
                    {
                        HelperFunctions.ShowMessageBox("ICF Document not found.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "INITIALS", out _currentDateTime);
                    tmpICFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpICFFile);
                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpICFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectInitials", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@ICFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@InitializedBy", HelperFunctions.GetSubjectNameBySubjectKey(_subjectKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@InitializedDate", Convert.ToDateTime(_currentDateTime));


                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6 };

                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningICF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);


                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningICF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening ICF has been signed successfully.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningICF", sqlParams, true);
                        }

                        DbConn.CloseConnection();
                    }

                    LoadICFDocument(ValueOfKey);
                    CheckeSign(_subjectKey.ToString());
                    CheckIfICFAllProcessCompleted(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }
        }

        private void btnICFSubjectEsign_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsICFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}
            DocomentSubjectEsign form = new DocomentSubjectEsign();
            form.StartPosition = FormStartPosition.CenterParent;
            form.Text = "Subject Signature";
            form.signType = "Signature";
            form.SubjectStatement = "I confirm that all medical information I have provided is accurate, and I am aware that providing inaccurate information may be harmful to my health and may affect my participation in this study. I confirm that I have been given sufficient time to consider all of the information given to me and to ask questions. In addition, I confirm that, to the best of my knowledge and belief, all technical language used by the research team has been explained and that I have received satisfactory answers to all questions that I asked. I have read and, to the best of my knowledge and belief, understand this consent form and I voluntarily agree to participate in this research trial. I am aware that I will receive a copy of this signed and dated consent form.";
            form.ShowDialog();
            try
            {
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                if (form.ESign != null && form.SignDone)
                {
                    //Save and load doc with subject signature
                    pcmsWordSCICF.IsReadOnly = false;
                    RadDocument _activeDoc = pcmsWordSCICF.Document;
                    string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                    RadDocument _docWithSubSign = PCMSWordDocHelper.AppendNewContent(_activeDoc, form.ESign, "SUBJECTSIGN", out _currentDateTime);
                    tmpICFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                    PCMSWordDocHelper.SaveAsDocx(_docWithSubSign, tmpICFFile);
                    byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpICFFile);

                    SqlParameter[] sqlParams;
                    SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter sp3 = new SqlParameter("@SubjectSign", HelperFunctions.ConvertImageToByteArray(form.ESign));
                    SqlParameter sp4 = new SqlParameter("@ICFDoc", fileBytes);
                    SqlParameter sp5 = new SqlParameter("@SubjectSignedBy", HelperFunctions.GetSubjectNameBySubjectKey(_subjectKey.ToString()));
                    SqlParameter sp6 = new SqlParameter("@SubjectSignedDate", Convert.ToDateTime(_currentDateTime));

                    sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6 };
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        string selectQuery = "select 1 from [dbo].[ScreeningICF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                        SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                        SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                        SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                        DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);

                        if (dtSelect.Rows.Count > 0)
                        {
                            DbConn.ExecuteUpdateQuery("spUpdateScreeningICF", sqlParams, true);
                            HelperFunctions.ShowMessageBox("Screening ICF has been Signed by Subject successfully.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        }
                        else
                        {
                            DbConn.ExecuteInsertQuery("spInsertScreeningICF", sqlParams, true);
                        }
                        //else
                        //{
                        //    HelperFunctions.ShowMessageBox("ICF has not been initialized yet.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Info);
                        //    return;
                        //}

                        DbConn.CloseConnection();
                    }
                    LoadICFDocument(_subjectKey.ToString());
                    CheckeSign(_subjectKey.ToString());
                    CheckIfICFAllProcessCompleted(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }
        }
        /// <summary>
        /// Save ICF to Database & Audit Trail
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignICF_Click(object sender, EventArgs e)
        {

            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if (!OnScreeningHelper.IsICFInitialized(_subjectKey.ToString(), studyId))
                //{
                //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                //    return;
                //}                
                tabName = "ICF";
                string reason = string.Format("This action will be Investigated by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }

                SqlParameter[] sqlParams;
                Utils.ShowProgressMessage("Please Wait, Loading Data...");
                //Save and load doc with consented by name
                pcmsWordSCICF.IsReadOnly = false;
                RadDocument _activeDoc = pcmsWordSCICF.Document;
                if (_activeDoc == null)
                {
                    HelperFunctions.ShowMessageBox("ICF Document not found.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string consentedBy = GetICFConsentedBy(_subjectKey.ToString(), studyId);
                string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                RadDocument _docConsent = PCMSWordDocHelper.AppendNewContent(_activeDoc, consentedBy, "CONSENTEDBY", out _currentDateTime); //SCCONSENTEDBY
                tmpICFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                PCMSWordDocHelper.SaveAsDocx(_docConsent, tmpICFFile);
                byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpICFFile);

                SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                SqlParameter sp3 = new SqlParameter("@ICFDoc", fileBytes);
                SqlParameter sp4 = new SqlParameter("@ConsentedBy", App.EsignedUser.UserName);
                SqlParameter sp5 = new SqlParameter("@ConsentedDate", Convert.ToDateTime(_currentDateTime));

                sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5 };
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningICF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };
                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);
                    DbConn.BeginTransaction();
                    if (dtSelect.Rows.Count > 0)
                    {
                        DbConn.ExecuteUpdateQuery("spUpdateScreeningICF", sqlParams, true);
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(DbConn, studyId, _subjectKey.ToString(), "ScreeningICF", pgvICF.Name, "ICFProceed", SubjectStatusCode.Status.Proceed, "", App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(DbConn, studyId, _subjectKey, "OnScreeningICF", SubjectStatusCode.Status.Proceed, string.Empty);
                        DbConn.CommitTransaction();
                    }
                    else
                    {
                        DbConn.ExecuteInsertQuery("spInsertScreeningICF", sqlParams, true);
                        DbConn.CommitTransaction();
                    }
                    HelperFunctions.ShowMessageBox("Screening ICF has been consented successfully.", "Screening ICF", MessageBoxButtons.OK, RadMessageIcon.Info);
                    DbConn.CloseConnection();
                    LoadICFDocument(_subjectKey.ToString());
                    CheckeSign(_subjectKey.ToString());
                    CheckIfICFAllProcessCompleted(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                //CommonHelpers.DeleteTemporaryWordFiles(null);
                Utils.HideProgressMessage();
            }


        }

        /// <summary>
        ///  Print ICF
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnICFPrint_Click(object sender, EventArgs e)
        {
            try
            {
                pcmsWordSCICF.Print(true);
                string detail = "ICF has been printed by " + App.EsignedUser.UserName;
                App.EsignedUser.AddAudit(ModuleNames, EnumModules.AuditAction.Print.ToString(), detail, DateTime.Now, "", "");
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "ICF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }

        /// <summary>
        /// View ICF Document
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewICF_Click(object sender, EventArgs e)
        {
            ViewDocument frmViewDoc = new ViewDocument();
            frmViewDoc.StudyID = studyId;
            frmViewDoc.DocType = SetupDocumentsHelper.ICF;
            frmViewDoc.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            frmViewDoc.ShowDialog();

        }
        #endregion ________ On Screening ICF________

        //****************************** Medical Interview ******************************
        #region  Medical Interview 
        //****************************** Demographic ******************************
        #region  Demographic
        private void ddCountryofOrigin_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddCountryofOrigin.Text.Trim().Equals("Other"))
            {
                txtDMOtherAsian.Enabled = true;
                txtDMOtherAsian.ReadOnly = false;
                txtDMOtherAsian.Clear();
                txtDMOtherAsian.Focus();
            }
            else
            {
                txtDMOtherAsian.Enabled = false;
                txtDMOtherAsian.ReadOnly = true;
            }
        }
        private void EnableCheckBoxes()
        {
            var RaceCheckBoxes = new RadCheckBox[] { cbWhite, cbBlack, cbAsian, cbAmericanIndian, cbNativeHawaiian, cbMultiRace };
            var EthincityCheckBoxes = new RadCheckBox[] { cbNoHispanic, cbYesHispanic, cbNotHispanic, cbUnkown };
            foreach (var chk in RaceCheckBoxes)
            {
                chk.Enabled = true;
            }
            foreach (var chk in EthincityCheckBoxes)
            {
                chk.Enabled = true;
            }
        }
        // ........... Drop ..........
        private void DisableAllControlsAfterSubjectDropDemographics()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvMedicalInterview")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvMedicalInterviews.Controls)
            {
                if (c.Name == "pgvDemographics")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }

        }
        //...................... Race..........................
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbWhite_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbMultiRace.Checked && cbWhite.Checked)
            {
                cbWhite.Checked = true;
                cbMultiRace_CheckStateChanged(null, null);
            }
            else if (cbWhite.Checked)
            {

                cbBlack.Checked = false;
                cbAmericanIndian.Checked = false;
                cbNativeHawaiian.Checked = false;
                cbAsian.Checked = false;
                cbWhite.Checked = true;
                cbMultiRace.Checked = false;

                //..............................
                txtMultiRace.Enabled = false;
                cbWhite.Enabled = false;
                cbBlack.Enabled = true;
                cbAmericanIndian.Enabled = true;
                cbNativeHawaiian.Enabled = true;
                cbAsian.Enabled = true;
                cbMultiRace.Enabled = true;
                ddCountryofOrigin.SelectedIndex = -1;
            }
            else
            {
                cbMultiRace_CheckStateChanged(null, null);
            }
        }
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbBlack_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbMultiRace.Checked && cbBlack.Checked)
            {
                cbBlack.Checked = true;

                cbMultiRace_CheckStateChanged(null, null);
            }
            else if (cbBlack.Checked)
            {
                cbAmericanIndian.Checked = false;
                cbNativeHawaiian.Checked = false;
                cbAsian.Checked = false;
                cbWhite.Checked = false;
                cbBlack.Checked = true;
                cbMultiRace.Checked = false;
                //..............................
                txtMultiRace.Enabled = false;
                cbWhite.Enabled = true;
                cbBlack.Enabled = false;
                cbAmericanIndian.Enabled = true;
                cbNativeHawaiian.Enabled = true;
                cbAsian.Enabled = true;
                cbMultiRace.Enabled = true;
                ddCountryofOrigin.SelectedIndex = -1;
            }
            else
            {
                cbMultiRace_CheckStateChanged(null, null);
            }
        }
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbAmericanIndian_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbMultiRace.Checked && cbAmericanIndian.Checked)
            {
                cbAmericanIndian.Checked = true;

                cbMultiRace_CheckStateChanged(null, null);
            }
            else if (cbAmericanIndian.Checked)
            {
                cbBlack.Checked = false;
                cbNativeHawaiian.Checked = false;
                cbAsian.Checked = false;
                cbWhite.Checked = false;
                cbAmericanIndian.Checked = true;
                cbMultiRace.Checked = false;
                //..............................
                txtMultiRace.Enabled = false;
                cbWhite.Enabled = true;
                cbBlack.Enabled = true;
                cbAmericanIndian.Enabled = false;
                cbNativeHawaiian.Enabled = true;
                cbAsian.Enabled = true;
                cbMultiRace.Enabled = true;
                ddCountryofOrigin.SelectedIndex = -1;
            }
            else
            {
                cbMultiRace_CheckStateChanged(null, null);
            }
            //if (cbAmericanIndian.Checked)
            //{
            //    cbWhite.Checked = false;
            //    cbBlack.Checked = false;
            //    cbAmericanIndian.Checked = true;
            //    cbAsian.Checked = false;
            //    cbNativeHawaiian.Checked = false;
            //    cbMultiRace.Checked = false;
            //    ddCountryofOrigin.Enabled = false;
            //    txtMultiRace.Enabled = false;
            //}
        }
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNativeHawaiian_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbMultiRace.Checked && cbNativeHawaiian.Checked)
            {
                cbNativeHawaiian.Checked = true;

                cbMultiRace_CheckStateChanged(null, null);
            }
            else if (cbNativeHawaiian.Checked)
            {

                cbBlack.Checked = false;
                cbAmericanIndian.Checked = false;
                cbAsian.Checked = false;
                cbWhite.Checked = false;
                cbNativeHawaiian.Checked = true;
                cbMultiRace.Checked = false;
                //..............................
                txtMultiRace.Enabled = false;
                cbWhite.Enabled = true;
                cbBlack.Enabled = true;
                cbAmericanIndian.Enabled = true;
                cbNativeHawaiian.Enabled = false;
                cbAsian.Enabled = true;
                cbMultiRace.Enabled = true;
                ddCountryofOrigin.SelectedIndex = -1;
            }
            else
            {
                cbMultiRace_CheckStateChanged(null, null);
            }
            //if (cbNativeHawaiian.Checked)
            //{
            //    cbWhite.Checked = false;
            //    cbBlack.Checked = false;
            //    cbAmericanIndian.Checked = false;
            //    cbAsian.Checked = false;
            //    cbNativeHawaiian.Checked = true;
            //    cbMultiRace.Checked = false;
            //    ddCountryofOrigin.Enabled = false;
            //    txtMultiRace.Enabled = true;
            //}
        }
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbAsian_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbMultiRace.Checked && cbAsian.Checked)
            {
                cbAsian.Checked = true;
                ddCountryofOrigin.Enabled = true;
                cbMultiRace_CheckStateChanged(null, null);
            }
            else if (cbAsian.Checked)
            {
                ddCountryofOrigin.Enabled = true;
                cbBlack.Checked = false;
                cbAmericanIndian.Checked = false;
                cbNativeHawaiian.Checked = false;
                cbWhite.Checked = false;
                cbAsian.Checked = true;
                cbMultiRace.Checked = false;
                //..............................
                txtMultiRace.Enabled = false;
                cbWhite.Enabled = true;
                cbBlack.Enabled = true;
                cbAmericanIndian.Enabled = true;
                cbNativeHawaiian.Enabled = true;
                cbAsian.Enabled = false;
                cbMultiRace.Enabled = true;
            }
            else
            {
                cbMultiRace_CheckStateChanged(null, null);
                ddCountryofOrigin.Enabled = false;
            }
        }
        /// <summary>
        /// Toggle , Race 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbMultiRace_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbMultiRace.Checked)
            {
                RaceCheckBoxes = new RadCheckBox[] { cbWhite, cbBlack, cbAmericanIndian, cbNativeHawaiian, cbAsian };
                RaceChecked = new List<string>();
                _Race = string.Empty;
                txtMultiRace.Enabled = true;
                txtMultiRace.ReadOnly = true;

                cbMultiRace.Checked = true;

                cbWhite.Enabled = true;
                cbBlack.Enabled = true;
                cbAmericanIndian.Enabled = true;
                cbNativeHawaiian.Enabled = true;
                cbAsian.Enabled = true;


                foreach (RadCheckBox checkedBox in RaceCheckBoxes)
                {
                    if (checkedBox.Checked)
                    {
                        RaceChecked.Add(checkedBox.Tag.ToString());
                    }
                }
                string checkedText = String.Join(", ", RaceChecked);
                _Race = checkedText;

                txtMultiRace.Text = _Race;
            }
            else
            {
                txtMultiRace.Clear();
                ddCountryofOrigin.SelectedIndex = -1;
                cbWhite.Checked = false;

                cbBlack.Checked = false;

                cbAmericanIndian.Checked = false;

                cbNativeHawaiian.Checked = false;

                cbAsian.Checked = false;

            }
            //if (cbMultiRace.Checked)
            //{
            //    cbWhite.Checked = false;
            //    cbBlack.Checked = false;
            //    cbAmericanIndian.Checked = false;
            //    cbAsian.Checked = false;
            //    cbMultiRace.Checked = true;

            //    cbNativeHawaiian.Checked = false;
            //    ddCountryofOrigin.Enabled = false;
            //    txtMultiRace.Enabled = true;
            //}
        }

        // ...... Ethincity......
        /// <summary>
        /// Toggle , Ethincity 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoHispanic_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoHispanic.Checked)
            {
                cbNoHispanic.Checked = true;
                cbYesHispanic.Checked = false;
                cbNotHispanic.Checked = false;
                cbUnkown.Checked = false;
                cbNoHispanic.Enabled = false;
                cbYesHispanic.Enabled = true;
                cbNotHispanic.Enabled = true;
                cbUnkown.Enabled = true;
            }
        }
        /// <summary>
        /// Toggle , Ethincity 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesHispanic_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesHispanic.Checked)
            {
                cbNoHispanic.Checked = false;
                cbYesHispanic.Checked = true;
                cbNotHispanic.Checked = false;
                cbUnkown.Checked = false;
                //........................
                cbNoHispanic.Enabled = true;
                cbYesHispanic.Enabled = false;
                cbNotHispanic.Enabled = true;
                cbUnkown.Enabled = true;
            }
        }
        /// <summary>
        /// Toggle , Ethincity 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNotHispanic_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNotHispanic.Checked)
            {
                cbNoHispanic.Checked = false;
                cbYesHispanic.Checked = false;
                cbNotHispanic.Checked = true;
                cbUnkown.Checked = false;
                //........................
                cbNoHispanic.Enabled = true;
                cbYesHispanic.Enabled = true;
                cbNotHispanic.Enabled = false;
                cbUnkown.Enabled = true;
            }
        }
        /// <summary>
        /// Toggle , Ethincity 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbUnkown_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbUnkown.Checked)
            {
                cbNoHispanic.Checked = false;
                cbYesHispanic.Checked = false;
                cbNotHispanic.Checked = false;
                cbUnkown.Checked = true;
                //........................
                cbNoHispanic.Enabled = true;
                cbYesHispanic.Enabled = true;
                cbNotHispanic.Enabled = true;
                cbUnkown.Enabled = false;
            }
        }


        /// <summary>
        /// E-Sign Race/Race/Ethincity
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnESignRace_Click(object sender, EventArgs e)
        {

            if (!ValidateCommonScreeningRequiredFields())
                return;
            var RaceCheckBoxes = new RadCheckBox[] { cbWhite, cbBlack, cbAsian, cbAmericanIndian, cbNativeHawaiian, cbMultiRace };
            var EthincityCheckBoxes = new RadCheckBox[] { cbNoHispanic, cbYesHispanic, cbNotHispanic, cbUnkown };
            bool RaceSelected = RaceCheckBoxes.Any(x => x.Checked == true);
            bool EthincitySelected = EthincityCheckBoxes.Any(y => y.Checked == true);
            if (cbMultiRace.Checked)
            {
                if (string.IsNullOrEmpty(txtMultiRace.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please select races for multi-race.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtMultiRace.Focus();
                    return;
                }
            }
            if (!RaceSelected || !EthincitySelected)
            {
                string msg = "***At least One CheckBox has to be checked for:***" + Environment.NewLine + "1-Race" + Environment.NewLine + "2-Ethincity";
                HelperFunctions.ShowMessageBox(msg, "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }
            if (cbAsian.Checked)
            {
                if (string.IsNullOrEmpty(ddCountryofOrigin.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please select origin country.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    ddCountryofOrigin.Focus();
                    return;
                }
                if (ddCountryofOrigin.Text.Trim().Equals("Other") && string.IsNullOrEmpty(txtDMOtherAsian.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please specify other asian origin country.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtDMOtherAsian.Focus();
                    return;
                }
            }

            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //  string race = string.Empty;
            int codeRace = default(int);
            int ethnicty = default(int);
            string specify = string.Empty;
            //..... Race.....
            if (cbWhite.Checked)
            {
                _Race = cbWhite.Text;
                codeRace = 1;
                specify = string.Empty;
            }
            if (cbBlack.Checked)
            {
                _Race = cbBlack.Text;
                codeRace = 2;
                specify = string.Empty;
            }
            if (cbAmericanIndian.Checked)
            {
                _Race = cbAmericanIndian.Text;
                codeRace = 3;
                specify = string.Empty;
            }
            if (cbNativeHawaiian.Checked)
            {
                _Race = cbAmericanIndian.Text;
                codeRace = 4;
                specify = string.Empty;
            }
            if (cbAsian.Checked)
            {
                _Race = cbAsian.Text.Split(new char[] { '(', ')' })[0];
                codeRace = 5;
                if (ddCountryofOrigin.SelectedIndex > -1)
                {
                    specify = ddCountryofOrigin.SelectedItem.Text;
                }
                else
                {
                    specify = string.Empty;
                }
            }
            if (cbMultiRace.Checked)
            {
                //_Race = cbMultiRace.Text;
                _Race = txtMultiRace.Text.Trim();
                codeRace = 6;
                if (cbAsian.Checked && ddCountryofOrigin.SelectedIndex > -1)
                {
                    if (ddCountryofOrigin.Text.Trim().Equals("Other"))
                        specify = ddCountryofOrigin.Text.Trim() + "|" + txtDMOtherAsian.Text.Trim();
                    else
                        specify = ddCountryofOrigin.Text.Trim();
                    // specify = txtMultiRace.Text + "," + ddCountryofOrigin.SelectedItem.Text;
                }
                else
                    specify = string.Empty;
                // specify = txtMultiRace.Text;
            }


            //.....Ethincity.......
            if (cbNoHispanic.Checked)
            {

                ethnicty = 1;
            }
            else if (cbYesHispanic.Checked)
            {

                ethnicty = 2;
            }
            else if (cbNotHispanic.Checked)
            {

                ethnicty = 3;
            }
            else if (cbUnkown.Checked)
            {

                ethnicty = 4;
            }

            try
            {
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningDemographic] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                    DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    db.BeginTransaction();
                    if (_dtExist.Rows.Count > 0)
                    {
                        tabName = "Demographic";
                        string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                        if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        {
                            return;
                        }
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningDemographic] SET CodeRace='" + codeRace + "',Race='" + _Race + "',Specify='" + specify + "',Ethincity='" + ethnicty + "',SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',Comments='" + txtDemographicCoridinatorComment.Text + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedAt='" + GetCurrentStandardDateTime() + "',AddedBy='" + App.EsignedUser.UserName + "',AddedAt='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                    }
                    else
                    {
                        tabName = "Demographic";
                        string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                        if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        {
                            return;
                        }
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningDemographic](StudyID,SubjectKey,CodeRace,Race,Specify,Ethincity,SubjectStatus,Comments,eSignedBy,eSignedAt,AddedBy,AddedAt) VALUES('" + studyId + "','" + _subjectKey + "','" + codeRace + "','" + _Race.Trim() + "','" + specify + "','" + ethnicty + "','" + (int)SubjectStatusCode.Status.Proceed + "','" + txtDemographicCoridinatorComment.Text.Trim() + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                        db.ExecuteInsertQuery(InsertQuery, null, false);

                    }
                    // .... Subject Status..........................
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningDemographic", pgvDemographics.Name, "DemographicsProceed", SubjectStatusCode.Status.Proceed, txtDemographicCoridinatorComment.Text, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningDemographics", SubjectStatusCode.Status.Proceed, txtDemographicCoridinatorComment.Text);
                    db.CommitTransaction();
                    HelperFunctions.ShowMessageBox("Demographic saved successfully.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                    //foreach (Control ctrl in GBRace.Controls)
                    //{
                    //    ctrl.Enabled = false;
                    //}
                    //foreach (Control ctrl in GBEthincity.Controls)
                    //{
                    //    ctrl.Enabled = false;
                    //}
                    //foreach (Control ctrl in GBeSignDemographic.Controls)
                    //{
                    //    ctrl.Enabled = false;
                    //}
                    //btnESignRace.Enabled = false;
                    //GBRace.Enabled = false;
                    //GBEthincity.Enabled = false;
                    //GBeSignDemographic.Enabled = false;
                    //pgvDemographics.Image = null;
                    //Image Complete = new Bitmap(Properties.Resources.lock_closed);
                    //pgvDemographics.Image = Complete;
                    //txtDemographicCoridinatorComment.Enabled = false;

                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Demographic", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }


        private void SubjectDroppedFailedDemographics(string subjectkey)
        {

            bool subjectDroppedDemographics = DroppedHelper.IsSubjectDroppedDemographics(studyId, subjectkey);
            bool subjectFailedDemographics = FailedHelper.IsSubjectFailedDemographics(studyId, subjectkey);
            // =================== Check Subject Dropped=====================
            if (subjectDroppedDemographics == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvMedicalInterview.Image = Dropped;
                        pgvDemographics.Image = Dropped;

                        foreach (Control c in pgvDemographics.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvDemographics")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                        //...... selected page will be current .......
                        pgvOnScreeningPages.SelectedPage = pgvMedicalInterview;
                        pgvOnScreeningPages.SelectedPage = pgvDemographics;

                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================
            // =================== Check SubjectFailed=====================
            if (subjectFailedDemographics == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvMedicalInterview.Image = Failed;
                        pgvDemographics.Image = Failed;

                        foreach (Control c in pgvDemographics.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvDemographics")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }

                        //...... selected page will be current .......
                        pgvOnScreeningPages.SelectedPage = pgvMedicalInterview;
                        pgvOnScreeningPages.SelectedPage = pgvDemographics;
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Fail=======================
        }
        /// <summary>
        ///
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetDemographic(string subjectKey)
        {

            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    Cursor = Cursors.WaitCursor;
                    string race = string.Empty;
                    int codeRace = default(int);
                    int ethnicty = default(int);
                    string specify = string.Empty;
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningDemographic] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "'");
                        SqlCommand cmd = new SqlCommand(query, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            codeRace = Convert.ToInt32(dr["CodeRace"].ToString());
                            specify = dr["Specify"].ToString();
                            ethnicty = Convert.ToInt32(dr["Ethincity"].ToString());
                            race = dr["Race"].ToString();
                            CheckRaceCheckBox(race, codeRace.ToString(), specify);

                            if (ethnicty == 1)
                            {
                                cbNoHispanic.Checked = true;
                            }
                            else if (ethnicty == 2)
                            {
                                cbYesHispanic.Checked = true;
                            }
                            else if (ethnicty == 3)
                            {
                                cbNotHispanic.Checked = true;
                            }
                            else if (ethnicty == 4)
                            {
                                cbUnkown.Checked = true;
                            }
                            txtDemographicCoridinatorComment.Text = dr["Comments"].ToString();
                            lblSCDemoGraphEsignedBy.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedAt"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCDemoGraphEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                        }
                        connection.Close();

                    }

                    //............... Dropped / Failed ............
                    //SubjectDroppedFailedDemographics(subjectKey);
                }
                //.......... Lock/Unlock...........
                // ToggleLockUnlockButtonText();
                // LockUnlockControls();
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Physical", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }
        private void CheckRaceCheckBox(string race, string codeRace, string specify)
        {
            switch (codeRace.Trim())
            {
                case "1":
                    cbWhite.CheckStateChanged -= new System.EventHandler(cbWhite_CheckStateChanged);
                    cbWhite.Checked = true;
                    cbWhite.CheckStateChanged += new System.EventHandler(cbWhite_CheckStateChanged);
                    break;
                case "2":
                    cbBlack.CheckStateChanged -= new System.EventHandler(cbBlack_CheckStateChanged);
                    cbBlack.Checked = true;
                    cbBlack.CheckStateChanged += new System.EventHandler(cbBlack_CheckStateChanged);
                    break;
                case "3":
                    cbAmericanIndian.CheckStateChanged -= new System.EventHandler(cbAmericanIndian_CheckStateChanged);
                    cbAmericanIndian.Checked = true;
                    cbAmericanIndian.CheckStateChanged += new System.EventHandler(cbAmericanIndian_CheckStateChanged);
                    break;
                case "4":
                    cbNativeHawaiian.CheckStateChanged -= new System.EventHandler(cbNativeHawaiian_CheckStateChanged);
                    cbNativeHawaiian.Checked = true;
                    cbNativeHawaiian.CheckStateChanged += new System.EventHandler(cbNativeHawaiian_CheckStateChanged);
                    break;
                case "5":
                    cbAsian.CheckStateChanged -= new System.EventHandler(cbAsian_CheckStateChanged);
                    cbAsian.Checked = true;
                    cbAsian.CheckStateChanged += new System.EventHandler(cbAsian_CheckStateChanged);
                    LoadAsianRaceInfo(specify);
                    break;
                case "6":
                    cbMultiRace.CheckStateChanged -= new System.EventHandler(cbMultiRace_CheckStateChanged);
                    cbMultiRace.Checked = true;
                    cbMultiRace.CheckStateChanged += new System.EventHandler(cbMultiRace_CheckStateChanged);
                    txtMultiRace.Text = race;
                    foreach (var item in race.Split(','))
                    {
                        CheckRaceCheckBox(race, item, specify);
                    }
                    break;
                default:
                    break;
            }
        }
        private void LoadAsianRaceInfo(string specify)
        {
            string _origin = string.Empty;
            if (specify.Contains("Other"))
            {
                string[] _asians = specify.Split('|');
                _origin = _asians[0];
                txtDMOtherAsian.Text = _asians.Count() > 1 ? _asians[1] : "";
            }
            else
                _origin = specify;
            var item = ddCountryofOrigin.Items.Where(i => i.Text.Equals(_origin)).FirstOrDefault();
            ddCountryofOrigin.SelectedIndexChanged -= new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddCountryofOrigin_SelectedIndexChanged);
            if (item != null)
                ddCountryofOrigin.SelectedIndex = item.Index;
            else
                ddCountryofOrigin.SelectedIndex = -1;
            ddCountryofOrigin.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddCountryofOrigin_SelectedIndexChanged);
        }
        /// <summary>
        /// Scan Subject 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanDemographic_TextChanged(object sender, EventArgs e)
        {
            DemographicTimer.Interval = (700);
            DemographicTimer.Enabled = true;
            DemographicTimer.Start();
        }
        /// <summary>
        /// Timer To handle scanning Demographic before Reterive subject information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DemographicTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                DemographicTimer.Stop();
                if (string.IsNullOrEmpty(txtScanDemographic.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanDemographic.Text.Trim());

                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Demographic", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanDemographic.ResetText();
            }
        }

        #endregion

        //****************************** Screening Evaluation******************************
        #region Screening Evaluation 
        private void rgvScreeningEvaluation_CurrentRowChanging(object sender, CurrentRowChangingEventArgs e)
        {
            try
            {
                if (rgvScreeningEvaluation.CurrentRow != null && rgvScreeningEvaluation.CurrentRow.Index >= 0)
                {
                    if (!CheckIfScreeningEvaluationQuestionYesNoIsSelected(rgvScreeningEvaluation.CurrentRow))
                        e.Cancel = true;
                    if (!CheckIfScreeningEvaluationQuestionYesIsSelectedAnswerSpecify(rgvScreeningEvaluation.CurrentRow))
                        e.Cancel = true;
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void btnSCSEVerify_Click(object sender, EventArgs e)
        {
            try
            {
                if (!OnScreeningHelper.IsScreeningEvalSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Screening evaluation has not been done yet.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _tab = string.Empty;
                string _comments = string.Empty;
                if (OnScreeningStatusHelper.IsScreeningSubjectFailed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been failed already.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDropped(studyId, ValueOfKey, out _tab, out _comments))
                {

                    HelperFunctions.ShowMessageBox("Subject has been dropped already.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDismissed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been dismissed already.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string tabName = "Screening Evaluation";
                string reason = String.Format("Unlocking Screening Evaluation form to verify answer.");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                //rbtnIECCEsign.Enabled = true;
                //btnCheckInIECCFail.Enabled = true;
                //rbtnIECCNext.Enabled = true;
                CommonHelpers.SetReadOnlyProperties(ctnSCEQNA, false);
                CommonHelpers.SetReadOnlyProperties(pnlSCEvaluationEsign, false);

                //CommonHelpers.SetReadOnlyProperties(rgbIECCExclusionAns, false);
                //CommonHelpers.SetReadOnlyProperties(rgbIECCInclusionAns, false);
                //CommonHelpers.SetReadOnlyProperties(rpnlIECCFooter, false);
                HelperFunctions.ShowMessageBox("Screening Evaluation form has been unlocked. You can modify answer now.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
        }
        private void btnSCSEAdditionalInfo_Click(object sender, EventArgs e)
        {
            try
            {
                bool _isAdditonalInfoReq = false;
                using (DataTable IsAdditionalInfoRequired = InvestigatorScreeningHelper.IsScreeningEvalRequireAdditionalInfo(studyId, ValueOfKey))
                {
                    if (IsAdditionalInfoRequired.Rows.Count > 0)
                    {
                        if (!string.IsNullOrEmpty(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString()))
                        {
                            _isAdditonalInfoReq = Convert.ToBoolean(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString());
                        }
                    }
                }
                if (!_isAdditonalInfoReq)
                {
                    HelperFunctions.ShowMessageBox("Additional info is not requested.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _additionalInfo = string.Empty;
                using (frmCommentDialogBox commentBox = new frmCommentDialogBox())
                {
                    if (commentBox.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    _additionalInfo = commentBox.txtComment.Text.Trim();
                }
                tabName = "Screening Evaluation";
                string reason = string.Format("Screening Evaluation Additional Info provided and signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = "SELECT 1 FROM [dbo].[ScreeningEvaluationBySubjectKey] WHERE StudyID=@studyId AND SubjectKey=@subjectKey";
                    SqlParameter sp1 = new SqlParameter("@studyId", studyId);
                    SqlParameter sp2 = new SqlParameter("@subjectKey", ValueOfKey);
                    SqlParameter[] existParams = new SqlParameter[] { sp1, sp2 };
                    DataTable dtExist = db.ExecuteSelectQuery(checkExist, existParams, false);
                    if (dtExist.Rows.Count > 0)
                    {
                        db.BeginTransaction();
                        string _updateQuery = "Update ScreeningEvaluationBySubjectKey set AddtionalInfo=ISNULL(AddtionalInfo,'')+'|" + _additionalInfo + "',AdditionalInfoEsignedBy='" + App.EsignedUser.UserName + "',AdditionalInfoEsignedDate='" + DateTime.Now + "' where StudyID=@studyId AND SubjectKey=@subjectKey";
                        db.ExecuteUpdateQuery(_updateQuery, existParams, false);
                        string _updateInvSE = "Update InvestigatorScreeningEvaluationBySubjectKey set IsAdditionalInfoRequired=0,AdditionalInfoStatus=" + (int)EnumModules.AdditionalInfoStatus.Pending + " where StudyID = '" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'"; //
                        db.ExecuteUpdateQuery(_updateInvSE, null, false);
                        db.CommitTransaction();
                        HelperFunctions.ShowMessageBox("Additional info has been saved.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    db.CloseConnection();
                }
                LoadDataBySelectedTab();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void DisableAllControlsAfterSubjectDropScreeningEvaluation()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvMedicalInterview")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvMedicalInterviews.Controls)
            {
                if (c.Name == "pgvScreeningEvaluations")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }

        /// <summary>
        ///  Check if Dropped
        /// </summary>
        /// <param name="subjectkey"></param>
        private void CheckDroppedScreeningEvaluation(string subjectkey)
        {
            bool subjectFailedScreeningEval = FailedHelper.IsSubjectFailedScreeningEvaluation(studyId, subjectkey);
            bool subjectDroppedScreeningEval = DroppedHelper.IsSubjectDroppedScreeningEvaluation(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedScreeningEval == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvDemographics.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvMedicalInterview.Image = Dropped;
                        pgvScreeningEvaluations.Image = Dropped;

                        foreach (Control c in pgvScreeningEvaluations.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvScreeningEvaluations")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================

            //======================== Failed================================

            if (subjectDroppedScreeningEval == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvDemographics.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvMedicalInterview.Image = Failed;
                        pgvScreeningEvaluations.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;

                        foreach (Control c in pgvScreeningEvaluations.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvScreeningEvaluations")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
            //.......... Lock/Unlock...........
            //ToggleLockUnlockButtonText();
            // LockUnlockControls();
        }

        /// <summary>
        /// Display Data on Screening Evaluation Grid
        /// </summary>
        private void DipslayDataOnScreeningEvalualtionGrid()
        {
            string type = string.Empty;
            try
            {
                // if (!string.IsNullOrEmpty(studyId) && ddSubjects.SelectedIndex > -1)
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    var ds = new DataSet();
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        string _genderQuestionType = string.Empty;
                        if (txtGenders.Text.Trim() == "Male")
                            _genderQuestionType = ScreeningSetupHelper.MSE;
                        else if (txtGenders.Text.Trim() == "Female")
                            _genderQuestionType = ScreeningSetupHelper.FSE;
                        //if (txtGenders.Text == "Male")
                        //{
                        rgvScreeningEvaluation.DataSource = null;
                        rgvScreeningEvaluation.Rows.Clear();
                        //string query =string.Format(@"SELECT tb1.StudyID as StudyID,tb2.SubjectKey as SubjectKey, tb1.CodeID as CodeID,tb1.QuestionType as QuestionType,tb1.QuestionNumber as QuestionNumber ,tb1.Question as Question ,tb1.QuestionOption as QuestionOption  ,tb1.SubQuestion as SubQuestion ,tb2.YesNo as YesNo ,tb2.Answer1 as Answer1 ,tb2.Answer2 as Answer2 ,tb2.Answer3 as Answer3  FROM  [dbo].[ScreeningEvaluation] tb1 
                        //                       FULL OUTER JOIN  [dbo].[ScreeningEvaluationBySubjectKey]  tb2
                        //                        ON tb2.CodeID=tb1.CodeID  WHERE tb1.StudyID='" + studyId + "' AND tb1.QuestionType IN('" + ScreeningSetupHelper.MSE + "','" + ScreeningSetupHelper.SE + "') ORDER BY tb1.CodeID");
                        string query = string.Format(@"SELECT StudyID , CodeID ,QuestionType ,QuestionNumber,Question,QuestionOption,SubQuestion FROM  [dbo].[ScreeningEvaluation]                                                    
                                                     WHERE StudyID='" + studyId + "' AND QuestionType IN('" + _genderQuestionType + "','" + ScreeningSetupHelper.SE + "') ORDER BY CodeID");
                        var dataAdapter = new SqlDataAdapter(query, connection);
                        var commandBuilder = new SqlCommandBuilder(dataAdapter);
                        dataAdapter.Fill(ds);
                        connection.Close();
                    }
                    rgvScreeningEvaluation.DataSource = ds.Tables[0].DefaultView;
                    rgvScreeningEvaluation.ReadOnly = true;
                    rgvScreeningEvaluation.Columns["StudyID"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["CodeID"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["QuestionType"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["QuestionNumber"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["QuestionOption"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["SubQuestion"].IsVisible = false;
                    rgvScreeningEvaluation.Columns["Question"].WrapText = true;
                }

            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesQ1_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesQ1.Checked)
            {
                cbNoQ1.Checked = false;
                txtQ1Specify.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoQ1_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoQ1.Checked)
            {
                cbYesQ1.Checked = false;
                txtQ1Specify.Enabled = false;
                txtQ1Specify.ResetText();
                btnNextQuestionSE.Enabled = true;
            }
        }

        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYes2Q2_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYes2Q2.Checked)
            {
                cbNo2Q2.Checked = false;
                cbNAQ2.Checked = false;
                txtQ2Specify.Enabled = true;
                btnNextQuestionSE.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNo2Q2_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNo2Q2.Checked)
            {
                cbYes2Q2.Checked = false;
                cbNAQ2.Checked = false;
                txtQ2Specify.Clear();
                txtQ2Specify.Enabled = false;
                btnNextQuestionSE.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNAQ2_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNAQ2.Checked)
            {
                cbYes2Q2.Checked = false;
                cbNo2Q2.Checked = false;
                txtQ2Specify.Clear();
                txtQ2Specify.Enabled = false;
                btnNextQuestionSE.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesQ3_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesQ3.Checked)
            {
                cbNoQ3.Checked = false;
                EnableDisableSCSEQ3TypeAnsBoxes(true);
                btnNextQuestionSE.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoQ3_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbNoQ3.Checked)
            {
                cbYesQ3.Checked = false;
                ClearQuestionType3AnsBoxes();
                EnableDisableSCSEQ3TypeAnsBoxes(false);
                btnNextQuestionSE.Enabled = true;
            }
        }
        private void ClearQuestionType3AnsBoxes()
        {
            txtQ3AAnswer.Clear();
            txtQ3BAnswer.Clear();
            txtQ3CAnswer.Clear();
            txtQ3DAnswer.Clear();

        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesQ4_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbYesQ4.Checked)
            {
                cbNoQ4.Checked = false;
                EnableDisableSCSEQ4TypeAnsBoxes(true);
                btnNextQuestionSE.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoQ4_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (cbNoQ4.Checked)
                {
                    cbYesQ4.Checked = false;
                    ClearQuestionType4AnsBoxes();
                    EnableDisableSCSEQ4TypeAnsBoxes(false);
                    btnNextQuestionSE.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void ClearQuestionType4AnsBoxes()
        {
            try
            {
                txtQ4AAnswer1.ResetText();
                txtQ4BAnswer1.ResetText();
                txtQ4CAnswer1.ResetText();
                txtQ4DAnswer1.ResetText();
                txtQ4EAnswer1.ResetText();
                txtQ4FAnswer1.ResetText();
                txtQ4AAnswer2.ResetText();
                txtQ4BAnswer2.ResetText();
                txtQ4CAnswer2.ResetText();
                txtQ4DAnswer2.ResetText();
                txtQ4EAnswer2.ResetText();
                txtQ4FAnswer2.ResetText();
                txtQ4AAnswer3.ResetText();
                txtQ4BAnswer3.ResetText();
                txtQ4CAnswer3.ResetText();
                txtQ4DAnswer3.ResetText();
                txtQ4EAnswer3.ResetText();
                txtQ4FAnswer3.ResetText();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Lock the Questions & Answers after done all of the Questions (Screening Evaluation)
        /// </summary>
        private void LockQuestionsAndAnswersScreeningEvaluation()
        {
            foreach (Control ctrl in GBQ1.Controls)
            {

                ctrl.Enabled = true;

            }
            foreach (Control ctrl in GBQ2.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ3.Controls)
            {



                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ4.Controls)
            {

                ctrl.Enabled = true;
            }
            btnNextQuestionSE.Enabled = false;

        }
        private void LockQuestionsAndAnswersScreeningEvaluationAfterESign()
        {
            foreach (Control ctrl in GBQ1.Controls)
            {
                ctrl.Enabled = false;

            }
            foreach (Control ctrl in GBQ2.Controls)
            {

                ctrl.Enabled = false;


            }
            foreach (Control ctrl in GBQ3.Controls)
            {


                ctrl.Enabled = false;


            }
            foreach (Control ctrl in GBQ4.Controls)
            {


                ctrl.Enabled = false;

            }
            btnNextQuestionSE.Enabled = false;
        }
        private void UnlockQuestionsAndAnswersScreeningEvaluation()
        {
            foreach (Control ctrl in GBQ1.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ2.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ3.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ4.Controls)
            {


                ctrl.Enabled = true;
            }
            //  btnNextQuestionSE.Enabled = true;            
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool CheckIfScreeningEvaluationQuestionYesNoIsSelected(GridViewRowInfo currentRow)
        {
            try
            {
                string _option = currentRow.Cells["QuestionOption"].Value.ToString(); //rgvScreeningEvaluation.CurrentRow
                if (!string.IsNullOrEmpty(_option))
                {
                    if (_option == "2")
                        return true;
                    if (txtQ1.Text != "")
                    {
                        if (_option == "1" && !cbYesQ1.Checked && !cbNoQ1.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select Yes/No answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);

                            // this.rgvScreeningEvaluation.CurrentRow = this.rgvScreeningEvaluation.Rows[currentRowIndex];
                            return false;
                        }
                    }
                    else if (txtQ2.Text != "")
                    {
                        if (_option == "1" && !cbYes2Q2.Checked && !cbNo2Q2.Checked && !cbNAQ2.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select Yes/No/NA answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            // this.rgvScreeningEvaluation.CurrentRow = this.rgvScreeningEvaluation.Rows[currentRowIndex];
                            return false;
                        }
                    }
                    else if (txtQ3.Text != "")
                    {
                        if (_option == "1" && !cbYesQ3.Checked && !cbNoQ3.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select Yes/No answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            //  this.rgvScreeningEvaluation.CurrentRow = this.rgvScreeningEvaluation.Rows[currentRowIndex];
                            return false;
                        }
                    }
                    else if (txtQ4.Text != "")
                    {
                        if (_option == "1" && !cbYesQ4.Checked && !cbNoQ4.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select Yes/No answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            // this.rgvScreeningEvaluation.CurrentRow = this.rgvScreeningEvaluation.Rows[currentRowIndex];
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }
        private bool CheckIfScreeningEvaluationQuestionYesIsSelectedAnswerSpecify(GridViewRowInfo currentRow)
        {
            try
            {
                string _option = currentRow.Cells["QuestionOption"].Value.ToString().Trim();
                bool _noAnswer = false;
                if (txtQ1.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbYesQ1.Checked)) && txtQ1Specify.Text.Trim() == string.Empty)
                    {
                        _noAnswer = true;
                    }
                }
                else if (txtQ2.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbYes2Q2.Checked) || (_option == "1" && cbNAQ2.Checked)) && txtQ2Specify.Text.Trim() == string.Empty)
                    {
                        _noAnswer = true;
                    }
                }
                else if (txtQ3.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbYesQ3.Checked)) && txtQ3ASpecify.Text.Trim() != string.Empty && txtQ3AAnswer.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ3.Checked)) && txtQ3BSpecify.Text.Trim() != string.Empty && txtQ3BAnswer.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ3.Checked)) && txtQ3CSpecify.Text.Trim() != string.Empty && txtQ3CAnswer.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ3.Checked)) && txtQ3DSpecify.Text.Trim() != string.Empty && txtQ3DAnswer.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                }
                else if (txtQ4.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4ASpecify.Text.Trim() != string.Empty && txtQ4AAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4BSpecify.Text.Trim() != string.Empty && txtQ4BAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4CSpecify.Text.Trim() != string.Empty && txtQ4CAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4DSpecify.Text.Trim() != string.Empty && txtQ4DAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4ESpecify.Text.Trim() != string.Empty && txtQ4EAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                    if ((_option == "2" || (_option == "1" && cbYesQ4.Checked)) && txtQ4FSpecify.Text.Trim() != string.Empty && txtQ4FAnswer1.Text == string.Empty)
                    {
                        _noAnswer = true;
                    }
                }
                if (_noAnswer)
                {
                    HelperFunctions.ShowMessageBox("Please specify the answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }

        //********************* Next Question Area *******
        /// <summary>
        /// Populate Screening Evaluation based on Selected Question from the Grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rgvScreeningEvaluation_CellClick(object sender, GridViewCellEventArgs e)
        {
            btnNextQuestionSE.Enabled = true;
            try
            {
                string eSignedBy = App.EsignedUser.UserName;
                if (e.RowIndex >= 0)
                {
                    SaveScreeningEvaluationQuestionAnswerInDataTable();
                    ClearScreeningEvaluationQuestionsData();
                    LoadScreeningEvaluationQuestion(e.RowIndex);
                    LoadScreeningEvalQuestionsData();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// Save Subject Screening Evaluation
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNextQuestionSE_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //.......... Next Row.........   
                if (!CheckIfScreeningEvaluationQuestionYesNoIsSelected(rgvScreeningEvaluation.CurrentRow))
                    return;
                if (!CheckIfScreeningEvaluationQuestionYesIsSelectedAnswerSpecify(rgvScreeningEvaluation.CurrentRow))
                    return;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                SaveScreeningEvaluationQuestionAnswerInDataTable();
                ClearScreeningEvaluationQuestionsData();
                int rowIndex = rgvScreeningEvaluation.Rows.IndexOf((GridViewDataRowInfo)rgvScreeningEvaluation.CurrentRow);
                rowIndex++;
                if (rowIndex >= rgvScreeningEvaluation.Rows.Count)
                {
                    rowIndex = 0;
                }
                rgvScreeningEvaluation.CurrentRow = rgvScreeningEvaluation.Rows[rowIndex];
                if (rowIndex >= 0)
                {
                    LoadScreeningEvaluationQuestion(rowIndex);
                    LoadScreeningEvalQuestionsData();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadScreeningEvaluationQuestion(int rowIndex)
        {
            try
            {
                txtQ1.Clear();
                txtQ2.Clear();
                txtQ3.Clear();
                txtQ4.Clear();
                _StudyID = rgvScreeningEvaluation.Rows[rowIndex].Cells["StudyID"].Value.ToString();
                codeid = Convert.ToInt32(rgvScreeningEvaluation.Rows[rowIndex].Cells["CodeID"].Value.ToString());
                type = rgvScreeningEvaluation.Rows[rowIndex].Cells["QuestionType"].Value.ToString();
                _Question = rgvScreeningEvaluation.Rows[rowIndex].Cells["Question"].Value.ToString();
                _QuestionNumber = Convert.ToInt32(rgvScreeningEvaluation.Rows[rowIndex].Cells["QuestionNumber"].Value);
                _Option = Convert.ToInt32(rgvScreeningEvaluation.Rows[rowIndex].Cells["QuestionOption"].Value);
                _SubQuestion = rgvScreeningEvaluation.Rows[rowIndex].Cells["SubQuestion"].Value.ToString().Split('|');

                if (_QuestionNumber == 1)
                {
                    txtQ1.Text = _Question;
                    txtQ1.ReadOnly = true;
                    if (_Option == 1)
                    {
                        cbYesQ1.Visible = true;
                        cbNoQ1.Visible = true;
                        txtQ1Specify.Enabled = false;
                    }
                    else if (_Option == 2)
                    {
                        cbYesQ1.Visible = false;
                        cbNoQ1.Visible = false;
                        txtQ1Specify.Enabled = true;
                    }
                    GBQ1.Visible = true;
                    GBQ2.Visible = false;
                    GBQ3.Visible = false;
                    GBQ4.Visible = false;
                    GBQ1.Location = new Point(40, 68);
                    GBQ1.Size = new Size(535, 234);
                }
                else if (_QuestionNumber == 2)
                {
                    txtQ2.ReadOnly = true;
                    txtQ2.Text = _Question;
                    if (_Option == 1)
                    {
                        txtQ2Specify.Enabled = false;
                        cbYes2Q2.Visible = true;
                        cbNo2Q2.Visible = true;
                        cbNAQ2.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        txtQ2Specify.Enabled = true;
                        cbYes2Q2.Visible = false;
                        cbNo2Q2.Visible = false;
                        cbNAQ2.Visible = false;
                    }
                    GBQ2.Visible = true;
                    GBQ1.Visible = false;
                    GBQ3.Visible = false;
                    GBQ4.Visible = false;
                    GBQ2.Location = new Point(40, 68);
                    GBQ2.Size = new Size(535, 234);
                }
                else if (_QuestionNumber == 3)
                {
                    txtQ3.ReadOnly = true;
                    txtQ3.Text = _Question;
                    if (_Option == 1)
                    {
                        EnableDisableSCSEQ3TypeAnsBoxes(false);
                        cbYesQ3.Visible = true;
                        cbNoQ3.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        EnableDisableSCSEQ3TypeAnsBoxes(true);
                        cbYesQ3.Visible = false;
                        cbNoQ3.Visible = false;
                    }
                    for (int i = 0; i < _SubQuestion.Count(); i++)
                    {
                        if (i == 0)
                        {
                            txtQ3ASpecify.ReadOnly = true;
                            txtQ3ASpecify.Text = _SubQuestion[i].ToString();
                        }
                        else if (i == 1)
                        {
                            txtQ3BSpecify.ReadOnly = true;
                            txtQ3BSpecify.Text = _SubQuestion[i].ToString();
                        }
                        else if (i == 2)
                        {
                            txtQ3CSpecify.ReadOnly = true;
                            txtQ3CSpecify.Text = _SubQuestion[i].ToString();
                        }
                        else if (i == 3)
                        {
                            txtQ3DSpecify.ReadOnly = true;
                            txtQ3DSpecify.Text = _SubQuestion[i].ToString();
                        }
                    }
                    GBQ3.Visible = true;
                    GBQ2.Visible = false;
                    GBQ1.Visible = false;
                    GBQ4.Visible = false;
                    GBQ3.Location = new Point(40, 68);
                    GBQ3.Size = new Size(535, 301);
                }
                else if (_QuestionNumber == 4)
                {
                    txtQ4.ReadOnly = true;
                    txtQ4.Text = _Question;
                    if (_Option == 1)
                    {
                        EnableDisableSCSEQ4TypeAnsBoxes(false);
                        cbYesQ4.Visible = true;
                        cbNoQ4.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        EnableDisableSCSEQ4TypeAnsBoxes(true);
                        cbYesQ4.Visible = false;
                        cbNoQ4.Visible = false;
                    }
                    for (int i = 0; i < _SubQuestion.Count(); i++)
                    {
                        if (i == 0)
                        {
                            txtQ4ASpecify.ReadOnly = true;
                            txtQ4ASpecify.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 1)
                        {
                            txtQ4BSpecify.ReadOnly = true;
                            txtQ4BSpecify.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 2)
                        {
                            txtQ4CSpecify.ReadOnly = true;
                            txtQ4CSpecify.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 3)
                        {
                            txtQ4DSpecify.ReadOnly = true;
                            txtQ4DSpecify.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 4)
                        {
                            txtQ4ESpecify.ReadOnly = true;
                            txtQ4ESpecify.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 5)
                        {
                            txtQ4FSpecify.ReadOnly = true;
                            txtQ4FSpecify.Text = _SubQuestion[i].ToString();
                        }
                    }

                    GBQ4.Visible = true;
                    GBQ2.Visible = false;
                    GBQ3.Visible = false;
                    GBQ1.Visible = false;
                    GBQ4.Location = new Point(40, 68);
                    GBQ4.Size = new Size(535, 301);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void EnableDisableSCSEQ3TypeAnsBoxes(bool enable)
        {
            txtQ3AAnswer.Enabled = enable;
            txtQ3BAnswer.Enabled = enable;
            txtQ3CAnswer.Enabled = enable;
            txtQ3DAnswer.Enabled = enable;
        }
        private void EnableDisableSCSEQ4TypeAnsBoxes(bool enable)
        {
            txtQ4AAnswer1.Enabled = enable;
            txtQ4BAnswer1.Enabled = enable;
            txtQ4CAnswer1.Enabled = enable;
            txtQ4DAnswer1.Enabled = enable;
            txtQ4EAnswer1.Enabled = enable;
            txtQ4FAnswer1.Enabled = enable;
            txtQ4AAnswer2.Enabled = enable;
            txtQ4BAnswer2.Enabled = enable;
            txtQ4CAnswer2.Enabled = enable;
            txtQ4DAnswer2.Enabled = enable;
            txtQ4EAnswer2.Enabled = enable;
            txtQ4FAnswer2.Enabled = enable;
            txtQ4AAnswer3.Enabled = enable;
            txtQ4BAnswer3.Enabled = enable;
            txtQ4CAnswer3.Enabled = enable;
            txtQ4DAnswer3.Enabled = enable;
            txtQ4EAnswer3.Enabled = enable;
            txtQ4FAnswer3.Enabled = enable;
        }
        private void EnableDisableSCMHQ3TypeAnsBoxes(bool enable)
        {
            txtQ3AAnswer1MH.Enabled = enable;
            txtQ3BAnswer1MH.Enabled = enable;
            txtQ3CAnswer1MH.Enabled = enable;
            txtQ3DAnswer1MH.Enabled = enable;
        }
        private void EnableDisableSCMHQ4TypeAnsBoxes(bool enable)
        {
            txtQ4AAnswer1MH.Enabled = enable;
            txtQ4BAnswer1MH.Enabled = enable;
            txtQ4CAnswer1MH.Enabled = enable;
            txtQ4DAnswer1MH.Enabled = enable;
            txtQ4EAnswer1MH.Enabled = enable;
            txtQ4FAnswer1MH.Enabled = enable;

            txtQ4AAnswer2MH.Enabled = enable;
            txtQ4BAnswer2MH.Enabled = enable;
            txtQ4CAnswer2MH.Enabled = enable;
            txtQ4DAnswer2MH.Enabled = enable;
            txtQ4EAnswer2MH.Enabled = enable;
            txtQ4FAnswer2MH.Enabled = enable;

            txtQ4AAnswer3MH.Enabled = enable;
            txtQ4BAnswer3MH.Enabled = enable;
            txtQ4CAnswer3MH.Enabled = enable;
            txtQ4DAnswer3MH.Enabled = enable;
            txtQ4EAnswer3MH.Enabled = enable;
            txtQ4FAnswer3MH.Enabled = enable;
        }
        private void SaveScreeningEvaluationQuestionAnswerInDataTable()
        {
            try
            {
                //....................Questions to Insert ..................
                string _subQuestion = string.Empty;
                string _Answer1 = string.Empty;
                string _Answer2 = string.Empty;
                string _Answer3 = string.Empty;
                string _comments = string.Empty;
                int _yesNoNA = -1;
                if (dtScreeningEvaluationAns == null)
                {
                    DesigndtScreenEvalQuestionsAnsTable();
                }
                if (!string.IsNullOrEmpty(txtQ1.Text.Trim()))
                {
                    _Question = txtQ1.Text;
                    if (cbYesQ1.Checked)
                    {
                        _yesNoNA = 1;
                    }
                    else if (cbNoQ1.Checked)
                    {
                        _yesNoNA = 0;
                    }
                    else
                    {
                        _yesNoNA = -1;
                    }
                    _QuestionNumber = 1;
                    _Answer1 = txtQ1Specify.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    _subQuestion = string.Format(string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty);
                    _comments = txtSEQ1Comment.Text.Trim();
                    AddScreeningEvalQuestionAnsToTable(codeid, _yesNoNA, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ2.Text.Trim()))
                {
                    _Question = txtQ2.Text;

                    if (cbNo2Q2.Checked)
                    {
                        _yesNoNA = 0;
                    }
                    else if (cbYes2Q2.Checked)
                    {
                        _yesNoNA = 1;
                    }
                    else if (cbNAQ2.Checked)
                    {
                        _yesNoNA = 2;
                    }
                    else
                    {
                        _yesNoNA = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 2;
                    _comments = txtSEQ2Comment.Text.Trim();
                    _subQuestion = string.Format(string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty);
                    _Answer1 = txtQ2Specify.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    AddScreeningEvalQuestionAnsToTable(codeid, _yesNoNA, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ3.Text.Trim()))
                {
                    _Question = txtQ3.Text;
                    if (cbYesQ3.Checked)
                    {
                        _yesNoNA = 1;
                    }
                    else if (cbNoQ3.Checked)
                    {
                        _yesNoNA = 0;
                    }
                    else
                    {
                        _yesNoNA = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 3;
                    _subQuestion = txtQ3ASpecify.Text + "|" + txtQ3BSpecify.Text + "|" + txtQ3CSpecify.Text + "|" + txtQ3DSpecify.Text;
                    _Answer1 = txtQ3AAnswer.Text + "|" + txtQ3BAnswer.Text + "|" + txtQ3CAnswer.Text + "|" + txtQ3DAnswer.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    _comments = txtSEQ3Comment.Text.Trim();
                    AddScreeningEvalQuestionAnsToTable(codeid, _yesNoNA, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ4.Text.Trim()))
                {
                    _Question = txtQ4.Text;
                    if (cbYesQ4.Checked)
                    {
                        _yesNoNA = 1;
                    }
                    else if (cbNoQ4.Checked)
                    {
                        _yesNoNA = 0;
                    }
                    else
                    {
                        _yesNoNA = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 4;
                    _subQuestion = txtQ4ASpecify.Text + "|" + txtQ4BSpecify.Text + "|" + txtQ4CSpecify.Text + "|" + txtQ4DSpecify.Text + "|" + txtQ4ESpecify.Text + "|" + txtQ4FSpecify.Text;
                    _Answer1 = txtQ4AAnswer1.Text + "|" + txtQ4BAnswer1.Text + "|" + txtQ4CAnswer1.Text + "|" + txtQ4DAnswer1.Text + "|" + txtQ4EAnswer1.Text + "|" + txtQ4FAnswer1.Text;
                    _Answer2 = txtQ4AAnswer2.Text + "|" + txtQ4BAnswer2.Text + "|" + txtQ4CAnswer2.Text + "|" + txtQ4DAnswer2.Text + "|" + txtQ4EAnswer2.Text + "|" + txtQ4FAnswer2.Text;
                    _Answer3 = txtQ4AAnswer3.Text + "|" + txtQ4BAnswer3.Text + "|" + txtQ4CAnswer3.Text + "|" + txtQ4DAnswer3.Text + "|" + txtQ4EAnswer3.Text + "|" + txtQ4FAnswer3.Text;
                    _comments = txtSEQ4Comment.Text.Trim();
                    AddScreeningEvalQuestionAnsToTable(codeid, _yesNoNA, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else
                {
                    if (dtScreeningEvaluationAns.Rows.Count != 0)
                        HelperFunctions.ShowMessageBox("Please select a question first.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void ClearScreeningEvaluationQuestionsData()
        {
            cbYesQ1.CheckStateChanged -= new System.EventHandler(cbYesQ1_CheckStateChanged);
            cbNoQ1.CheckStateChanged -= new System.EventHandler(cbNoQ1_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ1);

            cbYesQ1.CheckStateChanged += new System.EventHandler(cbYesQ1_CheckStateChanged);
            cbNoQ1.CheckStateChanged += new System.EventHandler(cbNoQ1_CheckStateChanged);
            cbYes2Q2.CheckStateChanged -= new System.EventHandler(cbYes2Q2_CheckStateChanged);
            cbNo2Q2.CheckStateChanged -= new System.EventHandler(cbNo2Q2_CheckStateChanged);
            cbNAQ2.CheckStateChanged -= new System.EventHandler(cbNAQ2_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ2);

            cbYes2Q2.CheckStateChanged += new System.EventHandler(cbYes2Q2_CheckStateChanged);
            cbNo2Q2.CheckStateChanged += new System.EventHandler(cbNo2Q2_CheckStateChanged);
            cbNAQ2.CheckStateChanged += new System.EventHandler(cbNAQ2_CheckStateChanged);
            cbYesQ3.CheckStateChanged -= new System.EventHandler(cbYesQ3_CheckStateChanged);
            cbNoQ3.CheckStateChanged -= new System.EventHandler(cbNoQ3_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ3);
            cbYesQ3.CheckStateChanged += new System.EventHandler(cbYesQ3_CheckStateChanged);
            cbNoQ3.CheckStateChanged += new System.EventHandler(cbNoQ3_CheckStateChanged);
            cbYesQ4.CheckStateChanged -= new System.EventHandler(cbYesQ4_CheckStateChanged);
            cbNoQ4.CheckStateChanged -= new System.EventHandler(cbNoQ4_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ4);
            cbYesQ4.CheckStateChanged += new System.EventHandler(cbYesQ4_CheckStateChanged);
            cbNoQ4.CheckStateChanged += new System.EventHandler(cbNoQ4_CheckStateChanged);
        }
        private void DesigndtScreenEvalQuestionsAnsTable()
        {
            dtScreeningEvaluationAns = new DataTable();
            dtScreeningEvaluationAns.Columns.Add("CodeID");
            dtScreeningEvaluationAns.Columns.Add("Question");
            dtScreeningEvaluationAns.Columns.Add("YesNo");
            dtScreeningEvaluationAns.Columns.Add("Answer1");
            dtScreeningEvaluationAns.Columns.Add("Answer2");
            dtScreeningEvaluationAns.Columns.Add("Answer3");
            dtScreeningEvaluationAns.Columns.Add("Comments");
        }
        private void LoadScreeningEvalQuestionsData()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    #region From Local Datatable saved when user selected answers
                    if (dtScreeningEvaluationAns == null)
                        DesigndtScreenEvalQuestionsAnsTable();
                    DataRow dr = dtScreeningEvaluationAns.Select("CodeID='" + rgvScreeningEvaluation.CurrentRow.Cells["CodeID"].Value.ToString() + "'").FirstOrDefault();
                    if (dr == null)
                    {
                        #region From Database 
                        string _comments = string.Empty;
                        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                        {
                            connection.Open();
                            string checkExist = string.Format(@"SELECT COUNT(*) From [dbo].[ScreeningEvaluationBySubjectKey] WHERE StudyID='" + studyId + "' and SubjectKey='" + _subjectKey + "'");
                            SqlCommand cmd = new SqlCommand(checkExist, connection);
                            int count = (int)cmd.ExecuteScalar();
                            if (count > 0)
                            {
                                string query = string.Format(@"SELECT tb2.YesNo ,tb2.Answer1 ,tb2.Answer2 ,tb2.Answer3,tb2.Comments  FROM  [dbo].[ScreeningEvaluation] tb1 
                                                   FULL OUTER JOIN  [dbo].[ScreeningEvaluationBySubjectKey]  tb2
                                                    ON tb2.CodeID=tb1.CodeID 
                                                    WHERE tb1.StudyID='" + _StudyID + "' AND tb2.SubjectKey='" + _subjectKey + "' AND tb2.CodeID='" + codeid + "'"); // AND tb1.QuestionType IN('" + ScreeningSetupHelper.MSE + "','" + ScreeningSetupHelper.SE + "')
                                SqlCommand cmdMale = new SqlCommand(query, connection);
                                SqlDataReader sdr = cmdMale.ExecuteReader();
                                if (sdr.Read())
                                {
                                    string _yesNoNA = string.Empty;
                                    if (sdr["YesNo"].ToString().Equals("0"))
                                        _yesNoNA = "False";
                                    else if (sdr["YesNo"].ToString().Equals("1"))
                                        _yesNoNA = "True";
                                    else if (sdr["YesNo"].ToString().Equals("2"))
                                        _yesNoNA = "NA";
                                    else
                                        _yesNoNA = string.Empty;
                                    int _yesnoOption = -1;
                                    int.TryParse(sdr["YesNo"].ToString(), out _yesnoOption);
                                    _comments = sdr["Comments"].ToString();
                                    if (!string.IsNullOrEmpty(txtQ1.Text.Trim()))
                                    {
                                        AddScreeningEvalQuestionAnsToTable(codeid, _yesnoOption, txtQ1.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                        //LoadScreeningEvalQuestion1Ans(_yesNoNA, sdr["Answer1"].ToString());
                                    }
                                    else if (!string.IsNullOrEmpty(txtQ2.Text.Trim()))
                                    {
                                        AddScreeningEvalQuestionAnsToTable(codeid, _yesnoOption, txtQ2.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                        // LoadScreeningEvalQuestion2Ans(_yesNoNA, sdr["Answer1"].ToString());
                                    }
                                    else if (!string.IsNullOrEmpty(txtQ3.Text.Trim()))
                                    {
                                        AddScreeningEvalQuestionAnsToTable(codeid, _yesnoOption, txtQ3.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                        // LoadScreeningEvalQuestion3Ans(_yesNoNA, sdr["Answer1"].ToString());
                                    }
                                    else if (!string.IsNullOrEmpty(txtQ4.Text.Trim()))
                                    {
                                        AddScreeningEvalQuestionAnsToTable(codeid, _yesnoOption, txtQ4.Text.Trim(), sdr["Answer1"].ToString(), sdr["Answer2"].ToString(), sdr["Answer3"].ToString(), _comments);
                                        //LoadScreeningEvalQuestion4Ans(_yesNoNA, sdr["Answer1"].ToString(), sdr["Answer2"].ToString(), sdr["Answer3"].ToString());
                                    }
                                }
                            }
                            connection.Close();
                        }
                        #endregion
                    }
                    dr = dtScreeningEvaluationAns.Select("CodeID='" + rgvScreeningEvaluation.CurrentRow.Cells["CodeID"].Value.ToString() + "'").FirstOrDefault();
                    string _yesNO = string.Empty;
                    if (dr != null)
                    {
                        _yesNO = dr["YesNo"].ToString();
                        string ans1 = dr["Answer1"].ToString();
                        string ans2 = dr["Answer2"].ToString();
                        string ans3 = dr["Answer3"].ToString();
                        if (!string.IsNullOrEmpty(txtQ1.Text.Trim()))
                        {
                            LoadScreeningEvalQuestion1Ans(_yesNO, ans1);
                            txtSEQ1Comment.Text = dr["Comments"].ToString();
                        }
                        else if (!string.IsNullOrEmpty(txtQ2.Text.Trim()))
                        {
                            LoadScreeningEvalQuestion2Ans(_yesNO, ans1);
                            txtSEQ2Comment.Text = dr["Comments"].ToString();
                        }
                        else if (!string.IsNullOrEmpty(txtQ3.Text.Trim()))
                        {
                            LoadScreeningEvalQuestion3Ans(_yesNO, ans1);
                            txtSEQ3Comment.Text = dr["Comments"].ToString();
                        }
                        else if (!string.IsNullOrEmpty(txtQ4.Text.Trim()))
                        {
                            LoadScreeningEvalQuestion4Ans(_yesNO, ans1, ans2, ans3);
                            txtSEQ4Comment.Text = dr["Comments"].ToString();
                        }
                    }
                    #endregion
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadScreeningEvalQuestion1Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ1.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNoQ1.CheckStateChanged -= new System.EventHandler(this.cbNoQ1_CheckStateChanged);
                        cbNoQ1.Checked = true;
                        // this.cbNoQ1.CheckStateChanged += new System.EventHandler(this.cbNoQ1_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ1.CheckStateChanged -= new System.EventHandler(this.cbYesQ1_CheckStateChanged);
                        cbYesQ1.Checked = true;
                        // this.cbYesQ1.CheckStateChanged += new System.EventHandler(this.cbYesQ1_CheckStateChanged);
                    }
                    txtQ1Specify.Text = ans;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadScreeningEvalQuestion2Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ2.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNo2Q2.CheckStateChanged -= new System.EventHandler(this.cbNo2Q2_CheckStateChanged);
                        cbNo2Q2.Checked = true;
                        // this.cbNo2Q2.CheckStateChanged += new System.EventHandler(this.cbNo2Q2_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYes2Q2.CheckStateChanged -= new System.EventHandler(this.cbYes2Q2_CheckStateChanged);
                        cbYes2Q2.Checked = true;
                        // this.cbYes2Q2.CheckStateChanged += new System.EventHandler(this.cbYes2Q2_CheckStateChanged);
                    }
                    else
                    {
                        // this.cbNAQ2.CheckStateChanged -= new System.EventHandler(this.cbNAQ2_CheckStateChanged);
                        cbNAQ2.Checked = true;
                        // this.cbNAQ2.CheckStateChanged += new System.EventHandler(this.cbNAQ2_CheckStateChanged);
                    }
                    txtQ2Specify.Text = ans;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadScreeningEvalQuestion3Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ3.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNoQ3.CheckStateChanged -= new System.EventHandler(this.cbNoQ3_CheckStateChanged);
                        cbNoQ3.Checked = true;
                        // this.cbNoQ3.CheckStateChanged += new System.EventHandler(this.cbNoQ3_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ3.CheckStateChanged -= new System.EventHandler(this.cbYesQ3_CheckStateChanged);
                        cbYesQ3.Checked = true;
                        // this.cbYesQ3.CheckStateChanged += new System.EventHandler(this.cbYesQ3_CheckStateChanged);
                    }

                    string[] AnswerQ3 = ans.Split('|');
                    if (AnswerQ3.Length == 1)
                    {
                        txtQ3AAnswer.Text = AnswerQ3[0].ToString();
                    }
                    if (AnswerQ3.Length == 2)
                    {
                        txtQ3AAnswer.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer.Text = AnswerQ3[1].ToString();
                    }
                    if (AnswerQ3.Length == 3)
                    {
                        txtQ3AAnswer.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer.Text = AnswerQ3[1].ToString();
                        txtQ3CAnswer.Text = AnswerQ3[2].ToString();
                    }
                    if (AnswerQ3.Length == 4)
                    {
                        txtQ3AAnswer.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer.Text = AnswerQ3[1].ToString();
                        txtQ3CAnswer.Text = AnswerQ3[2].ToString();
                        txtQ3DAnswer.Text = AnswerQ3[3].ToString();
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadScreeningEvalQuestion4Ans(string yesNo, string ans1, string ans2, string ans3)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ4.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        //this.cbNoQ4.CheckStateChanged -= new System.EventHandler(this.cbNoQ4_CheckStateChanged);
                        cbNoQ4.Checked = true;
                        // this.cbNoQ4.CheckStateChanged += new System.EventHandler(this.cbNoQ4_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ4.CheckStateChanged -= new System.EventHandler(this.cbYesQ4_CheckStateChanged);
                        cbYesQ4.Checked = true;
                        // this.cbYesQ4.CheckStateChanged += new System.EventHandler(this.cbYesQ4_CheckStateChanged);
                    }

                    _QuestionNumber = 4;
                    //...Answer 1
                    string[] Answer1Q4 = ans1.Split('|');
                    if (Answer1Q4.Length == 1)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                    }
                    if (Answer1Q4.Length == 2)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1.Text = Answer1Q4[1].ToString();
                    }
                    if (Answer1Q4.Length == 3)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1.Text = Answer1Q4[2].ToString();
                    }
                    if (Answer1Q4.Length == 4)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1.Text = Answer1Q4[3].ToString();
                    }
                    if (Answer1Q4.Length == 5)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1.Text = Answer1Q4[3].ToString();
                        txtQ4EAnswer1.Text = Answer1Q4[4].ToString();
                    }
                    if (Answer1Q4.Length == 6)
                    {
                        txtQ4AAnswer1.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1.Text = Answer1Q4[3].ToString();
                        txtQ4EAnswer1.Text = Answer1Q4[4].ToString();
                        txtQ4FAnswer1.Text = Answer1Q4[5].ToString();
                    }

                    //...Answer 2

                    string[] Answer2Q4 = ans2.Split('|');
                    if (Answer2Q4.Length == 1)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                    }
                    if (Answer2Q4.Length == 2)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2.Text = Answer2Q4[1].ToString();
                    }
                    if (Answer2Q4.Length == 3)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2.Text = Answer2Q4[2].ToString();
                    }
                    if (Answer2Q4.Length == 4)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2.Text = Answer2Q4[3].ToString();
                    }
                    if (Answer2Q4.Length == 5)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2.Text = Answer2Q4[3].ToString();
                        txtQ4EAnswer2.Text = Answer2Q4[4].ToString();
                    }
                    if (Answer2Q4.Length == 6)
                    {
                        txtQ4AAnswer2.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2.Text = Answer2Q4[3].ToString();
                        txtQ4EAnswer2.Text = Answer2Q4[4].ToString();
                        txtQ4FAnswer2.Text = Answer2Q4[5].ToString();
                    }

                    //...Answer 3
                    string[] Answer3Q4 = ans3.Split('|');
                    if (Answer3Q4.Length == 1)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                    }
                    if (Answer3Q4.Length == 2)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3.Text = Answer3Q4[1].ToString();
                    }
                    if (Answer3Q4.Length == 3)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3.Text = Answer3Q4[2].ToString();
                    }
                    if (Answer3Q4.Length == 4)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3.Text = Answer3Q4[3].ToString();
                    }
                    if (Answer3Q4.Length == 5)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3.Text = Answer3Q4[3].ToString();
                        txtQ4EAnswer3.Text = Answer3Q4[4].ToString();
                    }
                    if (Answer3Q4.Length == 6)
                    {
                        txtQ4AAnswer3.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3.Text = Answer3Q4[3].ToString();
                        txtQ4EAnswer3.Text = Answer3Q4[4].ToString();
                        txtQ4FAnswer3.Text = Answer3Q4[5].ToString();
                    }


                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void AddScreeningEvalQuestionAnsToTable(int codeid, int option, string question, string ans1, string ans2, string ans3, string comments)
        {
            try
            {
                if (option == -1 && (string.IsNullOrEmpty(ans1) && string.IsNullOrEmpty(ans2) && string.IsNullOrEmpty(ans3)))
                    return;
                string _yesNoNA = string.Empty;
                if (option == 0)
                    _yesNoNA = "False";
                else if (option == 1)
                    _yesNoNA = "True";
                else if (option == 2)
                    _yesNoNA = "NA";
                if (dtScreeningEvaluationAns != null && !string.IsNullOrEmpty(question))
                {
                    DataRow dr = dtScreeningEvaluationAns.Select("CodeID='" + codeid + "'").FirstOrDefault();
                    if (dr == null)
                    {
                        _CounterAnsweredQuestions++;
                        dr = dtScreeningEvaluationAns.NewRow();
                        dr["CodeID"] = codeid;
                        dr["YesNo"] = _yesNoNA;
                        dr["Answer1"] = ans1;
                        dr["Answer2"] = ans2;
                        dr["Answer3"] = ans3;
                        dr["Question"] = question;
                        dr["Comments"] = comments;
                        dtScreeningEvaluationAns.Rows.Add(dr);
                    }
                    else
                    {
                        dr["CodeID"] = codeid;
                        dr["YesNo"] = _yesNoNA;
                        dr["Answer1"] = ans1;
                        dr["Answer2"] = ans2;
                        dr["Answer3"] = ans3;
                        dr["Question"] = question;
                        dr["Comments"] = comments;
                    }
                    dtScreeningEvaluationAns.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Clear all controls After Subject Change
        /// </summary>
        private void ClearSCEvaluationControls()
        {
            rgvScreeningEvaluation.ClearSelection();
            //......Screening Evaluation ......
            ResetSCEvaluationAnswersFields();
            GBQ1.Visible = false;
            GBQ2.Visible = false;
            GBQ3.Visible = false;
            GBQ4.Visible = false;
        }

        private void ResetSCEvaluationAnswersFields()
        {
            foreach (Control ctrl in pnlSCSEGB1.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlSCSEGB2.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlSCSEGB3.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlSCSEQ4.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignScreeningEval_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if (!ValidateAllSEQuestionsAns())
                //    return;
                if (SaveScreeningEvaluationQeustions("ScreeningEvaluationQuestionProceed", SubjectStatusCode.Status.Proceed))
                {
                    _CounterAnsweredQuestions = 0;
                    HelperFunctions.ShowMessageBox("Screening Evaluation Questions Saved Successfully. Subject can proceed ahead.", "creening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private bool ValidateAllSEQuestionsAns()
        {
            try
            {
                foreach (var row in rgvScreeningEvaluation.Rows)
                {
                    if (!CheckIfScreeningEvaluationQuestionYesNoIsSelected(row))
                        return false;
                    if (!CheckIfScreeningEvaluationQuestionYesIsSelectedAnswerSpecify(row))
                        return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private int QuestionsAnsweredValidation()
        {

            //_CounterAnsweredQuestions++ ;

            ////if (!cbYesQ1.Checked && !cbNoQ1.Checked)
            ////    _CounterAnsweredQuestions--;
            ////if (!cbYes2Q2.Checked && !cbNo2Q2.Checked)
            ////    _CounterAnsweredQuestions++;
            ////if (!cbYesQ3.Checked && !cbNoQ3.Checked)
            ////    _CounterAnsweredQuestions++;
            ////if (!cbYesQ4.Checked && !cbNoQ4.Checked)
            ////    _CounterAnsweredQuestions++;

            //if (cbYesQ1.Checked || cbNoQ1.Checked)
            //{
            //    _CounterAnsweredQuestions--;
            //    _CounterAnsweredQuestions++;
            //}

            //if (cbYes2Q2.Checked || cbNo2Q2.Checked)
            //{
            //    _CounterAnsweredQuestions--;
            //    _CounterAnsweredQuestions++;
            //}

            //if (cbYesQ3.Checked || cbNoQ3.Checked)
            //{
            //    _CounterAnsweredQuestions--;
            //    _CounterAnsweredQuestions++;
            //}

            //if (cbYesQ4.Checked || cbNoQ4.Checked)
            //{
            //    _CounterAnsweredQuestions--;
            //    _CounterAnsweredQuestions++;
            //}

            return _CounterAnsweredQuestions;
        }
        private bool SaveScreeningEvaluationQeustions(string actionAt, SubjectStatusCode.Status subjectStatus)
        {
            try
            {
                bool _isSESigned = OnScreeningHelper.IsScreeningEvalSigned(studyId, ValueOfKey);
                if (_isSESigned)
                {
                    if (HelperFunctions.ShowMessageBox("Screening Evaluation has been already signed. Do you want to save again(Y/N)?", "Screening Evaluation", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return false;
                }
                SaveScreeningEvaluationQuestionAnswerInDataTable();
                if (!_isSESigned && _CounterAnsweredQuestions != rgvScreeningEvaluation.Rows.Count)
                {
                    HelperFunctions.ShowMessageBox("Not all of the questions has been answered.", "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return false;
                }

                if (dtScreeningEvaluationAns.Rows.Count > 0)
                {
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    string eSignedBy = App.EsignedUser.UserName;
                    string _Question = string.Empty;
                    string _SubQuestion = string.Empty;
                    string _Answer1 = string.Empty;
                    string _Answer2 = string.Empty;
                    string _Answer3 = string.Empty;
                    bool _IsInsert = false;
                    bool? yesNo = null;
                    using (DbConnection dbCon = new DbConnection())
                    {
                        dbCon.OpenConnection();
                        tabName = "Screening Evaluation";
                        string reason = string.Format("This question has been asked and signed by:'" + " " + App.EsignedUser.UserName + "'");
                        if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        {
                            return false;
                        }
                        this.Cursor = Cursors.WaitCursor;
                        dbCon.BeginTransaction();
                        foreach (DataRow dr in dtScreeningEvaluationAns.Rows)
                        {
                            string checkExist = "SELECT * FROM [dbo].[ScreeningEvaluationBySubjectKey] WHERE StudyID=@studyId AND SubjectKey=@subjectKey AND CodeID=@codeId";
                            SqlParameter sp1 = new SqlParameter("@studyId", studyId);
                            SqlParameter sp2 = new SqlParameter("@subjectKey", _subjectKey);
                            SqlParameter sp3 = new SqlParameter("@codeId", dr["CodeID"]);
                            SqlParameter[] existParams = new SqlParameter[] { sp1, sp2, sp3 };
                            DataTable dtExist = dbCon.ExecuteSelectQuery(checkExist, existParams, false);
                            if (dr["YesNo"].ToString().Equals("True"))
                            {
                                yesNo = true;
                            }
                            else if (dr["YesNo"].ToString().Equals("False"))
                            {
                                yesNo = false;
                            }
                            else //if (_Option == 2)
                            {
                                yesNo = null;
                            }
                            SqlParameter sp4 = new SqlParameter("@yesno", yesNo);
                            SqlParameter sp5 = new SqlParameter("@answer1", dr["Answer1"]);
                            SqlParameter sp6 = new SqlParameter("@answer2", dr["Answer2"]);
                            SqlParameter sp7 = new SqlParameter("@answer3", dr["Answer3"]);
                            SqlParameter sp8 = new SqlParameter("@modifiedby", eSignedBy);
                            SqlParameter sp9 = new SqlParameter("@modifeddate", DateTime.Now);
                            SqlParameter sp10 = new SqlParameter("@esignedby", eSignedBy);
                            SqlParameter sp11 = new SqlParameter("@esignedDate", DateTime.Now);
                            SqlParameter sp12 = new SqlParameter("@comments", dr["Comments"]);
                            if (dtExist.Rows.Count > 0)
                            {
                                SqlParameter[] updateParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10, sp11, sp12 };
                                dbCon.ExecuteUpdateQuery("spUpdateScreeningEvalQuestionBySubject", updateParams, true);
                            }
                            else
                            {
                                _IsInsert = true;
                                SqlParameter[] insertParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10, sp11, sp12 };
                                dbCon.ExecuteInsertQuery("spInsertScreeningEvalQuestionBySubject", insertParams, true);
                            }
                        }
                        if (_IsInsert)
                        {
                            string detail = "screening evaluation data have been added.";
                            App.EsignedUser.AddAudit(dbCon, "Screening- Screening Evaluation", EnumModules.AuditAction.Insert.ToString(), detail, DateTime.Now, "", "");
                        }
                        //save subject's status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(dbCon, studyId, _subjectKey.ToString(), "ScreeningEvaluationBySubjectKey", pgvScreeningEvaluations.Name, "ScreeningEvaluationProceed", SubjectStatusCode.Status.Proceed, txtSECordinatorComment.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(dbCon, studyId, _subjectKey, "OnScreeningScreeningEvaluation", SubjectStatusCode.Status.Proceed, txtSECordinatorComment.Text.Trim());
                        dbCon.CommitTransaction();
                        dbCon.CloseConnection();
                        dtScreeningEvaluationAns.Clear();
                    }
                    CheckeSign(ValueOfKey);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("No data to save.", "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
                return false;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
            return true;
        }

        /// <summary>
        /// Timer To handle scanning Screening Evaluation before Retreive subject information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ScreeningEvalTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                ScreeningEvalTimer.Stop();
                if (string.IsNullOrEmpty(txtScanScreeningEvaluation.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanScreeningEvaluation.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanScreeningEvaluation.ResetText();
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanScreeningEvaluation_TextChanged(object sender, EventArgs e)
        {
            ScreeningEvalTimer.Interval = (700);
            ScreeningEvalTimer.Enabled = true;
            ScreeningEvalTimer.Start();
        }

        /// <summary>
        ///  Subject Failed Screening Evaluation
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedScreeningEval_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (string.IsNullOrEmpty(txtSECordinatorComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter Comment.", "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "Screening Evaluation";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                else
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningEvaluationBySubjectKey] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningEvaluationBySubjectKey] SET SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,eSignedBy=@eSignedBy,eSignedAt=@eSignedAt WHERE  StudyID = '" + studyId + "' AND SubjectKey='" + _subjectKey + "'");

                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtSECordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedAt", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningEvaluationBySubjectKey]
                                 (StudyID,SubjectKey,SubjectStatus,Comments,eSignedBy,eSignedAt) VALUES
                                (@studyId,@subjectkey,@SubjectStatus,@CordinatorComment,@eSignedBy,@eSignedAt)");
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyId", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtSECordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedAt", DateTime.Now));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningScreeningEvaluation", SubjectStatusCode.Status.Fail, txtSECordinatorComment.Text);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningEvaluationBySubjectKey", pgvScreeningEvaluations.Name, "ScreeningEvaluationFail", SubjectStatusCode.Status.Fail, txtSECordinatorComment.Text, App.EsignedUser.UserName);
                        db.CommitTransaction();
                        db.CloseConnection();
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        btneSignScreeningEval.Enabled = false;
                        DisableAllControlsAfterSubjectDropScreeningEvaluation();
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;

                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;

                        pgvMedicalHistory.Image = null;
                        pgvDemographics.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvMedicalInterview.Image = Failed;
                        pgvScreeningEvaluations.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Failed", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadScreeningEvaluationEsignedInfo()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string checkExist = string.Format(@"SELECT top 1 * From [dbo].[ScreeningEvaluationBySubjectKey] WHERE StudyID='" + studyId + "' and SubjectKey='" + _subjectKey + "' order by eSignedAt desc");
                        SqlCommand cmd = new SqlCommand(checkExist, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            lblSCSEEsignedBy.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedAt"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCSEEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                        }
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        //****************************** Medical History ******************************
        #region  Medical History       
        private void rgvMedicalHistory_CurrentRowChanging(object sender, CurrentRowChangingEventArgs e)
        {
            try
            {
                if (rgvMedicalHistory.CurrentRow != null && rgvMedicalHistory.CurrentRow.Index >= 0)
                {
                    if (!CheckIfMedicalHistoryQuestionYesNoIsSelected(rgvMedicalHistory.CurrentRow))
                    {
                        e.Cancel = true;
                        return;
                    }
                    if (!CheckIfMedicalHistoryQuestionYesIsSelectedAnswerSpecify(rgvMedicalHistory.CurrentRow))
                    {
                        e.Cancel = true;
                        return;
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void btnSCMHVerify_Click(object sender, EventArgs e)
        {
            try
            {
                if (!OnScreeningHelper.IsMedicalHistorySigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Medical History has not been done yet.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _tab = string.Empty;
                string _comments = string.Empty;
                if (OnScreeningStatusHelper.IsScreeningSubjectFailed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been failed already.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDropped(studyId, ValueOfKey, out _tab, out _comments))
                {

                    HelperFunctions.ShowMessageBox("Subject has been dropped already.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDismissed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been dismissed already.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string tabName = "Medical History";
                string reason = String.Format("Unlocking Medical History form to verify answer.");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                //rbtnIECCEsign.Enabled = true;
                //btnCheckInIECCFail.Enabled = true;
                //rbtnIECCNext.Enabled = true;
                CommonHelpers.SetReadOnlyProperties(ctnSCMHQNA, false);
                CommonHelpers.SetReadOnlyProperties(pnlSCMHEsign, false);

                //CommonHelpers.SetReadOnlyProperties(rgbIECCExclusionAns, false);
                //CommonHelpers.SetReadOnlyProperties(rgbIECCInclusionAns, false);
                //CommonHelpers.SetReadOnlyProperties(rpnlIECCFooter, false);
                HelperFunctions.ShowMessageBox("Medical History form has been unlocked. You can modify answer now.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
        }
        private void LoadMedicalHistoryEsignedInfo()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string checkExist = string.Format(@"SELECT top 1 * From [dbo].[MedicalHistoryBySubjectKey] WHERE StudyID='" + studyId + "' and SubjectKey='" + _subjectKey + "' order by eSignedAt desc");
                        SqlCommand cmd = new SqlCommand(checkExist, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            lblSCMHEsignedBy.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedAt"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCMHEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                        }
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void btnSCMHAdditionalInfo_Click(object sender, EventArgs e)
        {
            try
            {
                bool _isAdditonalInfoReq = false;
                using (DataTable IsAdditionalInfoRequired = InvestigatorScreeningHelper.IsMedicalHistoryRequireAdditionalInfo(studyId, ValueOfKey))
                {
                    if (IsAdditionalInfoRequired.Rows.Count > 0)
                    {
                        if (!string.IsNullOrEmpty(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString()))
                        {
                            _isAdditonalInfoReq = Convert.ToBoolean(IsAdditionalInfoRequired.Rows[0]["IsAdditionalInfoRequired"].ToString());
                        }
                    }
                }
                if (!_isAdditonalInfoReq)
                    return;

                string _additionalInfo = string.Empty;
                using (frmCommentDialogBox commentBox = new frmCommentDialogBox())
                {
                    if (commentBox.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    _additionalInfo = commentBox.txtComment.Text.Trim();
                }
                tabName = "Medical History";
                string reason = string.Format("Medical History Additional Info provided and signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = "SELECT 1 FROM [dbo].[MedicalHistoryBySubjectKey] WHERE StudyID=@studyId AND SubjectKey=@subjectKey";
                    SqlParameter sp1 = new SqlParameter("@studyId", studyId);
                    SqlParameter sp2 = new SqlParameter("@subjectKey", ValueOfKey);
                    SqlParameter[] existParams = new SqlParameter[] { sp1, sp2 };
                    DataTable dtExist = db.ExecuteSelectQuery(checkExist, existParams, false);
                    if (dtExist.Rows.Count > 0)
                    {
                        db.BeginTransaction();
                        string _updateQuery = "Update MedicalHistoryBySubjectKey set AddtionalInfo=ISNULL(AddtionalInfo,'')+'|" + _additionalInfo + "',AdditionalInfoEsignedBy='" + App.EsignedUser.UserName + "',AdditionalInfoEsignedDate='" + DateTime.Now + "' where StudyID=@studyId AND SubjectKey=@subjectKey";
                        db.ExecuteUpdateQuery(_updateQuery, existParams, false);
                        string _updateInvMH = "Update InvestigatorMedicalHistoryBySubjectKey set IsAdditionalInfoRequired=0,AdditionalInfoStatus=" + (int)EnumModules.AdditionalInfoStatus.Pending + " where StudyID = '" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'";
                        db.ExecuteUpdateQuery(_updateInvMH, null, false);
                        db.CommitTransaction();
                        HelperFunctions.ShowMessageBox("Additional info has been saved.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    db.CloseConnection();
                }
                LoadDataBySelectedTab();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void DisableAllControlsAfterSubjectDropMedicalHistory()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvMedicalInterview")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvMedicalInterviews.Controls)
            {
                if (c.Name == "pgvMedicalHistory")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }
            }
        }
        /// <summary>
        ///  Check if Dropped
        /// </summary>
        /// <param name="subjectkey"></param>
        private void CheckDroppedMedicalHistory(string subjectkey)
        {
            bool subjectDroppedScreeningEval = DroppedHelper.IsSubjectDroppedMedicalHistory(studyId, subjectkey);
            bool subjectFailedScreeningEval = FailedHelper.IsSubjectFailedMedicalHistory(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedScreeningEval == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvDemographics.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvMedicalInterview.Image = Dropped;
                        pgvMedicalHistory.Image = Dropped;

                        foreach (Control c in pgvMedicalHistory.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvMedicalHistory")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================
            //======================== Failed================================

            if (subjectFailedScreeningEval == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvMedicalInterview")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        //ctrl.Enabled = true;
                        pgvIDVerfication.Image = null;
                        pgvInfluenza.Image = null;
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvDemographics.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvMedicalInterview.Image = Failed;
                        pgvMedicalHistory.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        foreach (Control c in pgvMedicalHistory.Controls)
                        {
                            c.Enabled = false;
                        }
                        //....... Disable Screening Evaluation & Medical History......
                        foreach (Control c in pgvMedicalInterviews.Controls)
                        {
                            if (c.Name == "pgvMedicalHistory")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
            //.......... Lock/Unlock...........
            // ToggleLockUnlockButtonText();
            //  LockUnlockControls();
        }

        /// <summary>
        ///
        /// </summary>
        private void DipslayDataOnMedicalGrid()
        {
            string type = string.Empty;
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        string _genderMHQ = string.Empty;
                        if (txtGenders.Text == "Male")
                            _genderMHQ = ScreeningSetupHelper.MMH;
                        else
                            _genderMHQ = ScreeningSetupHelper.FMH;
                        rgvMedicalHistory.DataSource = null;
                        rgvMedicalHistory.Rows.Clear();
                        //string query = string.Format(@"SELECT tb1.StudyID as StudyID,tb2.SubjectKey as SubjectKey, tb1.CodeID as CodeID,tb1.QuestionType as QuestionType,tb1.QuestionNumber as QuestionNumber ,tb1.Question as Question ,tb1.QuestionOption as QuestionOption  ,tb1.SubQuestion as SubQuestion ,tb2.YesNo as YesNo ,tb2.Answer1 as Answer1 ,tb2.Answer2 as Answer2 ,tb2.Answer3 as Answer3  FROM  [dbo].[ScreeningEvaluation] tb1 
                        //                       FULL OUTER JOIN  [dbo].[ScreeningEvaluationBySubjectKey] tb2
                        //                        ON tb2.CodeID=tb1.CodeID  WHERE tb1.StudyID='" + studyId + "' AND tb1.QuestionType='" + ScreeningSetupHelper.MH + "' ORDER BY tb1.CodeID");
                        string query = string.Format(@"SELECT StudyID , CodeID ,QuestionType ,QuestionNumber,Question,QuestionOption,SubQuestion FROM  [dbo].[ScreeningEvaluation] 
                                                   
                                                     WHERE StudyID='" + studyId + "' AND QuestionType in('" + ScreeningSetupHelper.MH + "','" + _genderMHQ + "') ORDER BY CodeID");
                        var dataAdapter = new SqlDataAdapter(query, connection);

                        var commandBuilder = new SqlCommandBuilder(dataAdapter);
                        var ds = new DataSet();
                        dataAdapter.Fill(ds);
                        rgvMedicalHistory.DataSource = ds.Tables[0].DefaultView;
                        rgvMedicalHistory.ReadOnly = true;
                        rgvMedicalHistory.Columns["StudyID"].IsVisible = false;
                        rgvMedicalHistory.Columns["CodeID"].IsVisible = false;
                        rgvMedicalHistory.Columns["QuestionType"].IsVisible = false;
                        rgvMedicalHistory.Columns["Question"].WrapText = true;
                        rgvMedicalHistory.Columns["QuestionNumber"].IsVisible = false;
                        rgvMedicalHistory.Columns["QuestionOption"].IsVisible = false;
                        rgvMedicalHistory.Columns["SubQuestion"].IsVisible = false;
                        connection.Close();
                    }
                }

            }
            catch (Exception ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// Lock the Questions & Answers after done all of the Questions (Screening Evaluation)
        /// </summary>
        private void LockQuestionsAndAnswersMedicalHistory()
        {
            foreach (Control ctrl in GBQ1MH.Controls)
            {

                if (ctrl is RadCheckBox)
                    ctrl.Enabled = true;

                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ2MH.Controls)
            {

                if (ctrl is RadCheckBox)
                    ctrl.Enabled = true;
                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ3MH.Controls)
            {

                if (ctrl is RadCheckBox)
                    ctrl.Enabled = true;
                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ4MH.Controls)
            {

                if (ctrl is RadCheckBox)
                    ctrl.Enabled = true;
                ctrl.Enabled = false;
            }
            btnNextMedicalH.Enabled = false;
        }
        private void UnlockQuestionsAndAnswersMedicalHistory()
        {
            foreach (Control ctrl in GBQ1MH.Controls)
            {
                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ2MH.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ3MH.Controls)
            {


                ctrl.Enabled = true;
            }
            foreach (Control ctrl in GBQ4MH.Controls)
            {


                ctrl.Enabled = true;
            }
            //btnNextMedicalH.Enabled = true;            
        }
        private void LockQuestionsAndAnswersMedicalHistoryAfterESign()
        {
            foreach (Control ctrl in GBQ1MH.Controls)
            {


                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ2MH.Controls)
            {


                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ3MH.Controls)
            {


                ctrl.Enabled = false;
            }
            foreach (Control ctrl in GBQ4MH.Controls)
            {


                ctrl.Enabled = false;
            }
            btnNextMedicalH.Enabled = false;
        }

        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ1YesMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ1YesMH.Checked)
            {
                cbQ1NoMH.Checked = false;
                txtQ1SpecifyMH.Enabled = true;
                btnNextMedicalH.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ1NoMH_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbQ1NoMH.Checked)
            {
                cbQ1YesMH.Checked = false;
                txtQ1SpecifyMH.Enabled = false;
                btnNextMedicalH.Enabled = true;
                txtQ1SpecifyMH.Clear();
            }
        }

        private void cbQ2YesMH_CheckStateChanged(object sender, EventArgs e)
        {

            if (cbQ2YesMH.Checked)
            {
                cbQ2NoMH.Checked = false;
                cbQ2NAMH.Checked = false;
                txtQ2SpecifyMH.Enabled = true;
                btnNextMedicalH.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ2NoMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ2NoMH.Checked)
            {
                cbQ2YesMH.Checked = false;
                cbQ2NAMH.Checked = false;
                txtQ2SpecifyMH.Clear();
                txtQ2SpecifyMH.Enabled = false;
                btnNextMedicalH.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ2NAMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ2NAMH.Checked)
            {
                cbQ2YesMH.Checked = false;
                cbQ2NoMH.Checked = false;
                txtQ2SpecifyMH.Clear();
                txtQ2SpecifyMH.Enabled = false;
                btnNextMedicalH.Enabled = true;
            }

        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ3YesMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ3YesMH.Checked)
            {
                cbQ3NoMH.Checked = false;
                EnableDisableSCMHQ3TypeAnsBoxes(true);
                btnNextMedicalH.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ3NoMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ3NoMH.Checked)
            {
                cbQ3YesMH.Checked = false;
                ClearQuestionsType3MHAnsBoxes();
                EnableDisableSCMHQ3TypeAnsBoxes(false);
                btnNextMedicalH.Enabled = true;
            }
            //else
            //{
            //    btnNextMedicalH.Enabled = false;
            //}
        }
        private void ClearQuestionsType3MHAnsBoxes()
        {
            txtQ3AAnswer1MH.Clear();
            txtQ3BAnswer1MH.Clear();
            txtQ3CAnswer1MH.Clear();
            txtQ3DAnswer1MH.Clear();
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ4YesMH_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbQ4YesMH.Checked)
            {
                cbQ4NoMH.Checked = false;
                EnableDisableSCMHQ4TypeAnsBoxes(true);
                btnNextMedicalH.Enabled = true;
            }
        }
        /// <summary>
        ///  toggle Yes/No for Answer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbQ4NoMH_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (cbQ4NoMH.Checked)
                {
                    cbQ4YesMH.Checked = false;
                    ClearQuestionTypeMH4AnsBoxes();
                    EnableDisableSCMHQ4TypeAnsBoxes(false);
                    btnNextMedicalH.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Medical History Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //************** New Question ********
        private bool CheckIfMedicalHistoryQuestionYesNoIsSelected(GridViewRowInfo currentRow)
        {
            try
            {
                string _option = currentRow.Cells["QuestionOption"].Value.ToString(); // rgvMedicalHistory.CurrentRow
                if (!string.IsNullOrEmpty(_option))
                {
                    if (txtQ1MH.Text != "")
                    {
                        if (_option == "1" && !cbQ1YesMH.Checked && !cbQ1NoMH.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select an answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            //  this.rgvMedicalHistory.CurrentRow = null;
                            return false;
                        }
                    }
                    else if (txtQ2MH.Text != "")
                    {
                        if (_option == "1" && !cbQ2YesMH.Checked && !cbQ2NoMH.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select an answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            //  this.rgvMedicalHistory.CurrentRow = null;
                            return false;
                        }
                    }
                    else if (txtQ3MH.Text != "")
                    {
                        if (_option == "1" && !cbQ3YesMH.Checked && !cbQ3NoMH.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select an answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            //  this.rgvMedicalHistory.CurrentRow = null;
                            return false;
                        }
                    }
                    else if (txtQ4MH.Text != "")
                    {
                        if (_option == "1" && !cbQ4YesMH.Checked && !cbQ4NoMH.Checked)
                        {
                            HelperFunctions.ShowMessageBox("Please select an answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                            //  this.rgvMedicalHistory.CurrentRow = null;
                            return false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Breath Alcohol", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }

        private bool CheckIfMedicalHistoryQuestionYesIsSelectedAnswerSpecify(GridViewRowInfo currentRow)
        {
            try
            {
                string _option = currentRow.Cells["QuestionOption"].Value.ToString().Trim();
                bool _noAnswer = false;
                if (txtQ1MH.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbQ1YesMH.Checked)) && txtQ1SpecifyMH.Text.Trim() == string.Empty)
                        _noAnswer = true;
                }
                else if (txtQ2MH.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbQ2YesMH.Checked) || (_option == "1" && cbQ2NAMH.Checked)) && txtQ2SpecifyMH.Text.Trim() == string.Empty)
                        _noAnswer = true;
                }
                else if (txtQ3MH.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbQ3YesMH.Checked)) && txtQ3ASpecifyMH.Text.Trim() != string.Empty && txtQ3AAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ3YesMH.Checked)) && txtQ3BSpecifyMH.Text.Trim() != string.Empty && txtQ3BAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ3YesMH.Checked)) && txtQ3CSpecifyMH.Text.Trim() != string.Empty && txtQ3CAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ3YesMH.Checked)) && txtQ3DSpecifyMH.Text.Trim() != string.Empty && txtQ3DAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                }
                else if (txtQ4MH.Text != "")
                {
                    _noAnswer = false;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4ASpecifyMH.Text.Trim() != string.Empty && txtQ4AAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4BSpecifyMH.Text.Trim() != string.Empty && txtQ4BAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4CSpecifyMH.Text.Trim() != string.Empty && txtQ4CAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4DSpecifyMH.Text.Trim() != string.Empty && txtQ4DAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4ESpecifyMH.Text.Trim() != string.Empty && txtQ4EAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                    if ((_option == "2" || (_option == "1" && cbQ4YesMH.Checked)) && txtQ4FSpecifyMH.Text.Trim() != string.Empty && txtQ4FAnswer1MH.Text == string.Empty)
                        _noAnswer = true;
                }
                if (_noAnswer)
                {
                    HelperFunctions.ShowMessageBox("Please specify the answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }
        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNextMedicalH_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //.......... Next Row.........   
                if (!CheckIfMedicalHistoryQuestionYesNoIsSelected(rgvMedicalHistory.CurrentRow))
                    return;
                if (!CheckIfMedicalHistoryQuestionYesIsSelectedAnswerSpecify(rgvMedicalHistory.CurrentRow))
                    return;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                SaveMedicalHistoryQuestionAnswerInDataTable();
                ClearMedicalHistoryQuestionsData();
                int rowIndex = rgvMedicalHistory.Rows.IndexOf((GridViewDataRowInfo)rgvMedicalHistory.CurrentRow);
                rowIndex++;
                if (rowIndex >= rgvMedicalHistory.Rows.Count)
                {
                    rowIndex = 0;
                }
                rgvMedicalHistory.CurrentRow = rgvMedicalHistory.Rows[rowIndex];
                if (rowIndex >= 0)
                {
                    LoadMedicalHistoryQuestion(rowIndex);
                    //...... Get Data from database.......
                    LoadMedicalHistoryAnswerData();
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void rgvMedicalHistory_CellClick(object sender, GridViewCellEventArgs e)
        {

            btnNextMedicalH.Enabled = true;
            try
            {
                string eSignedBy = App.EsignedUser.UserName;
                if (e.RowIndex >= 0)
                {
                    SaveMedicalHistoryQuestionAnswerInDataTable();
                    ClearMedicalHistoryQuestionsData();
                    LoadMedicalHistoryQuestion(e.RowIndex);
                    LoadMedicalHistoryAnswerData();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void LoadMedicalHistoryQuestion(int rowIndex)
        {
            try
            {
                _StudyID = rgvMedicalHistory.Rows[rowIndex].Cells["StudyID"].Value.ToString();
                codeid = Convert.ToInt32(rgvMedicalHistory.Rows[rowIndex].Cells["CodeID"].Value.ToString());
                type = rgvMedicalHistory.Rows[rowIndex].Cells["QuestionType"].Value.ToString();
                _Question = rgvMedicalHistory.Rows[rowIndex].Cells["Question"].Value.ToString();
                _QuestionNumber = Convert.ToInt32(rgvMedicalHistory.Rows[rowIndex].Cells["QuestionNumber"].Value);
                _Option = Convert.ToInt32(rgvMedicalHistory.Rows[rowIndex].Cells["QuestionOption"].Value);
                _SubQuestion = rgvMedicalHistory.Rows[rowIndex].Cells["SubQuestion"].Value.ToString().Split('|');

                bool MedicalHistorySign = OnScreeningHelper.IsMedicalHistorySigned(studyId, ValueOfKey);
                if (!MedicalHistorySign)
                {
                    btnNextMedicalH.Enabled = true;
                }
                if (_QuestionNumber == 1)
                {
                    txtQ1MH.ReadOnly = true;
                    txtQ1MH.Text = _Question;
                    if (_Option == 1)
                    {
                        cbQ1YesMH.Visible = true;
                        cbQ1NoMH.Visible = true;
                        txtQ1SpecifyMH.Enabled = false;
                    }
                    else if (_Option == 2)
                    {
                        txtQ1SpecifyMH.Enabled = true;
                        cbQ1YesMH.Visible = false;
                        cbQ1NoMH.Visible = false;
                    }

                    GBQ1MH.Visible = true;
                    GBQ2MH.Visible = false;
                    GBQ3MH.Visible = false;
                    GBQ4MH.Visible = false;
                    GBQ1MH.Location = new Point(34, 88);
                    GBQ1MH.Size = new Size(535, 320);
                }
                else if (_QuestionNumber == 2)
                {
                    txtQ2MH.ReadOnly = true;
                    txtQ2MH.Text = _Question;
                    if (_Option == 1)
                    {
                        txtQ2SpecifyMH.Enabled = false;
                        cbQ2YesMH.Visible = true;
                        cbQ2NoMH.Visible = true;
                        cbQ2NAMH.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        txtQ2SpecifyMH.Enabled = true;
                        cbQ2YesMH.Visible = false;
                        cbQ2NoMH.Visible = false;
                        cbQ2NAMH.Visible = false;
                    }
                    GBQ2MH.Visible = true;
                    GBQ1MH.Visible = false;
                    GBQ3MH.Visible = false;
                    GBQ4MH.Visible = false;
                    GBQ2MH.Location = new Point(34, 88);
                    GBQ2MH.Size = new Size(535, 320);
                }
                else if (_QuestionNumber == 3)
                {
                    txtQ3MH.ReadOnly = true;
                    txtQ3MH.Text = _Question;
                    if (_Option == 1)
                    {
                        EnableDisableSCMHQ3TypeAnsBoxes(false);
                        cbQ3YesMH.Visible = true;
                        cbQ3NoMH.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        EnableDisableSCMHQ3TypeAnsBoxes(true);
                        cbQ3YesMH.Visible = false;
                        cbQ3NoMH.Visible = false;
                    }
                    for (int i = 0; i < _SubQuestion.Count(); i++)
                    {
                        if (i == 0)
                        {
                            txtQ3ASpecifyMH.ReadOnly = true;
                            txtQ3ASpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 1)
                        {
                            txtQ3BSpecifyMH.ReadOnly = true;
                            txtQ3BSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 2)
                        {
                            txtQ3CSpecifyMH.ReadOnly = true;
                            txtQ3CSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 3)
                        {
                            txtQ3DSpecifyMH.ReadOnly = true;
                            txtQ3DSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                    }
                    GBQ3MH.Visible = true;
                    GBQ2MH.Visible = false;
                    GBQ1MH.Visible = false;
                    GBQ4MH.Visible = false;
                    GBQ3MH.Location = new Point(34, 88);
                    GBQ3MH.Size = new Size(535, 320);
                }
                else if (_QuestionNumber == 4)
                {
                    txtQ4MH.ReadOnly = true;
                    txtQ4MH.Text = _Question;
                    if (_Option == 1)
                    {
                        EnableDisableSCMHQ4TypeAnsBoxes(false);
                        cbQ4YesMH.Visible = true;
                        cbQ4NoMH.Visible = true;
                    }
                    else if (_Option == 2)
                    {
                        EnableDisableSCMHQ4TypeAnsBoxes(true);
                        cbQ4YesMH.Visible = false;
                        cbQ4NoMH.Visible = false;
                    }
                    for (int i = 0; i < _SubQuestion.Count(); i++)
                    {
                        if (i == 0)
                        {
                            txtQ4ASpecifyMH.ReadOnly = true;
                            txtQ4ASpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 1)
                        {
                            txtQ4BSpecifyMH.ReadOnly = true;
                            txtQ4BSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 2)
                        {
                            txtQ4CSpecifyMH.ReadOnly = true;
                            txtQ4CSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 3)
                        {
                            txtQ4DSpecifyMH.ReadOnly = true;
                            txtQ4DSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 4)
                        {
                            txtQ4ESpecifyMH.ReadOnly = true;
                            txtQ4ESpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                        if (i == 5)
                        {
                            txtQ4FSpecifyMH.ReadOnly = true;
                            txtQ4FSpecifyMH.Text = _SubQuestion[i].ToString();
                        }
                    }
                    GBQ4MH.Visible = true;
                    GBQ2MH.Visible = false;
                    GBQ3MH.Visible = false;
                    GBQ1MH.Visible = false;
                    GBQ4MH.Location = new Point(34, 88);
                    GBQ4MH.Size = new Size(535, 320);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void SaveMedicalHistoryQuestionAnswerInDataTable()
        {
            try
            {
                //....................Questions to Insert ..................
                string _subQuestion = string.Empty;
                string _Answer1 = string.Empty;
                string _Answer2 = string.Empty;
                string _Answer3 = string.Empty;
                string _comments = string.Empty;
                if (dtMedicalHistoryAns == null)
                {
                    DesigndtMedicalHistoryQuestionsAnsTable();
                }

                if (!string.IsNullOrEmpty(txtQ1MH.Text.Trim()))
                {
                    _Question = txtQ1MH.Text;
                    if (cbQ1YesMH.Checked)
                    {
                        _Option = 1;
                    }
                    else if (cbQ1NoMH.Checked)
                    {
                        _Option = 0;
                    }
                    else
                    {
                        _Option = -1;
                    }
                    _comments = txtMHQ1Comment.Text.Trim();
                    _QuestionNumber = 1;
                    _Answer1 = txtQ1SpecifyMH.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    _subQuestion = string.Format(string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty);
                    AddMedicalHistoryQuestionAnsToTable(codeid, _Option, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ2MH.Text.Trim()))
                {
                    _Question = txtQ2MH.Text;

                    if (cbQ2NoMH.Checked)
                    {
                        _Option = 0;
                    }
                    else if (cbQ2YesMH.Checked)
                    {
                        _Option = 1;
                    }
                    else if (cbQ2NAMH.Checked)
                    {
                        _Option = 2;
                    }
                    else
                    {
                        _Option = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 2;

                    _subQuestion = string.Format(string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty + "|" + string.Empty);
                    _Answer1 = txtQ2SpecifyMH.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    _comments = txtMHQ2Comment.Text.Trim();
                    AddMedicalHistoryQuestionAnsToTable(codeid, _Option, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ3MH.Text.Trim()))
                {
                    _Question = txtQ3MH.Text;
                    if (cbQ3YesMH.Checked)
                    {
                        _Option = 1;
                    }
                    else if (cbQ3NoMH.Checked)
                    {
                        _Option = 0;
                    }
                    else
                    {
                        _Option = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 3;
                    _subQuestion = txtQ3ASpecifyMH.Text + "|" + txtQ3BSpecifyMH.Text + "|" + txtQ3CSpecifyMH.Text + "|" + txtQ3DSpecifyMH.Text;
                    _Answer1 = txtQ3AAnswer1MH.Text + "|" + txtQ3BAnswer1MH.Text + "|" + txtQ3CAnswer1MH.Text + "|" + txtQ3DAnswer1MH.Text;
                    _Answer2 = "";
                    _Answer3 = "";
                    _comments = txtMHQ3Comment.Text.Trim();
                    AddMedicalHistoryQuestionAnsToTable(codeid, _Option, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else if (!string.IsNullOrEmpty(txtQ4MH.Text.Trim()))
                {
                    _Question = txtQ4MH.Text;
                    if (cbQ4YesMH.Checked)
                    {
                        _Option = 1;
                    }
                    else if (cbQ4NoMH.Checked)
                    {
                        _Option = 0;
                    }
                    else
                    {
                        _Option = -1;
                        //HelperFunctions.ShowMessageBox("Please select answer.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        //return;
                    }
                    _QuestionNumber = 4;
                    _comments = txtMHQ4Comment.Text.Trim();
                    _subQuestion = txtQ4ASpecifyMH.Text + "|" + txtQ4BSpecifyMH.Text + "|" + txtQ4CSpecifyMH.Text + "|" + txtQ4DSpecifyMH.Text + "|" + txtQ4ESpecifyMH.Text + "|" + txtQ4FSpecifyMH.Text;
                    _Answer1 = txtQ4AAnswer1MH.Text + "|" + txtQ4BAnswer1MH.Text + "|" + txtQ4CAnswer1MH.Text + "|" + txtQ4DAnswer1MH.Text + "|" + txtQ4EAnswer1MH.Text + "|" + txtQ4FAnswer1MH.Text;
                    _Answer2 = txtQ4AAnswer2MH.Text + "|" + txtQ4BAnswer2MH.Text + "|" + txtQ4CAnswer2MH.Text + "|" + txtQ4DAnswer2MH.Text + "|" + txtQ4EAnswer2MH.Text + "|" + txtQ4FAnswer2MH.Text;
                    _Answer3 = txtQ4AAnswer3MH.Text + "|" + txtQ4BAnswer3MH.Text + "|" + txtQ4CAnswer3MH.Text + "|" + txtQ4DAnswer3MH.Text + "|" + txtQ4EAnswer3MH.Text + "|" + txtQ4FAnswer3MH.Text;
                    AddMedicalHistoryQuestionAnsToTable(codeid, _Option, _Question, _Answer1, _Answer2, _Answer3, _comments);
                }
                else
                {
                    if (dtMedicalHistoryAns.Rows.Count != 0)
                        HelperFunctions.ShowMessageBox("Please select a question first.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void ClearMedicalHistoryQuestionsData()
        {
            cbQ1YesMH.CheckStateChanged -= new System.EventHandler(cbQ1YesMH_CheckStateChanged);
            cbQ1NoMH.CheckStateChanged -= new System.EventHandler(cbQ1NoMH_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ1MH);

            cbQ1YesMH.CheckStateChanged += new System.EventHandler(cbQ1YesMH_CheckStateChanged);
            cbQ1NoMH.CheckStateChanged += new System.EventHandler(cbQ1NoMH_CheckStateChanged);
            cbQ2YesMH.CheckStateChanged -= new System.EventHandler(cbQ2YesMH_CheckStateChanged);
            cbQ2NoMH.CheckStateChanged -= new System.EventHandler(cbQ2NoMH_CheckStateChanged);
            cbQ2NAMH.CheckStateChanged -= new System.EventHandler(cbQ2NAMH_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ2MH);

            cbQ2YesMH.CheckStateChanged += new System.EventHandler(cbQ2YesMH_CheckStateChanged);
            cbQ2NoMH.CheckStateChanged += new System.EventHandler(cbQ2NoMH_CheckStateChanged);
            cbQ2NAMH.CheckStateChanged += new System.EventHandler(cbQ2NAMH_CheckStateChanged);
            cbQ3YesMH.CheckStateChanged -= new System.EventHandler(cbQ3YesMH_CheckStateChanged);
            cbQ3NoMH.CheckStateChanged -= new System.EventHandler(cbQ3NoMH_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ3MH);
            cbQ3YesMH.CheckStateChanged += new System.EventHandler(cbQ3YesMH_CheckStateChanged);
            cbQ3NoMH.CheckStateChanged += new System.EventHandler(cbQ3NoMH_CheckStateChanged);
            cbQ4YesMH.CheckStateChanged -= new System.EventHandler(cbQ4YesMH_CheckStateChanged);
            cbQ4NoMH.CheckStateChanged -= new System.EventHandler(cbQ4NoMH_CheckStateChanged);
            CommonHelpers.ResetControls(GBQ4MH);
            cbQ4YesMH.CheckStateChanged += new System.EventHandler(cbQ4YesMH_CheckStateChanged);
            cbQ4NoMH.CheckStateChanged += new System.EventHandler(cbQ4NoMH_CheckStateChanged);
        }
        private void DesigndtMedicalHistoryQuestionsAnsTable()
        {
            dtMedicalHistoryAns = new DataTable();
            dtMedicalHistoryAns.Columns.Add("CodeID");
            dtMedicalHistoryAns.Columns.Add("Question");
            dtMedicalHistoryAns.Columns.Add("YesNo");
            dtMedicalHistoryAns.Columns.Add("Answer1");
            dtMedicalHistoryAns.Columns.Add("Answer2");
            dtMedicalHistoryAns.Columns.Add("Answer3");
            dtMedicalHistoryAns.Columns.Add("Comments");
        }
        private void LoadMedicalHistoryAnswerData()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    #region From Local Datatable saved when user selected answers
                    if (dtMedicalHistoryAns == null)
                        DesigndtMedicalHistoryQuestionsAnsTable();
                    DataRow dr = dtMedicalHistoryAns.Select("CodeID='" + rgvMedicalHistory.CurrentRow.Cells["CodeID"].Value.ToString() + "'").FirstOrDefault();
                    if (dr == null)
                    {
                        string _comments = string.Empty;
                        #region From Database 
                        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                        {
                            connection.Open();
                            //string checkExist = string.Format(@"SELECT COUNT(*) From [dbo].[MedicalHistoryBySubjectKey] WHERE StudyID='" + studyId + "' and SubjectKey='" + _subjectKey + "'");
                            //SqlCommand cmd = new SqlCommand(checkExist, connection);
                            //int count = (int)cmd.ExecuteScalar();
                            //if (count > 0)
                            //{
                            ////string _genderMHQ = string.Empty;
                            ////if (txtGenders.Text == "Male")
                            ////    _genderMHQ = ScreeningSetupHelper.MMH;
                            ////else
                            ////    _genderMHQ = ScreeningSetupHelper.FMH;
                            string query = string.Format(@"SELECT tb2.YesNo ,tb2.Answer1 ,tb2.Answer2 ,tb2.Answer3,tb2.Comments  FROM [dbo].[ScreeningEvaluation]  tb1 
                                                   FULL OUTER JOIN  [dbo].[MedicalHistoryBySubjectKey]  tb2
                                                    ON tb2.CodeID=tb1.CodeID 
                                                    WHERE tb1.StudyID='" + _StudyID + "' AND tb2.SubjectKey='" + _subjectKey + "' AND tb2.CodeID='" + codeid + "'"); // AND tb1.QuestionType IN('" + _genderMHQ + "','" + ScreeningSetupHelper.MH + "')
                            SqlCommand cmdMale = new SqlCommand(query, connection);
                            SqlDataReader sdr = cmdMale.ExecuteReader();
                            if (sdr.Read())
                            {
                                string _yesNoNA = string.Empty;
                                if (sdr["YesNo"].ToString().Equals("0"))
                                    _yesNoNA = "False";
                                else if (sdr["YesNo"].ToString().Equals("1"))
                                    _yesNoNA = "True";
                                else if (sdr["YesNo"].ToString().Equals("2"))
                                    _yesNoNA = "NA";
                                else
                                    _yesNoNA = string.Empty;
                                int _yesnoOption = -1;
                                _comments = sdr["Comments"].ToString();
                                int.TryParse(sdr["YesNo"].ToString(), out _yesnoOption);
                                if (!string.IsNullOrEmpty(txtQ1MH.Text.Trim()))
                                {
                                    AddMedicalHistoryQuestionAnsToTable(codeid, _yesnoOption, txtQ1MH.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                    //LoadMedicalHistoryQuestion1Ans(_yesNoNA, sdr["Answer1"].ToString());
                                }
                                else if (!string.IsNullOrEmpty(txtQ2MH.Text.Trim()))
                                {
                                    AddMedicalHistoryQuestionAnsToTable(codeid, _yesnoOption, txtQ2MH.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                    // LoadMedicalHistoryQuestion2Ans(_yesNoNA, sdr["Answer1"].ToString());
                                }
                                else if (!string.IsNullOrEmpty(txtQ3MH.Text.Trim()))
                                {
                                    AddMedicalHistoryQuestionAnsToTable(codeid, _yesnoOption, txtQ3MH.Text.Trim(), sdr["Answer1"].ToString(), "", "", _comments);
                                    // LoadMedicalHistoryQuestion3Ans(_yesNoNA, sdr["Answer1"].ToString());
                                }
                                else if (!string.IsNullOrEmpty(txtQ4MH.Text.Trim()))
                                {
                                    AddMedicalHistoryQuestionAnsToTable(codeid, _yesnoOption, txtQ4MH.Text.Trim(), sdr["Answer1"].ToString(), sdr["Answer2"].ToString(), sdr["Answer3"].ToString(), _comments);
                                    //LoadMedicalHistoryQuestion4Ans(_yesNoNA, sdr["Answer1"].ToString(), sdr["Answer2"].ToString(), sdr["Answer3"].ToString());
                                }
                            }
                            // }
                            connection.Close();
                        }
                        #endregion
                    }
                    dr = dtMedicalHistoryAns.Select("CodeID='" + rgvMedicalHistory.CurrentRow.Cells["CodeID"].Value.ToString() + "'").FirstOrDefault();
                    string _yesNO = string.Empty;
                    if (dr != null)
                    {
                        _yesNO = dr["YesNo"].ToString();
                        string ans1 = dr["Answer1"].ToString();
                        string ans2 = dr["Answer2"].ToString();
                        string ans3 = dr["Answer3"].ToString();
                        if (!string.IsNullOrEmpty(txtQ1MH.Text.Trim()))
                        {
                            LoadMedicalHistoryQuestion1Ans(_yesNO, ans1);
                            txtMHQ1Comment.Text = dr["Comments"].ToString();
                        }
                        else if (!string.IsNullOrEmpty(txtQ2MH.Text.Trim()))
                        {
                            txtMHQ2Comment.Text = dr["Comments"].ToString();
                            LoadMedicalHistoryQuestion2Ans(_yesNO, ans1);
                        }
                        else if (!string.IsNullOrEmpty(txtQ3MH.Text.Trim()))
                        {
                            txtMHQ3Comment.Text = dr["Comments"].ToString();
                            LoadMedicalHistoryQuestion3Ans(_yesNO, ans1);
                        }
                        else if (!string.IsNullOrEmpty(txtQ4MH.Text.Trim()))
                        {
                            txtMHQ4Comment.Text = dr["Comments"].ToString();
                            LoadMedicalHistoryQuestion4Ans(_yesNO, ans1, ans2, ans3);
                        }
                    }
                    #endregion

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadMedicalHistoryQuestion1Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ1MH.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNoQ1.CheckStateChanged -= new System.EventHandler(this.cbNoQ1_CheckStateChanged);
                        cbQ1NoMH.Checked = true;
                        // this.cbNoQ1.CheckStateChanged += new System.EventHandler(this.cbNoQ1_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ1.CheckStateChanged -= new System.EventHandler(this.cbYesQ1_CheckStateChanged);
                        cbQ1YesMH.Checked = true;
                        // this.cbYesQ1.CheckStateChanged += new System.EventHandler(this.cbYesQ1_CheckStateChanged);
                    }

                    txtQ1SpecifyMH.Text = ans;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadMedicalHistoryQuestion2Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ2MH.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNo2Q2.CheckStateChanged -= new System.EventHandler(this.cbNo2Q2_CheckStateChanged);
                        cbQ2NoMH.Checked = true;
                        // this.cbNo2Q2.CheckStateChanged += new System.EventHandler(this.cbNo2Q2_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYes2Q2.CheckStateChanged -= new System.EventHandler(this.cbYes2Q2_CheckStateChanged);
                        cbQ2YesMH.Checked = true;
                        // this.cbYes2Q2.CheckStateChanged += new System.EventHandler(this.cbYes2Q2_CheckStateChanged);
                    }
                    else
                    {
                        // this.cbNAQ2.CheckStateChanged -= new System.EventHandler(this.cbNAQ2_CheckStateChanged);
                        cbQ2NAMH.Checked = true;
                        // this.cbNAQ2.CheckStateChanged += new System.EventHandler(this.cbNAQ2_CheckStateChanged);
                    }
                    txtQ2SpecifyMH.Text = ans;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadMedicalHistoryQuestion3Ans(string yesNo, string ans)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ3MH.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        // this.cbNoQ3.CheckStateChanged -= new System.EventHandler(this.cbNoQ3_CheckStateChanged);
                        cbQ3NoMH.Checked = true;
                        // this.cbNoQ3.CheckStateChanged += new System.EventHandler(this.cbNoQ3_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ3.CheckStateChanged -= new System.EventHandler(this.cbYesQ3_CheckStateChanged);
                        cbQ3YesMH.Checked = true;
                        // this.cbYesQ3.CheckStateChanged += new System.EventHandler(this.cbYesQ3_CheckStateChanged);
                    }
                    string[] AnswerQ3 = ans.Split('|');
                    if (AnswerQ3.Length == 1)
                    {
                        txtQ3AAnswer1MH.Text = AnswerQ3[0].ToString();
                    }
                    if (AnswerQ3.Length == 2)
                    {
                        txtQ3AAnswer1MH.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer1MH.Text = AnswerQ3[1].ToString();
                    }
                    if (AnswerQ3.Length == 3)
                    {
                        txtQ3AAnswer1MH.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer1MH.Text = AnswerQ3[1].ToString();
                        txtQ3CAnswer1MH.Text = AnswerQ3[2].ToString();
                    }
                    if (AnswerQ3.Length == 4)
                    {
                        txtQ3AAnswer1MH.Text = AnswerQ3[0].ToString();
                        txtQ3BAnswer1MH.Text = AnswerQ3[1].ToString();
                        txtQ3CAnswer1MH.Text = AnswerQ3[2].ToString();
                        txtQ3DAnswer1MH.Text = AnswerQ3[3].ToString();
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadMedicalHistoryQuestion4Ans(string yesNo, string ans1, string ans2, string ans3)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtQ4MH.Text.Trim()))
                {
                    if (yesNo.Equals("False"))
                    {
                        //this.cbNoQ4.CheckStateChanged -= new System.EventHandler(this.cbNoQ4_CheckStateChanged);
                        cbQ4NoMH.Checked = true;
                        // this.cbNoQ4.CheckStateChanged += new System.EventHandler(this.cbNoQ4_CheckStateChanged);
                    }
                    else if (yesNo.Equals("True"))
                    {
                        // this.cbYesQ4.CheckStateChanged -= new System.EventHandler(this.cbYesQ4_CheckStateChanged);
                        cbQ4YesMH.Checked = true;
                        // this.cbYesQ4.CheckStateChanged += new System.EventHandler(this.cbYesQ4_CheckStateChanged);
                    }
                    _QuestionNumber = 4;
                    //...Answer 1
                    string[] Answer1Q4 = ans1.Split('|');
                    if (Answer1Q4.Length == 1)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                    }
                    if (Answer1Q4.Length == 2)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1MH.Text = Answer1Q4[1].ToString();
                    }
                    if (Answer1Q4.Length == 3)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1MH.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1MH.Text = Answer1Q4[2].ToString();
                    }
                    if (Answer1Q4.Length == 4)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1MH.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1MH.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1MH.Text = Answer1Q4[3].ToString();
                    }
                    if (Answer1Q4.Length == 5)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1MH.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1MH.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1MH.Text = Answer1Q4[3].ToString();
                        txtQ4EAnswer1MH.Text = Answer1Q4[4].ToString();
                    }
                    if (Answer1Q4.Length == 6)
                    {
                        txtQ4AAnswer1MH.Text = Answer1Q4[0].ToString();
                        txtQ4BAnswer1MH.Text = Answer1Q4[1].ToString();
                        txtQ4CAnswer1MH.Text = Answer1Q4[2].ToString();
                        txtQ4DAnswer1MH.Text = Answer1Q4[3].ToString();
                        txtQ4EAnswer1MH.Text = Answer1Q4[4].ToString();
                        txtQ4FAnswer1MH.Text = Answer1Q4[5].ToString();
                    }

                    //...Answer 2

                    string[] Answer2Q4 = ans2.Split('|');
                    if (Answer2Q4.Length == 1)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                    }
                    if (Answer2Q4.Length == 2)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2MH.Text = Answer2Q4[1].ToString();
                    }
                    if (Answer2Q4.Length == 3)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2MH.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2MH.Text = Answer2Q4[2].ToString();
                    }
                    if (Answer2Q4.Length == 4)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2MH.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2MH.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2MH.Text = Answer2Q4[3].ToString();
                    }
                    if (Answer2Q4.Length == 5)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2MH.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2MH.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2MH.Text = Answer2Q4[3].ToString();
                        txtQ4EAnswer2MH.Text = Answer2Q4[4].ToString();
                    }
                    if (Answer2Q4.Length == 6)
                    {
                        txtQ4AAnswer2MH.Text = Answer2Q4[0].ToString();
                        txtQ4BAnswer2MH.Text = Answer2Q4[1].ToString();
                        txtQ4CAnswer2MH.Text = Answer2Q4[2].ToString();
                        txtQ4DAnswer2MH.Text = Answer2Q4[3].ToString();
                        txtQ4EAnswer2MH.Text = Answer2Q4[4].ToString();
                        txtQ4FAnswer2MH.Text = Answer2Q4[5].ToString();
                    }

                    //...Answer 3
                    string[] Answer3Q4 = ans3.Split('|');
                    if (Answer3Q4.Length == 1)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                    }
                    if (Answer3Q4.Length == 2)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3MH.Text = Answer3Q4[1].ToString();
                    }
                    if (Answer3Q4.Length == 3)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3MH.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3MH.Text = Answer3Q4[2].ToString();
                    }
                    if (Answer3Q4.Length == 4)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3MH.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3MH.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3MH.Text = Answer3Q4[3].ToString();
                    }
                    if (Answer3Q4.Length == 5)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3MH.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3MH.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3MH.Text = Answer3Q4[3].ToString();
                        txtQ4EAnswer3MH.Text = Answer3Q4[4].ToString();
                    }
                    if (Answer3Q4.Length == 6)
                    {
                        txtQ4AAnswer3MH.Text = Answer3Q4[0].ToString();
                        txtQ4BAnswer3MH.Text = Answer3Q4[1].ToString();
                        txtQ4CAnswer3MH.Text = Answer3Q4[2].ToString();
                        txtQ4DAnswer3MH.Text = Answer3Q4[3].ToString();
                        txtQ4EAnswer3MH.Text = Answer3Q4[4].ToString();
                        txtQ4FAnswer3MH.Text = Answer3Q4[5].ToString();
                    }


                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void AddMedicalHistoryQuestionAnsToTable(int codeid, int option, string question, string ans1, string ans2, string ans3, string comments)
        {
            try
            {
                if (option == -1 && (string.IsNullOrEmpty(ans1) && string.IsNullOrEmpty(ans2) && string.IsNullOrEmpty(ans3)))
                    return;
                string _yesNoNA = string.Empty;
                if (option == 0)
                    _yesNoNA = "False";
                else if (option == 1)
                    _yesNoNA = "True";
                else if (option == 2)
                    _yesNoNA = "NA";
                else
                    _yesNoNA = string.Empty;
                if (dtMedicalHistoryAns != null && !string.IsNullOrEmpty(question))
                {
                    DataRow dr = dtMedicalHistoryAns.Select("CodeID='" + codeid + "'").FirstOrDefault();
                    if (dr == null)
                    {
                        _CounterAnsweredQuestionsMH++;
                        dr = dtMedicalHistoryAns.NewRow();
                        dr["CodeID"] = codeid;
                        dr["YesNo"] = _yesNoNA;
                        dr["Answer1"] = ans1;
                        dr["Answer2"] = ans2;
                        dr["Answer3"] = ans3;
                        dr["Question"] = question;
                        dr["Comments"] = comments;
                        dtMedicalHistoryAns.Rows.Add(dr);
                    }
                    else
                    {
                        dr["CodeID"] = codeid;
                        dr["YesNo"] = _yesNoNA;
                        dr["Answer1"] = ans1;
                        dr["Answer2"] = ans2;
                        dr["Answer3"] = ans3;
                        dr["Question"] = question;
                        dr["Comments"] = comments;
                    }
                    dtMedicalHistoryAns.AcceptChanges();
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// E-Sign Medical History
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignMH_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if (!ValidateAllHMQuestionsAns())
                //    return;
                if (SaveMedicalHistoryData("MedicalHistoryQuestionProceed", SubjectStatusCode.Status.Proceed))
                {
                    _CounterAnsweredQuestionsMH = 0;
                    dtMedicalHistoryAns.Clear();
                    HelperFunctions.ShowMessageBox("Medical History Questions Saved Successfully. Subject can proceed ahead.", "creening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Medical History Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private bool ValidateAllHMQuestionsAns()
        {
            try
            {
                foreach (var row in rgvMedicalHistory.Rows)
                {
                    if (!CheckIfMedicalHistoryQuestionYesNoIsSelected(row))
                        return false;
                    if (!CheckIfMedicalHistoryQuestionYesIsSelectedAnswerSpecify(row))
                        return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private bool SaveMedicalHistoryData(string actionAt, SubjectStatusCode.Status subjectStatus)
        {
            try
            {
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string eSignedBy = App.EsignedUser.UserName;
                string _Question = string.Empty;
                string _SubQuestion = string.Empty;
                string _Answer1 = string.Empty;
                string _Answer2 = string.Empty;
                string _Answer3 = string.Empty;
                bool _isMHSigned = OnScreeningHelper.IsMedicalHistorySigned(studyId, ValueOfKey);
                if (_isMHSigned)
                {
                    if (HelperFunctions.ShowMessageBox("Medical history has already been saved. Do you still want to save(Y/N)?", "Medical History", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return false;
                }
                SaveMedicalHistoryQuestionAnswerInDataTable();
                if (!_isMHSigned && _CounterAnsweredQuestionsMH != rgvMedicalHistory.Rows.Count)
                {
                    HelperFunctions.ShowMessageBox("Not all of the questions has been answered.", "Medical History Questions", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return false;
                }
                if (dtMedicalHistoryAns.Rows.Count > 0)
                {
                    bool? yesNo = null;
                    bool _IsInsert = false;
                    using (DbConnection dbCon = new DbConnection())
                    {
                        dbCon.OpenConnection();
                        tabName = "Medical History";
                        string reason = string.Format("This question has been asked and signed by:'" + " " + App.EsignedUser.UserName + "'");
                        if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        {
                            return false;
                        }
                        this.Cursor = Cursors.WaitCursor;
                        dbCon.BeginTransaction();
                        foreach (DataRow dr in dtMedicalHistoryAns.Rows)
                        {
                            string checkExist = "SELECT * FROM [dbo].[MedicalHistoryBySubjectKey] WHERE StudyID=@studyId AND SubjectKey=@subjectKey AND CodeID=@codeId";
                            SqlParameter sp1 = new SqlParameter("@studyId", studyId);
                            SqlParameter sp2 = new SqlParameter("@subjectKey", _subjectKey);
                            SqlParameter sp3 = new SqlParameter("@codeId", dr["CodeID"]);


                            SqlParameter[] existParams = new SqlParameter[] { sp1, sp2, sp3 };

                            DataTable dtExist = dbCon.ExecuteSelectQuery(checkExist, existParams, false);
                            //  _Option = int.Parse(dr["YesNo"].ToString());
                            if (dr["YesNo"].ToString().Equals("True"))
                            {
                                yesNo = true;
                            }
                            else if (dr["YesNo"].ToString().Equals("False"))
                            {
                                yesNo = false;
                            }
                            else //if (_Option == 2)
                            {
                                yesNo = null;
                            }
                            SqlParameter sp4 = new SqlParameter("@yesno", yesNo);
                            SqlParameter sp5 = new SqlParameter("@answer1", dr["Answer1"]);
                            SqlParameter sp6 = new SqlParameter("@answer2", dr["Answer2"]);
                            SqlParameter sp7 = new SqlParameter("@answer3", dr["Answer3"]);
                            SqlParameter sp8 = new SqlParameter("@modifiedby", eSignedBy);
                            SqlParameter sp9 = new SqlParameter("@modifeddate", DateTime.Now);
                            SqlParameter sp10 = new SqlParameter("@esignedby", eSignedBy);
                            SqlParameter sp11 = new SqlParameter("@esignedDate", DateTime.Now);
                            SqlParameter sp12 = new SqlParameter("@comments", dr["Comments"]);
                            if (dtExist.Rows.Count > 0)
                            {
                                SqlParameter[] updateParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10, sp11, sp12 };
                                dbCon.ExecuteUpdateQuery("spUpdateMedicalHistoryQuestionBySubject", updateParams, true);
                            }
                            else
                            {
                                _IsInsert = true;
                                SqlParameter[] insertParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10, sp11, sp12 };
                                dbCon.ExecuteInsertQuery("spInsertMedicalHistoryQuestionBySubject", insertParams, true);
                            }
                        }
                        if (_IsInsert)
                        {
                            string detail = "medical history data have been added.";
                            App.EsignedUser.AddAudit(dbCon, "Screening-Medical History", EnumModules.AuditAction.Insert.ToString(), detail, DateTime.Now, "", "");
                        }
                        //save subject's status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(dbCon, studyId, _subjectKey.ToString(), "MedicalHistoryBySubjectKey", pgvMedicalHistory.Name, "MedicalHistoryProceed", SubjectStatusCode.Status.Proceed, txtMHCordinatorComment.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(dbCon, studyId, _subjectKey, "OnScreeningMedicalHistory", SubjectStatusCode.Status.Proceed, txtMHCordinatorComment.Text.Trim());
                        dbCon.CommitTransaction();
                        dbCon.CloseConnection();

                    }
                    LoadDataBySelectedTab();
                    //CheckeSign(ValueOfKey);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("No data to save.", "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }

            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
                return false;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
            return true;
        }

        // ************
        private void ClearQuestionTypeMH4AnsBoxes()
        {
            txtQ4AAnswer1MH.Clear();
            txtQ4BAnswer1MH.Clear();
            txtQ4CAnswer1MH.Clear();
            txtQ4DAnswer1MH.Clear();
            txtQ4EAnswer1MH.Clear();
            txtQ4FAnswer1MH.Clear();

            txtQ4AAnswer2MH.Clear();
            txtQ4BAnswer2MH.Clear();
            txtQ4CAnswer2MH.Clear();
            txtQ4DAnswer2MH.Clear();
            txtQ4EAnswer2MH.Clear();
            txtQ4FAnswer2MH.Clear();

            txtQ4AAnswer3MH.Clear();
            txtQ4BAnswer3MH.Clear();
            txtQ4CAnswer3MH.Clear();
            txtQ4DAnswer3MH.Clear();
            txtQ4EAnswer3MH.Clear();
            txtQ4FAnswer3MH.Clear();
        }
        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>


        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>


        /// <summary>
        /// Clear Grid Selection
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnClearMH_Click(object sender, EventArgs e)
        {
            ClearMedicalHistoryControls();
        }

        /// <summary>
        /// Clear all controls After Subject Change
        /// </summary>
        private void ClearMedicalHistoryControls()
        {
            rgvMedicalHistory.ClearSelection();
            ResetSCMedicalHistoryAnswerFields();
            GBQ1MH.Visible = false;
            GBQ2MH.Visible = false;
            GBQ3MH.Visible = false;
            GBQ4MH.Visible = false;
        }
        private void ResetSCMedicalHistoryAnswerFields()
        {
            //...... Medical History .......
            foreach (Control ctrl in pnlMHQ1.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlMHQ2.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlMHQ3.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
            foreach (Control ctrl in pnlMHQ4.PanelContainer.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
        }

        /// <summary>
        /// Timer To handle scanning Medical History before Retreive subject information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MedicalHistoryTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                MedicalHistoryTimer.Stop();
                if (string.IsNullOrEmpty(txtScanMedicalHistory.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanMedicalHistory.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Medical History", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanMedicalHistory.ResetText();
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanMedicalHistory_TextChanged(object sender, EventArgs e)
        {
            MedicalHistoryTimer.Interval = (700);
            MedicalHistoryTimer.Enabled = true;
            MedicalHistoryTimer.Start();
        }
        private void txtFailedMH_Click(object sender, EventArgs e)
        {
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    tabName = "Medical History";
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    else
                    {
                        using (DbConnection db = new DbConnection())
                        {
                            db.OpenConnection();
                            string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[MedicalHistoryBySubjectKey] WHERE StudyID = '" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                            DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                            db.BeginTransaction();
                            if (_dtExist.Rows.Count > 0)
                            {
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[MedicalHistoryBySubjectKey] SET SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,eSignedBy=@eSignedBy,eSignedAt=@eSignedAt WHERE StudyID = '" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                                List<SqlParameter> _params = new List<SqlParameter>();
                                _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                                _params.Add(new SqlParameter("@CordinatorComment", txtMHCordinatorComment.Text));
                                _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                                _params.Add(new SqlParameter("@eSignedAt", DateTime.Now));
                                db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                            }
                            else
                            {
                                string InsertQuery = string.Format(@"INSERT INTO [dbo].[MedicalHistoryBySubjectKey]
                                 (StudyID,SubjectKey,SubjectStatus,Comments,eSignedBy,eSignedAt) VALUES
                                (@studyID,@subjectkey,@SubjectStatus,@CordinatorComment,@eSignedBy,@eSignedAt)");

                                List<SqlParameter> _params = new List<SqlParameter>();
                                _params.Add(new SqlParameter("@studyID", studyId));
                                _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                                _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                                _params.Add(new SqlParameter("@CordinatorComment", txtMHCordinatorComment.Text));
                                _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                                _params.Add(new SqlParameter("@eSignedAt", DateTime.Now));
                                db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                            }
                            // .... Subject Status..........................
                            OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningMedicalHistory", SubjectStatusCode.Status.Fail, txtMHCordinatorComment.Text);
                            OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "MedicalHistoryBySubjectKey", pgvMedicalHistory.Name, "MedicalHistoryFail", SubjectStatusCode.Status.Fail, txtMHCordinatorComment.Text, App.EsignedUser.UserName);
                            db.CommitTransaction();
                            lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                            lblSubjectStatus.Text = "Failed";


                            btneSignMH.Enabled = false;
                            DisableAllControlsAfterSubjectDropMedicalHistory();
                            pgvConsent.Image = null;
                            pgvPCF.Image = null;
                            pgvVCF.Image = null;
                            pgvICF.Image = null;

                            pgvInfluenza.Image = null;
                            pgvIDVerfication.Image = null;

                            pgvScreeningEvaluations.Image = null;
                            pgvDemographics.Image = null;
                            Image Failed = new Bitmap(Properties.Resources.FailedT1);
                            pgvMedicalInterview.Image = Failed;
                            pgvMedicalHistory.Image = Failed;
                            Image Locked = new Bitmap(Properties.Resources.lock_closed);
                            pgvInfluenza.Image = Locked;
                            pgvIDVerfication.Image = Locked;
                            pgvPCF.Image = Locked;
                            pgvVCF.Image = Locked;
                            pgvConsent.Image = Locked;
                            pgvDemographics.Image = Locked;
                            pgvICF.Image = Locked;
                            pgvScreeningEvaluations.Image = Locked;
                        }
                    }



                }
                else
                {

                    HelperFunctions.ShowMessageBox("Please enter Comment in the comment Box for Fail", "Comment", MessageBoxButtons.OK, RadMessageIcon.Info);

                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Medical History Dropped", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        #endregion
        private void pgvMedicalInterviews_SelectedPageChanged(object sender, EventArgs e)
        {
            // LockAccess(pgvMedicalInterviews.SelectedPage);

            //switch (pgvMedicalInterviews.SelectedPage.Name)
            //{
            //    case "pgvDemographics":
            //        CheckeSignDemographic(ValueOfKey);
            //        break;
            //    case "pgvScreeningEvaluations":
            //        CheckeSignScreeningEvaluation(ValueOfKey);
            //        break;
            //    case "pgvMedicalHistory":
            //        CheckeSignMEdicalHistory(ValueOfKey);
            //        break;
            //    default:
            //        break;
            //}
            pgvOnScreeningPages_SelectedPageChanged(null, null);
        }

        #endregion ..................... End Medical Interview............

        //****************************** Height & Weight ******************************
        #region Height & Weight 
        private void txtHWWpounds_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtHWWKG_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtHWHCM_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtHWHIN_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }
        private void txtHWWpounds_TextChanged(object sender, EventArgs e)
        {
            if (!ActiveControl.Parent.Name.Equals("txtHWWpounds"))
                return;
            if (string.IsNullOrEmpty(txtHWWpounds.Text.Trim()))
            {
                txtHWWKG.Clear();
                return;
            }
            double pound = default(double);
            double kg = default(double);
            if (double.TryParse(txtHWWpounds.Text.Trim(), out pound))
            {
                kg = CommonHelpers.GetKg(pound);
                string _value = CommonHelpers.AddDecimals(kg.ToString(), 1);
                if (!string.IsNullOrEmpty(_value))
                    txtHWWKG.Text = _value;
                //  txtHWWKG.Text = kg.ToString();
            }
            Dictionary<string, string> _weightRange = CommonHelpers.GetWeightRangeForStudy(studyId);
            double _minVal = default(double); double _maxVal = default(double);
            if (double.TryParse(_weightRange["MinWeight"], out _minVal) && double.TryParse(_weightRange["MaxWeight"], out _maxVal))
            {
                if (kg < _minVal || kg > _maxVal)
                {
                    txtHWWpounds.ForeColor = System.Drawing.Color.Red;
                    txtHWWKG.ForeColor = System.Drawing.Color.Red;
                }
                else
                {
                    txtHWWpounds.ForeColor = System.Drawing.Color.Green;
                    txtHWWKG.ForeColor = System.Drawing.Color.Green;
                }
            }
        }

        private void txtHWWKG_TextChanged(object sender, EventArgs e)
        {
            CalculateBMI();
            if (!ActiveControl.Parent.Name.Equals("txtHWWKG"))
                return;
            if (string.IsNullOrEmpty(txtHWWKG.Text.Trim()))
            {
                txtHWWpounds.Clear();
                return;
            }
            double kg = default(double);
            if (double.TryParse(txtHWWKG.Text.Trim(), out kg))
            {
                string _value = CommonHelpers.AddDecimals(CommonHelpers.GetPound(kg).ToString(), 1);
                if (!string.IsNullOrEmpty(_value))
                    txtHWWpounds.Text = _value;
            }
        }

        private void txtHWHCM_TextChanged(object sender, EventArgs e)
        {
            CalculateBMI();
            if (!ActiveControl.Parent.Name.Equals("txtHWHCM"))
                return;
            if (string.IsNullOrEmpty(txtHWHCM.Text.Trim()))
            {
                txtHWHIN.Clear(); return;
            }
            double cm = default(double);
            if (double.TryParse(txtHWHCM.Text.Trim(), out cm))
            {
                string _value = CommonHelpers.AddDecimals(CommonHelpers.GetInches(cm).ToString(), 1);
                if (!string.IsNullOrEmpty(_value))
                    txtHWHIN.Text = _value;
            }
        }

        private void CalculateBMI()
        {
            txtHWBMI.Clear();
            if (!string.IsNullOrEmpty(txtHWWKG.Text.Trim()) && !string.IsNullOrEmpty(txtHWHCM.Text.Trim()))
            {
                double weight = 0;
                double height = 0;
                double.TryParse(txtHWWKG.Text, out weight);
                double.TryParse(txtHWHCM.Text, out height);
                if (weight > 0 & height > 0)
                {
                    txtHWBMI.Text = CommonHelpers.BMI(weight, height).ToString();
                }
            }
        }
        private void txtHWHIN_TextChanged(object sender, EventArgs e)
        {
            if (!ActiveControl.Parent.Name.Equals("txtHWHIN"))
                return;
            if (string.IsNullOrEmpty(txtHWHIN.Text.Trim()))
            {
                txtHWHCM.Clear(); return;
            }
            double inches = default(double);
            if (double.TryParse(txtHWHIN.Text.Trim(), out inches))
            {
                string _value = CommonHelpers.AddDecimals(CommonHelpers.GetCentiMeters(inches).ToString(), 1);
                if (!string.IsNullOrEmpty(_value))
                    txtHWHCM.Text = _value;
            }
        }
        private void DisableAllControlsAfterSubjectDropHeightWeight()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvECG")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvOnScreeningPages.Controls)
            {
                if (c.Name == "pgvHeightWeight")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }
        private void CheckDroppedHW(string subjectkey)
        {
            bool subjectDroppedHW = DroppedHelper.IsSubjectDroppedHeightWeight(studyId, subjectkey);
            bool subjectFaileddHW = FailedHelper.IsSubjectFailedHeightWeight(studyId, subjectkey);

            //======================== Drop================================

            if (subjectDroppedHW == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";

                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        //pgvECG.Image = Dropped;
                        pgvHeightWeight.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        foreach (Control c in pgvHeightWeight.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvHeightWeight")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================

            //======================== Failed================================

            if (subjectFaileddHW == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;


                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        //pgvECG.Image = Failed;
                        pgvHeightWeight.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        foreach (Control c in pgvHeightWeight.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvHeightWeight")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
        }

        /// <summary>
        /// convert from pound to kg
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHWWpounds_Leave(object sender, EventArgs e)
        {
            string _value = CommonHelpers.AddDecimals(txtHWWpounds.Text.Trim(), 1);
            if (!string.IsNullOrEmpty(_value))
                txtHWWpounds.Text = _value;
        }

        /// <summary>
        /// convert from kg to pound
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHWWKG_Leave(object sender, EventArgs e)
        {
            string _value = CommonHelpers.AddDecimals(txtHWWKG.Text.Trim(), 1);
            if (!string.IsNullOrEmpty(_value))
                txtHWWKG.Text = _value;
        }

        /// <summary>
        /// Feet and Inchese to CM
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private void txtHWHIN_Leave(object sender, EventArgs e)
        {
            string _value = CommonHelpers.AddDecimals(txtHWHIN.Text.Trim(), 1);
            if (!string.IsNullOrEmpty(_value))
                txtHWHIN.Text = _value;
        }
        /// <summary>
        /// Convert from CM to Feet,inches
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHWHCM_Leave(object sender, EventArgs e)
        {
            string _value = CommonHelpers.AddDecimals(txtHWHCM.Text.Trim(), 1);
            if (!string.IsNullOrEmpty(_value))
                txtHWHCM.Text = _value;
        }

        /// <summary>
        /// if BMW is in range of the study specific (study design)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHWBMI_TextChanged(object sender, EventArgs e)
        {
            decimal minBMI = default(decimal);
            decimal maxBMI = default(decimal);
            if (!string.IsNullOrEmpty(txtHWBMI.Text))
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    Dictionary<string, string> _bmiRange = CommonHelpers.GetBMIRangeForStudy(studyId);
                    if (_bmiRange != null)
                    {
                        minBMI = Convert.ToDecimal(_bmiRange["MinBMI"]);
                        maxBMI = Convert.ToDecimal(_bmiRange["MaxBMI"]);
                    }
                    if (Convert.ToDecimal(txtHWBMI.Text.Trim()) >= minBMI && Convert.ToDecimal(txtHWBMI.Text.Trim()) <= maxBMI)
                    {
                        txtFailedHW.Visible = false;
                        txtHWCordinatorComment.Visible = false;
                        txtHWBMI.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        txtHWBMI.ForeColor = System.Drawing.Color.Red;
                        txtFailedHW.Visible = true;
                        txtHWCordinatorComment.Visible = true;
                    }
                }
            }
        }
        /// <summary>
        /// Scan Weight & Height To Retrieve Info
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanHeightWeight_TextChanged(object sender, EventArgs e)
        {
            HeightWeightTimer.Interval = (700);
            HeightWeightTimer.Enabled = true;
            HeightWeightTimer.Start();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void HeightWeightTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                HeightWeightTimer.Stop();
                if (string.IsNullOrEmpty(txtScanHeightWeight.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanHeightWeight.Text.Trim());
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Height Weight", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Height Weight", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanHeightWeight.ResetText();
            }
        }

        /// <summary>
        ///  save Height & Weight Measurement
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignHW_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    if (string.IsNullOrEmpty(txtSSID.Text.Trim()) && string.IsNullOrEmpty(txtSTADID.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please enter SS/STAD ID.", "Height and Weight", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        // txtSSID.Focus();
                        return;
                    }
                    //if (string.IsNullOrEmpty(txtSTADID.Text.Trim()))
                    //{
                    //    HelperFunctions.ShowMessageBox("Please enter STAD ID.", "Height and Weight", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    //    txtSTADID.Focus();
                    //    return;
                    //}
                    if (string.IsNullOrEmpty(txtHWWpounds.Text.Trim()) || string.IsNullOrEmpty(txtHWWKG.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please enter weight.", "Height and Weight", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        txtHWWKG.Focus();
                        return;
                    }
                    if (string.IsNullOrEmpty(txtHWHCM.Text.Trim()) || string.IsNullOrEmpty(txtHWHIN.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please enter height.", "Height and Weight", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        txtHWHCM.Focus();
                        return;
                    }
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningHeightWeight] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            tabName = "Height & Weight";
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningHeightWeight] SET StadID='" + txtSTADID.Text.Trim() + "',SSID='" + txtSSID.Text.Trim() + "', WeightPounds='" + txtHWWpounds.Text + "', WeightKG='" + txtHWWKG.Text + "',HeightIN='" + txtHWHIN.Text + "',HeightCM='" + txtHWHCM.Text + "',BMI='" + txtHWBMI.Text + "',FeetInches='" + string.Empty + "',SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',Comments='" + txtHWCordinatorComment.Text + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedDate='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        }
                        else
                        {
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            tabName = "Height & Weight";
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningHeightWeight]
                                 (StudyID,SubjectKey,StadID,SSID,WeightPounds,WeightKG,HeightIN,HeightCM,BMI,FeetInches,SubjectStatus,Comments,eSignedBy,eSignedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + txtSTADID.Text + "','" + txtSSID.Text + "','" + txtHWWpounds.Text + "','" + txtHWWKG.Text + "','" + txtHWHIN.Text + "','" + txtHWHCM.Text + "','" + txtHWBMI.Text + "','" + string.Empty + "','" + (int)SubjectStatusCode.Status.Proceed + "','" + txtHWCordinatorComment.Text + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                            db.ExecuteInsertQuery(InsertQuery, null, false);
                        }
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningHeight&Weight", SubjectStatusCode.Status.Proceed, txtHWCordinatorComment.Text);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningHeightWeight", pgvHeightWeight.Name, "Height&WeightProceed", SubjectStatusCode.Status.Proceed, txtHWCordinatorComment.Text, App.EsignedUser.UserName);
                        db.CommitTransaction();
                        LoadDataBySelectedTab();
                    }

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Height & Weight", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Retrieve Height & Weight by SubjectKey
        /// </summary>
        private void GetHeightWeight(string subjectKey)
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningHeightWeight] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "'");
                        SqlCommand cmd = new SqlCommand(query, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            txtSTADID.Text = dr["StadID"].ToString();
                            txtSSID.Text = dr["SSID"].ToString();
                            txtHWWpounds.Text = dr["WeightPounds"].ToString();
                            txtHWWKG.Text = dr["WeightKG"].ToString();
                            txtHWHIN.Text = dr["HeightIN"].ToString();
                            txtHWHCM.Text = dr["HeightCM"].ToString();
                            txtHWBMI.Text = dr["BMI"].ToString();
                            txtHWFeet.Text = dr["FeetInches"].ToString();
                            txtHWCordinatorComment.Text = dr["Comments"].ToString();
                            lblSCHWEsignedBy.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCHWEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                        }
                        connection.Close();
                    }

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Height & Weight", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        ///  Subject Failed at Height & Weight
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtFailedHW_Click(object sender, EventArgs e)
        {
            string eSignedby = App.EsignedUser.UserName;

            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    tabName = "Height & Weight";
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        return;
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningHeightWeight] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningHeightWeight] SET  SubjectStatus=@subjectStatus,Comments=@cordinatorComment,eSignedBy=@esignedBy,eSignedDate=@esignedDate WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@subjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@cordinatorComment", txtHWCordinatorComment.Text));
                            _params.Add(new SqlParameter("@esignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@esignedDate", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningHeightWeight]
                                 (StudyID,SubjectKey,SubjectStatus,Comments,eSignedBy,eSignedDate) VALUES
                                (@studyid,@subjectkey,@subjectStatus,@cordinatorComment,@esignedBy,@esignedDate)");
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyid", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@subjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@cordinatorComment", txtHWCordinatorComment.Text));
                            _params.Add(new SqlParameter("@esignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@esignedDate", DateTime.Now));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }
                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningHeightWeight", pgvHeightWeight.Name, "Height&WeightFail", SubjectStatusCode.Status.Fail, txtHWCordinatorComment.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningHeight&Weight", SubjectStatusCode.Status.Fail, txtHWCordinatorComment.Text);
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                        //lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        //lblSubjectStatus.Text = "Failed";
                        //// .............. Disable Controls...............
                        //btneSignHW.Enabled = false;

                        //DisableAllControlsAfterSubjectDropHeightWeight();
                        //pgvConsent.Image = null;
                        //pgvPCF.Image = null;
                        //pgvVCF.Image = null;
                        //pgvICF.Image = null;
                        //pgvInfluenza.Image = null;
                        //pgvIDVerfication.Image = null;
                        //pgvMedicalInterview.Image = null;
                        //pgvDemographics.Image = null;
                        //pgvMedicalHistory.Image = null;
                        //pgvScreeningEvaluations.Image = null;
                        //Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        ////pgvECG.Image = Failed;
                        //pgvHeightWeight.Image = Failed;
                        //Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        //pgvInfluenza.Image = Locked;
                        //pgvIDVerfication.Image = Locked;
                        //pgvPCF.Image = Locked;
                        //pgvVCF.Image = Locked;
                        //pgvConsent.Image = Locked;
                        //pgvDemographics.Image = Locked;
                        //pgvICF.Image = Locked;
                        //pgvScreeningEvaluations.Image = Locked;
                        //pgvMedicalInterview.Image = Locked;

                    }
                }
                else
                {

                    HelperFunctions.ShowMessageBox("Please enter Comment in the comment Box for Fail", "Comment", MessageBoxButtons.OK, RadMessageIcon.Info);

                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Height & Weight Failed", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        #endregion .....................Height & Weight ...................

        //****************************** Vitals******************************
        #region  Vitals
        private void txtTempVital_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTempVital"))
            //{
            //    double _temp = default(double);
            //    if (double.TryParse(txtTempVital.Text.Trim(), out _temp))
            //        txtTempVitalC.Text = CommonHelpers.ToCelsius(_temp).ToString();
            //    else
            //        txtTempVitalC.ResetText();
            //}
        }

        private void txtTempVitalC_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTempVitalC"))
            //{
            //    if (string.IsNullOrEmpty(txtTempVitalC.Text.Trim()))
            //    {
            //        txtTempVital.ResetText();
            //        return;
            //    }
            //    double _temp = default(double);
            //    if (double.TryParse(txtTempVitalC.Text.Trim(), out _temp))
            //        txtTempVital.Text = CommonHelpers.ToFahrenheit(_temp).ToString();
            //    else
            //        txtTempVital.ResetText();
            //}
        }

        private void txtTR1_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTR1"))
            //{
            //    double _temp = default(double);
            //    if (double.TryParse(txtTR1.Text.Trim(), out _temp))
            //        txtTempVitalCR1.Text = CommonHelpers.ToCelsius(_temp).ToString();
            //    else
            //        txtTempVitalCR1.ResetText();
            //}
        }

        private void txtTempVitalCR1_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTempVitalCR1"))
            //{
            //    if (string.IsNullOrEmpty(txtTempVitalCR1.Text.Trim()))
            //    {
            //        txtTR1.ResetText();
            //        return;
            //    }
            //    double _temp = default(double);
            //    if (double.TryParse(txtTempVitalCR1.Text.Trim(), out _temp))
            //        txtTR1.Text = CommonHelpers.ToFahrenheit(_temp).ToString();
            //    else
            //        txtTR1.ResetText();
            //}
        }

        private void txtTR2_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTR2"))
            //{
            //    double _temp = default(double);
            //    if (double.TryParse(txtTR2.Text.Trim(), out _temp))
            //        txtTempVitalCR2.Text = CommonHelpers.ToCelsius(_temp).ToString();
            //    else
            //        txtTempVitalCR2.ResetText();
            //}
        }

        private void txtTempVitalCR2_TextChanged(object sender, EventArgs e)
        {
            //if (this.ActiveControl.Parent.Name.Equals("txtTempVitalCR2"))
            //{
            //    if (string.IsNullOrEmpty(txtTempVitalCR2.Text.Trim()))
            //    {
            //        txtTR2.ResetText();
            //        return;
            //    }
            //    double _temp = default(double);
            //    if (double.TryParse(txtTempVitalCR2.Text.Trim(), out _temp))
            //        txtTR2.Text = CommonHelpers.ToFahrenheit(_temp).ToString();
            //    else
            //        txtTR2.ResetText();
            //}
        }

        private void txtTempVitalC_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtTempVitalCR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void txtTempVitalCR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
        }

        private void rdbVitalsOutRangeYes_CheckStateChanged(object sender, EventArgs e)
        {
            //if (rdbVitalsOutRangeYes.IsChecked)
            //{
            //    rdbVitalsCSNo.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNo_CheckStateChanging);
            //    rdbVitalsCSNo.IsChecked = true;
            //    rdbVitalsCSNo.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNo_CheckStateChanging);
            //}
        }

        private void rdbVitalsOutRangeNo_CheckStateChanged(object sender, EventArgs e)
        {
            //if (rdbVitalsOutRangeNo.IsChecked)
            //{
            //    rdbVitalsCSYes.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYes_CheckStateChanging);
            //    rdbVitalsCSYes.IsChecked = true;
            //    rdbVitalsCSYes.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYes_CheckStateChanging);
            //}
        }

        private void rdbVitalsOutRangeYesR1_CheckStateChanged(object sender, EventArgs e)
        {
            //if (rdbVitalsOutRangeYesR1.IsChecked)
            //{
            //    rdbVitalsCSNoR1.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR1_CheckStateChanging);
            //    rdbVitalsCSNoR1.IsChecked = true;
            //    rdbVitalsCSNoR1.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR1_CheckStateChanging);
            //}
        }

        private void rdbVitalsOutRangeNoR1_CheckStateChanged(object sender, EventArgs e)
        {
            //if (rdbVitalsOutRangeNoR1.IsChecked)
            //{
            //    rdbVitalsCSYesR1.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR1_CheckStateChanging);
            //    rdbVitalsCSYesR1.IsChecked = true;
            //    rdbVitalsCSYesR1.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR1_CheckStateChanging);
            //}
        }

        private void rdbVitalsOutRangeYesR2_CheckStateChanged(object sender, EventArgs e)
        {
            //if (rdbVitalsOutRangeYesR2.IsChecked)
            //{
            //    rdbVitalsCSNoR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR2_CheckStateChanging);
            //    rdbVitalsCSNoR2.IsChecked = true;
            //    rdbVitalsCSNoR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR2_CheckStateChanging);
            //}
        }

        private void rdbVitalsOutRangeNoR2_CheckStateChanged(object sender, EventArgs e)
        {
            //    if (rdbVitalsOutRangeNoR2.IsChecked)
            //    {
            //        rdbVitalsCSYesR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR2_CheckStateChanging);
            //        rdbVitalsCSYesR2.IsChecked = true;
            //        rdbVitalsCSYesR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR2_CheckStateChanging);
            //    }
        }

        private void rdbVitalsOutRangeYes_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsFirstVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }

        private void rdbVitalsOutRangeNo_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsFirstVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }

        private void rdbVitalsOutRangeYesR1_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsSecondVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }

        private void rdbVitalsOutRangeNoR1_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsSecondVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }

        private void rdbVitalsOutRangeYesR2_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsThirdVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }

        private void rdbVitalsOutRangeNoR2_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsThirdVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private bool IsFirstVitalsEntryInRange()
        {
            bool _InRange = false;
            decimal _sbp = 0; decimal _dbp = 0; decimal _pr = 0; decimal _rr = 0; decimal _temp = 0; decimal _po = 0;
            if (decimal.TryParse(txtSystolic.Text.Trim(), out _sbp) && decimal.TryParse(txtDiastolic.Text.Trim(), out _dbp) && decimal.TryParse(txtPulseRate.Text.Trim(), out _pr) && decimal.TryParse(txtRespirationRate.Text.Trim(), out _rr) && decimal.TryParse(txtTempVital.Text.Trim(), out _temp) && (!IsPulseOximetryRequired || (IsPulseOximetryRequired && decimal.TryParse(txtPulseOximetry.Text.Trim(), out _po))))
                _InRange = CheckNoRepeatValuesInRange(_sbp, _dbp, _pr, _rr, _temp, _po);
            return _InRange;
        }
        private bool IsSecondVitalsEntryInRange()
        {
            bool _InRange = false;
            decimal _sbp = 0; decimal _dbp = 0; decimal _pr = 0; decimal _rr = 0; decimal _temp = 0; decimal _po = 0;
            if (decimal.TryParse(txtSBPR1.NullText.Equals("N/A") ? txtSystolic.Text.Trim() : txtSBPR1.Text.Trim(), out _sbp) && decimal.TryParse(txtDBPR1.NullText.Equals("N/A") ? txtDiastolic.Text.Trim() : txtDBPR1.Text.Trim(), out _dbp) && decimal.TryParse(txtPRateR1.NullText.Equals("N/A") ? txtPulseRate.Text.Trim() : txtPRateR1.Text.Trim(), out _pr) && decimal.TryParse(txtRRateR1.NullText.Equals("N/A") ? txtRespirationRate.Text.Trim() : txtRRateR1.Text.Trim(), out _rr) && decimal.TryParse(txtTR1.NullText.Equals("N/A") ? txtTempVital.Text.Trim() : txtTR1.Text.Trim(), out _temp) && (!IsPulseOximetryRequired || (IsPulseOximetryRequired && decimal.TryParse(txtPOR1.Text.Trim(), out _po))))
                _InRange = CheckFirstRepeatValuesInRange(_sbp, _dbp, _pr, _rr, _temp, _po);
            return _InRange;
        }
        private bool IsThirdVitalsEntryInRange()
        {
            bool _InRange = false;
            string _txtSBP = string.Empty; string _txtDBP = string.Empty; string _txtPR = string.Empty; string _txtRR = string.Empty; string _txtTemp = string.Empty; string _txtPO = string.Empty;
            _txtSBP = txtSBPR2.NullText.Equals("N/A") ? txtSBPR1.NullText.Equals("N/A") ? txtSystolic.Text.Trim() : txtSBPR1.Text.Trim() : txtSBPR2.Text.Trim();
            _txtDBP = txtDBPR2.NullText.Equals("N/A") ? txtDBPR1.NullText.Equals("N/A") ? txtDiastolic.Text.Trim() : txtDBPR1.Text.Trim() : txtDBPR2.Text.Trim();
            _txtPR = txtPRateR2.NullText.Equals("N/A") ? txtPRateR1.NullText.Equals("N/A") ? txtPulseRate.Text.Trim() : txtPRateR1.Text.Trim() : txtPRateR2.Text.Trim();
            _txtRR = txtRRateR2.NullText.Equals("N/A") ? txtRRateR1.NullText.Equals("N/A") ? txtRespirationRate.Text.Trim() : txtRRateR1.Text.Trim() : txtRRateR2.Text.Trim();
            _txtTemp = txtTR2.NullText.Equals("N/A") ? txtTR1.NullText.Equals("N/A") ? txtTempVital.Text.Trim() : txtTR1.Text.Trim() : txtTR2.Text.Trim();
            _txtPO = txtPOR2.NullText.Equals("N/A") ? txtPOR1.NullText.Equals("N/A") ? txtPulseOximetry.Text.Trim() : txtPOR1.Text.Trim() : txtPOR2.Text.Trim();

            decimal _sbp = 0; decimal _dbp = 0; decimal _pr = 0; decimal _rr = 0; decimal _temp = 0; decimal _po = 0;
            if (decimal.TryParse(_txtSBP, out _sbp) && decimal.TryParse(_txtDBP, out _dbp) && decimal.TryParse(_txtPR, out _pr) && decimal.TryParse(_txtRR, out _rr) && decimal.TryParse(_txtTemp, out _temp) && (!IsPulseOximetryRequired || (IsPulseOximetryRequired && decimal.TryParse(_txtPO, out _po))))
                _InRange = CheckSecondRepeatValuesInRange(_sbp, _dbp, _pr, _rr, _temp, _po);
            return _InRange;
        }
        private void btnSCVerifyDemographic_Click(object sender, EventArgs e)
        {
            try
            {
                if (!OnScreeningHelper.IsDemographicSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Demographic has not been done yet.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _tab = string.Empty;
                string _comments = string.Empty;
                if (OnScreeningStatusHelper.IsScreeningSubjectFailed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been failed already.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDropped(studyId, ValueOfKey, out _tab, out _comments))
                {

                    HelperFunctions.ShowMessageBox("Subject has been dropped already.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDismissed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been dismissed already.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string tabName = "Demographic";
                string reason = String.Format("Unlocking Demographic form to verify answer.");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                _IsMedicalInterviewAllDone = false;
                IsAllTasksBeforeIECCEsigned = false;
                List<Control> _noReadOnly = new List<Control>();
                _noReadOnly.Add(txtDMOtherAsian);
                CommonHelpers.SetReadOnlyWithException(GBRace, _noReadOnly, false);
                CommonHelpers.SetReadOnlyProperties(GBEthincity, false);
                CommonHelpers.SetReadOnlyProperties(GBeSignDemographic, false);
                btnESignRace.Enabled = true;
                GBRace.Enabled = true;
                GBEthincity.Enabled = true;
                GBeSignDemographic.Enabled = true;
                btnSCVerifyDemographic.Enabled = false;
                HelperFunctions.ShowMessageBox("Demographic form has been unlocked. You can modify answer now.", "Demographic", MessageBoxButtons.OK, RadMessageIcon.Info);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Demographic", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void rdbVitalsCSYes_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsFirstVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void rdbVitalsCSNo_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsFirstVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void rdbVitalsCSYesR1_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsSecondVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void rdbVitalsCSNoR1_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsSecondVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void rdbVitalsCSYesR2_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (!IsThirdVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like not in range. Do you still want to check 'Yes'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void rdbVitalsCSNoR2_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
                return;
            if (IsThirdVitalsEntryInRange())
            {
                if (HelperFunctions.ShowMessageBox("Values look like in range. Do you still want to check 'No'?(Y/N).", "Vitals", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void cbConfirmSubjectSeated_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbConfirmSubjectSeated.Checked)
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(txtDateTimeNoR);
                CommonHelpers.SetReadOnlyWithException(GBNoRepeatVital, noLock, false);
                txtTimeNoRepeat.Focus();
                txtDateTimeNoR.Text = DateTime.Now.ToString("MMM dd,yyyy");
            }
            else
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(cbConfirmSubjectSeated);
                CommonHelpers.SetReadOnlyWithException(GBNoRepeatVital, noLock, true);
            }
        }
        private void btnSCVitalPhysicianEmailEsign_Click(object sender, EventArgs e)
        {
            SaveVitalsPhysicianEmailApproval();
        }
        private void SaveVitalsPhysicianEmailApproval()
        {
            //try
            //{
            //    if (!ValidateCommonScreeningRequiredFields())
            //        return;
            //    if (string.IsNullOrEmpty(txtSCVitalEmailGrantedBy.Text.Trim()))
            //    {
            //        HelperFunctions.ShowMessageBox("Please enter Granted By name.", "Vital", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        txtSCVitalEmailGrantedBy.Focus();
            //        return;
            //    }
            //    if (string.IsNullOrEmpty(ddSCVitalEmailInterpretation.Text.Trim()) || ddSCVitalEmailInterpretation.SelectedIndex < 0)
            //    {
            //        HelperFunctions.ShowMessageBox("Please select interpretation of Vital.", "Vital", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        ddSCVitalEmailInterpretation.Focus();
            //        return;
            //    }
            //    string _physicianEmailComment = string.Empty;
            //    using (frmCommentDialogBox commentBox = new frmCommentDialogBox())
            //    {
            //        if (commentBox.ShowDialog() != DialogResult.OK)
            //        {
            //            return;
            //        }
            //        _physicianEmailComment = commentBox.txtComment.Text.Trim();
            //    }

            //    bool IsFirstVitalReviewedByPhysician = OnScreeningHelper.IsFirstVitalReviewedByPhysician(studyId, ValueOfKey);
            //    bool IsSecondVitalReviewedByPhysician = OnScreeningHelper.IsSecondVitalReviewedByPhysician(studyId, ValueOfKey);
            //    bool IsThirdVitalReviewedByPhysician = OnScreeningHelper.IsThirdVitalReviewedByPhysician(studyId, ValueOfKey);
            //    DateTime dateNow = DateTime.Now;
            //    _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //    string _updateQuery = string.Empty;
            //    bool _repeatRequired = cbSCVitalIsRepeat.Checked;
            //    if (!IsFirstVitalReviewedByPhysician)
            //    {
            //        _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",GrantedByEmailPhysician1=@GrantedByEmailPhysician, PhysicianEmailEsignedBy1=@PhysicianEmailEsignedBy,PhysicianEmailEsignedDate1=@PhysicianEmailEsignedDate,PhysicianEmailEsignedComment1=@PhysicianEmailEsignedComment,PhysicianInterpretation1=@PhysicianInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
            //    }
            //    else if (IsFirstVitalReviewedByPhysician && !IsSecondVitalReviewedByPhysician)
            //    {
            //        _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",GrantedByEmailPhysician2=@GrantedByEmailPhysician, PhysicianEmailEsignedBy2=@PhysicianEmailEsignedBy,PhysicianEmailEsignedDate2=@PhysicianEmailEsignedDate,PhysicianEmailEsignedComment2=@PhysicianEmailEsignedComment,PhysicianInterpretation2=@PhysicianInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
            //    }
            //    else if (IsFirstVitalReviewedByPhysician && IsSecondVitalReviewedByPhysician && !IsThirdVitalReviewedByPhysician)
            //    {
            //        _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",GrantedByEmailPhysician3=@GrantedByEmailPhysician, PhysicianEmailEsignedBy3=@PhysicianEmailEsignedBy,PhysicianEmailEsignedDate3=@PhysicianEmailEsignedDate,PhysicianEmailEsignedComment3=@PhysicianEmailEsignedComment,PhysicianInterpretation3=@PhysicianInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
            //    }
            //    if (!string.IsNullOrEmpty(_updateQuery))
            //    {
            //        using (DbConnection db = new DbConnection())
            //        {
            //            db.OpenConnection();
            //            string exist = string.Format(@"SELECT 1 FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
            //            DataTable _dtExist = db.ExecuteSelectQuery(exist, null, false);
            //            if (_dtExist.Rows.Count == 0)
            //            {
            //                HelperFunctions.ShowMessageBox("Vital has not done yet.", "Vital", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //                return;
            //            }
            //            moduleName = "Vital Email Approval";
            //            tabName = "Vital";
            //            string actions = string.Format("Vital-Email approvel attached by :'" + App.EsignedUser.UserName + "'");
            //            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
            //            if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
            //            {
            //                return;
            //            }
            //            SqlParameter sp1 = new SqlParameter("@studyid", studyId);
            //            SqlParameter sp2 = new SqlParameter("@subjectkey", _subjectKey);
            //            SqlParameter sp3 = new SqlParameter("@PhysicianEmailEsignedBy", App.EsignedUser.UserName);
            //            SqlParameter sp4 = new SqlParameter("@PhysicianEmailEsignedDate", DateTime.Now);
            //            SqlParameter sp5 = new SqlParameter("@PhysicianEmailEsignedComment", _physicianEmailComment);
            //            SqlParameter sp6 = new SqlParameter("@GrantedByEmailPhysician", txtSCVitalEmailGrantedBy.Text.Trim());
            //            SqlParameter sp7 = new SqlParameter("@PhysicianInterpretation", ddSCVitalEmailInterpretation.Text.Trim());
            //            SqlParameter[] _params = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7 };
            //            db.ExecuteUpdateQuery(_updateQuery, _params, false);
            //            HelperFunctions.ShowMessageBox("Vital email approval has been esigned successfully.", "Vital", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            LoadDataBySelectedTab();
            //        }
            //    }
            //}
            //catch (SqlException ex)
            //{
            //    HelperFunctions.ShowMessageBox(ex.Message, "Vital", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }
        private void btnSCVCFInvEsign_Click(object sender, EventArgs e)
        {
            //if (!OnScreeningHelper.IsVCFInitialized(_subjectKey.ToString(), studyId))
            //{
            //    HelperFunctions.ShowMessageBox("Subject Initials has not been done.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    return;
            //}
            if (!ValidateCommonScreeningRequiredFields())
                return;
            IsVCFInvestigatorRequired = OnScreeningHelper.IsVCFInvestigatorRequired(studyId);
            if (!IsVCFInvestigatorRequired)
            {
                HelperFunctions.ShowMessageBox("Investigator signature is not required.", "VCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }
            if (!OnScreeningHelper.IsVCFSignedBySubject(ValueOfKey.ToString(), studyId))
            {
                HelperFunctions.ShowMessageBox("Subject has not been done signature.", "VCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }
            if (!OnScreeningHelper.IsVCFConsentedByStaff(ValueOfKey.ToString(), studyId))
            {
                HelperFunctions.ShowMessageBox("Consent staff has not signed VCF yet.", "VCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                return;
            }
            try
            {

                SqlParameter[] sqlParams;
                Cursor = Cursors.WaitCursor;
                pcmsWordSCVCF.IsReadOnly = false;
                RadDocument _activeDoc = pcmsWordSCVCF.Document;
                if (_activeDoc == null)
                {
                    HelperFunctions.ShowMessageBox("VCF Document not found.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "VCF";
                string reason = string.Format("This action will be Investigated by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                string investigatedBy = App.EsignedUser.FullName;// GetICFConsentedBy(_subjectKey.ToString(), studyId);
                string _currentDateTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
                RadDocument _docWithInitial = PCMSWordDocHelper.AppendNewContent(_activeDoc, investigatedBy, "SCINVESTIGATEDBY", out _currentDateTime);
                tmpVCFFile = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".docx";
                PCMSWordDocHelper.SaveAsDocx(_docWithInitial, tmpVCFFile);
                byte[] fileBytes = HelperFunctions.ConvertDocToBytes(tmpVCFFile);

                SqlParameter sp1 = new SqlParameter("@SubjectKey", _subjectKey);
                SqlParameter sp2 = new SqlParameter("@StudyId", studyId);
                SqlParameter sp3 = new SqlParameter("@VCFDoc", fileBytes);
                SqlParameter sp4 = new SqlParameter("@InvestigatedBy", App.EsignedUser.UserName);
                SqlParameter sp5 = new SqlParameter("@InvestigatedDate", Convert.ToDateTime(_currentDateTime));
                SqlParameter sp6 = new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Proceed);
                //  SqlParameter sp7 = new SqlParameter("@CordinatorComment", txtVCFCordinatorComment.Text);
                SqlParameter sp7 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                SqlParameter sp8 = new SqlParameter("@eSignedDate", Convert.ToDateTime(_currentDateTime));


                sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    string selectQuery = "select 1 from [dbo].[ScreeningVCF] where [SubjectKey]=@SubjectKey and [StudyId]=@StudyId";
                    SqlParameter pr1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter pr2 = new SqlParameter("@StudyId", studyId);

                    SqlParameter[] prs = new SqlParameter[] { pr1, pr2 };

                    DataTable dtSelect = DbConn.ExecuteSelectQuery(selectQuery, prs, false);
                    DbConn.BeginTransaction();
                    if (dtSelect.Rows.Count > 0)
                    {
                        DbConn.ExecuteUpdateQuery("spUpdateScreeningVCF", sqlParams, true);
                        DbConn.CommitTransaction();
                        HelperFunctions.ShowMessageBox("Screening VCF has been Consented and e-signed successfully.", "Screening VCF", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    DbConn.CloseConnection();
                    LoadDataBySelectedTab();
                    //LoadVCFDocument(_subjectKey.ToString());
                    //CheckeSign(_subjectKey.ToString());
                    //CheckIfVCFAllProcessCompleted(_subjectKey.ToString());
                    btnPrintVCF_Click(null, null);
                }

            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }
        private void cbConfirmSubjectSeatedR1_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbConfirmSubjectSeatedR1.Checked)
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(txtDateTimeR1);
                var _emptyControls = GBVitalR1.Controls.OfType<RadTextBox>().Where(c => !string.IsNullOrEmpty(c.Text.Trim()) || c.NullText.Trim().Equals("N/A") || c.Text.Trim().Equals("__:__")).ToList();
                noLock.AddRange(_emptyControls);
                CommonHelpers.SetReadOnlyWithException(GBVitalR1, noLock, false);
                txtTimeR1.Focus();
                txtDateTimeR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
            }
            else
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(cbConfirmSubjectSeatedR1);
                CommonHelpers.SetReadOnlyWithException(GBVitalR1, noLock, true);
                txtTimeR1.ResetText();
                txtDateTimeR1.ResetText();
            }
        }
        private void cbConfirmSubjectSeatedR2_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbConfirmSubjectSeatedR2.Checked)
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(txtDateTimeR2);
                var _emptyControls = GBVitalR2.Controls.OfType<RadTextBox>().Where(c => !string.IsNullOrEmpty(c.Text.Trim()) || c.NullText.Trim().Equals("N/A") || c.Text.Trim().Equals("__:__")).ToList();
                noLock.AddRange(_emptyControls);
                CommonHelpers.SetReadOnlyWithException(GBVitalR2, noLock, false);
                txtTimeR2.Focus();
                txtDateTimeR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
            }
            else
            {
                List<Control> noLock = new List<Control>();
                noLock.Add(cbConfirmSubjectSeatedR2);
                CommonHelpers.SetReadOnlyWithException(GBVitalR2, noLock, true);
                txtTimeR2.ResetText();
                txtDateTimeR2.ResetText();
            }
        }
        private void txtPulseOximetry_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPulseOximetry.Text))
            {
                if (CommonHelpers.IsPulseOximetryInRange(decimal.Parse(txtPulseOximetry.Text.Trim())))
                    SwitchForColorByVitalRange(txtPulseOximetry, true, "");
                else
                    SwitchForColorByVitalRange(txtPulseOximetry, false, "The value has to be 92-100, Do you want to adjust ?");
            }
        }
        private void txtPOR1_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPOR1.Text))
            {
                if (CommonHelpers.IsPulseOximetryInRange(decimal.Parse(txtPOR1.Text.Trim())))
                    SwitchForColorByVitalRange(txtPOR1, true, "");
                else
                    SwitchForColorByVitalRange(txtPOR1, false, "The value has to be 92-100, Do you want to adjust ?");
            }
        }
        private void txtPOR2_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPOR2.Text.Trim()))
            {
                if (CommonHelpers.IsPulseOximetryInRange(decimal.Parse(txtPOR2.Text.Trim())))
                    SwitchForColorByVitalRange(txtPOR2, true, "");
                else
                    SwitchForColorByVitalRange(txtPOR2, false, "The value has to be 92-100, Do you want to adjust ?");
            }
        }
        private void CheckVitalsRangeAfterLoad(string section)
        {
            List<RadTextBox> _textBoxes = new List<RadTextBox>();
            switch (section)
            {
                case "All":
                    //Initial
                    _textBoxes.Add(txtSystolic);
                    _textBoxes.Add(txtDiastolic);
                    _textBoxes.Add(txtPulseRate);
                    _textBoxes.Add(txtPulseOximetry);
                    _textBoxes.Add(txtRespirationRate);
                    _textBoxes.Add(txtTempVital);

                    //Repeat1
                    _textBoxes.Add(txtSBPR1);
                    _textBoxes.Add(txtDBPR1);
                    _textBoxes.Add(txtPRateR1);
                    _textBoxes.Add(txtPOR1);
                    _textBoxes.Add(txtRRateR1);
                    _textBoxes.Add(txtTR1);

                    //Repeat2
                    _textBoxes.Add(txtSBPR2);
                    _textBoxes.Add(txtDBPR2);
                    _textBoxes.Add(txtPRateR2);
                    _textBoxes.Add(txtPOR2);
                    _textBoxes.Add(txtRRateR2);
                    _textBoxes.Add(txtTR2);
                    break;
                case "Initial":
                    _textBoxes.Add(txtSystolic);
                    _textBoxes.Add(txtDiastolic);
                    _textBoxes.Add(txtPulseRate);
                    _textBoxes.Add(txtPulseOximetry);
                    _textBoxes.Add(txtRespirationRate);
                    _textBoxes.Add(txtTempVital);
                    break;
                case "Repeat1":
                    //Repeat1
                    _textBoxes.Add(txtSBPR1);
                    _textBoxes.Add(txtDBPR1);
                    _textBoxes.Add(txtPRateR1);
                    _textBoxes.Add(txtPOR1);
                    _textBoxes.Add(txtRRateR1);
                    _textBoxes.Add(txtTR1);
                    break;
                case "Repeat2":
                    //Repeat2
                    _textBoxes.Add(txtSBPR2);
                    _textBoxes.Add(txtDBPR2);
                    _textBoxes.Add(txtPRateR2);
                    _textBoxes.Add(txtPOR2);
                    _textBoxes.Add(txtRRateR2);
                    _textBoxes.Add(txtTR2);
                    break;
                default:
                    break;
            }
            foreach (RadTextBox textBox in _textBoxes)
            {
                if (string.IsNullOrEmpty(textBox.Text.Trim()))
                    continue;
                decimal _value = Convert.ToDecimal(textBox.Text.Trim());
                switch (textBox.Tag.ToString())
                {
                    case "SystolicBP":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsSystolicBPInRange(_value, studyId), string.Empty);
                        break;
                    case "DiastolicBP":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsDiastolicBPInRange(_value, studyId), string.Empty);
                        break;
                    case "PulseRate":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsPulseRateInRange(_value), string.Empty);
                        break;
                    case "PulseOximetry":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsPulseOximetryInRange(_value), string.Empty);
                        break;
                    case "RespirationRate":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsRespirationInRange(_value), string.Empty);
                        break;
                    case "Temperature":
                        SwitchForColorByVitalRange(textBox, CommonHelpers.IsTemperatureInRange(_value), string.Empty);
                        break;
                    default:
                        break;
                }
            }
        }
        private void DisableAllControlsAfterSubjectDropVital()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvECG")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvOnScreeningPages.Controls)
            {
                if (c.Name == "pgvVitals")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }
        private void CheckDroppedVital(string subjectkey)
        {
            bool subjectDroppedVital = DroppedHelper.IsSubjectDroppedVital(studyId, subjectkey);
            bool subjectFailedVital = FailedHelper.IsSubjectFailedVital(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedVital == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        //pgvECG.Image = Dropped;
                        pgvVitals.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        foreach (Control c in pgvVitals.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvVitals")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================
            //======================== Failed================================

            if (subjectFailedVital == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        //pgvECG.Image = Failed;
                        pgvVitals.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        foreach (Control c in pgvVitals.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvVitals")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
        }

        //********************************** Vitals textbox validation *********
        #region Vitals texBox validation (Accept integers)


        private void txtEquipID_Leave(object sender, EventArgs e)
        {
            //  txtDateTimeNoR.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }

        private void txtEquipIDR1_Leave(object sender, EventArgs e)
        {
            // txtDateTimeR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }

        private void txtEquipIDR2_Leave(object sender, EventArgs e)
        {
            //txtDateTimeR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }
        private void txtSystolic_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtDiastolic_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPulseRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtRespirationRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtSBPR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtDBPR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPRateR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtRRateR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtSBPR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtDBPR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPRateR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtRRateR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtSystolic_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNoR.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtSystolic.Text))
            {
                if (CommonHelpers.IsSystolicBPInRange(decimal.Parse(txtSystolic.Text.Trim()), studyId))
                    SwitchForColorByVitalRange(txtSystolic, true, "");
                else
                {
                    if ((btnSaveVital.Tag != null && !btnSaveVital.Tag.ToString().Equals("ESIGNED")) || btnSaveVital.Tag == null)
                        SwitchForColorByVitalRange(txtSystolic, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtSystolic, false, string.Empty);
                }
                //if (Convert.ToDecimal(txtSystolic.Text) >= CheckSystolicDiastolicRange()[0] && Convert.ToDecimal(txtSystolic.Text) <= CheckSystolicDiastolicRange()[1])
                //{
                //    txtSystolic.ForeColor = System.Drawing.Color.Green;

                //}
                //else
                //{
                //    if (HelperFunctions.ShowMessageBox("The Value has to be between (90-150) , Do you want to adjust?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                //    {
                //        txtSystolic.Focus();
                //    }
                //    else
                //    {
                //        txtSystolic.ForeColor = System.Drawing.Color.Red;
                //    }
                //}

            }

            //// .... Check if all values are correct then do not repeat , if no show repeat button
            //if (!string.IsNullOrEmpty(txtSystolic.Text) && !string.IsNullOrEmpty(txtDiastolic.Text) && !string.IsNullOrEmpty(txtPulseRate.Text) && !string.IsNullOrEmpty(txtRespirationRate.Text) && !string.IsNullOrEmpty(txtTempVital.Text))
            //{
            //    if ((Convert.ToInt32(txtSystolic.Text) >= 90 && Convert.ToInt32(txtSystolic.Text) <= 150) && (Convert.ToInt32(txtDiastolic.Text) >= 50 && Convert.ToInt32(txtDiastolic.Text) <= 90) && (Convert.ToInt32(txtPulseRate.Text) >= 50 && Convert.ToInt32(txtPulseRate.Text) <= 100) && (Convert.ToDecimal(txtRespirationRate.Text) >= 12 && Convert.ToDecimal(txtRespirationRate.Text) <= 20) && (decimal.Parse(txtTempVital.Text) >= 95.7m && decimal.Parse(txtTempVital.Text) <= 99.5m))
            //    {
            //        btnRepeatVital.Enabled = false;
            //        // txtVitalComments.Enabled = false;
            //    }
            //    else
            //    {
            //        // btnRepeatVital.Enabled = true;
            //        txtVitalComments.Enabled = true;
            //    }
            //}

        }

        /// <summary>
        /// Validate if the enetered Data is between (50-90)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtDiastolic_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNoR.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtDiastolic.Text))
            {
                if (CommonHelpers.IsDiastolicBPInRange(decimal.Parse(txtDiastolic.Text.Trim()), studyId))
                    SwitchForColorByVitalRange(txtDiastolic, true, "");
                else
                {
                    if ((btnSaveVital.Tag != null && !btnSaveVital.Tag.ToString().Equals("ESIGNED")) || btnSaveVital.Tag == null)
                        SwitchForColorByVitalRange(txtDiastolic, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtDiastolic, false, string.Empty);
                }

                //if (Convert.ToDecimal(txtDiastolic.Text) >= CheckSystolicDiastolicRange()[2] && Convert.ToDecimal(txtDiastolic.Text) <= CheckSystolicDiastolicRange()[3])
                //{
                //    txtDiastolic.ForeColor = System.Drawing.Color.Green;

                //}
                //else
                //{
                //    if (HelperFunctions.ShowMessageBox("The Value has to be between (50-90) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                //    {
                //        txtDiastolic.Focus();
                //    }
                //    else
                //    {
                //        txtDiastolic.ForeColor = System.Drawing.Color.Red;

                //    }
                //}

            }
            //// .... Check if all values are correct then do not repeat , if no show repeat button
            //if (!string.IsNullOrEmpty(txtSystolic.Text) && !string.IsNullOrEmpty(txtDiastolic.Text) && !string.IsNullOrEmpty(txtPulseRate.Text) && !string.IsNullOrEmpty(txtRespirationRate.Text) && !string.IsNullOrEmpty(txtTempVital.Text))
            //{
            //    if ((Convert.ToInt32(txtSystolic.Text) >= 90 && Convert.ToInt32(txtSystolic.Text) <= 150) && (Convert.ToInt32(txtDiastolic.Text) >= 50 && Convert.ToInt32(txtDiastolic.Text) <= 90) && (Convert.ToInt32(txtPulseRate.Text) >= 50 && Convert.ToInt32(txtPulseRate.Text) <= 100) && (Convert.ToDecimal(txtRespirationRate.Text) >= 12 && Convert.ToDecimal(txtRespirationRate.Text) <= 20) && (decimal.Parse(txtTempVital.Text) >= 95.7m && decimal.Parse(txtTempVital.Text) <= 99.5m))
            //    {
            //        btnRepeatVital.Enabled = false;
            //        // txtVitalComments.Enabled = false;
            //    }
            //    else
            //    {
            //        // btnRepeatVital.Enabled = true;
            //        txtVitalComments.Enabled = true;
            //    }
            //}
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPulseRate_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPulseRate.Text))
            {
                if (CommonHelpers.IsPulseRateInRange(decimal.Parse(txtPulseRate.Text.Trim()), studyId))
                    SwitchForColorByVitalRange(txtPulseRate, true, "");
                else
                {
                    if ((btnSaveVital.Tag != null && !btnSaveVital.Tag.ToString().Equals("ESIGNED")) || btnSaveVital.Tag == null)
                        SwitchForColorByVitalRange(txtPulseRate, false, "The value has to be 50-100, Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtPulseRate, false, string.Empty);
                }

                //if (Convert.ToInt32(txtPulseRate.Text) >= 50 && Convert.ToInt32(txtPulseRate.Text) <= 100)
                //{
                //    txtPulseRate.ForeColor = System.Drawing.Color.Green;

                //}
                //else
                //{
                //    if (HelperFunctions.ShowMessageBox("The Value has to be between (50-100) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                //    {
                //        txtPulseRate.Focus();
                //    }
                //    else
                //    {
                //        txtPulseRate.ForeColor = System.Drawing.Color.Red;
                //    }
                //}
            }
            //// .... Check if all values are correct then do not repeat , if no show repeat button
            //if (!string.IsNullOrEmpty(txtSystolic.Text) && !string.IsNullOrEmpty(txtDiastolic.Text) && !string.IsNullOrEmpty(txtPulseRate.Text) && !string.IsNullOrEmpty(txtRespirationRate.Text) && !string.IsNullOrEmpty(txtTempVital.Text))
            //{
            //    if ((Convert.ToInt32(txtSystolic.Text) >= CheckSystolicDiastolicRange()[0] && Convert.ToInt32(txtSystolic.Text) <= CheckSystolicDiastolicRange()[1]) && (Convert.ToInt32(txtDiastolic.Text) >= CheckSystolicDiastolicRange()[2] && Convert.ToInt32(txtDiastolic.Text) <= CheckSystolicDiastolicRange()[3]) && (Convert.ToInt32(txtPulseRate.Text) >= 50 && Convert.ToInt32(txtPulseRate.Text) <= 100) && (Convert.ToDecimal(txtRespirationRate.Text) >= 12 && Convert.ToDecimal(txtRespirationRate.Text) <= 20) && (decimal.Parse(txtTempVital.Text) >= 95.7m && decimal.Parse(txtTempVital.Text) <= 99.5m))
            //    {
            //        btnRepeatVital.Enabled = false;
            //        // txtVitalComments.Enabled = false;
            //    }
            //    else
            //    {
            //        // btnRepeatVital.Enabled = true;
            //        txtVitalComments.Enabled = true;
            //    }
            //}
        }

        /// <summary>
        /// Accept Decimal and Minuse Numbers
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPulseOximetry_KeyPress(object sender, KeyPressEventArgs e)
        {
            Regex exp1 = new Regex(@"^-?\d+[.]?\d*$");// 12.5 , - 12.5 format
            Regex exp2 = new Regex(@"^[.]?\d*$"); // .125  format 
            Regex exp3 = new Regex(@"^-[.]?\d*$"); // - .125  format 
            if (char.IsControl(e.KeyChar))
                return;
            if (!exp1.IsMatch(txtPulseOximetry.Text.Insert(txtPulseOximetry.SelectionStart, e.KeyChar.ToString()) + "1"))
            {
                if (!exp2.IsMatch(txtPulseOximetry.Text.Insert(txtPulseOximetry.SelectionStart, e.KeyChar.ToString()) + "1"))
                {
                    if (!exp3.IsMatch(txtPulseOximetry.Text.Insert(txtPulseOximetry.SelectionStart, e.KeyChar.ToString()) + "1"))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
            }
        }

        /// <summary>
        /// Accept Decimal and Minuse Numbers
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPOR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            Regex exp1 = new Regex(@"^-?\d+[.]?\d*$");// 12.5 , - 12.5 format
            Regex exp2 = new Regex(@"^[.]?\d*$"); // .125  format 
            Regex exp3 = new Regex(@"^-[.]?\d*$"); // - .125  format 
            if (char.IsControl(e.KeyChar))
                return;
            if (!exp1.IsMatch(txtPOR1.Text.Insert(txtPOR1.SelectionStart, e.KeyChar.ToString()) + "1"))
            {
                if (!exp2.IsMatch(txtPOR1.Text.Insert(txtPOR1.SelectionStart, e.KeyChar.ToString()) + "1"))
                {
                    if (!exp3.IsMatch(txtPOR1.Text.Insert(txtPOR1.SelectionStart, e.KeyChar.ToString()) + "1"))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
            }
        }

        /// <summary>
        /// Accept Decimal and Minuse Numbers
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPOR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            Regex exp1 = new Regex(@"^-?\d+[.]?\d*$");// 12.5 , - 12.5 format
            Regex exp2 = new Regex(@"^[.]?\d*$"); // .125  format 
            Regex exp3 = new Regex(@"^-[.]?\d*$"); // - .125  format 
            if (char.IsControl(e.KeyChar))
                return;
            if (!exp1.IsMatch(txtPOR2.Text.Insert(txtPOR2.SelectionStart, e.KeyChar.ToString()) + "1"))
            {
                if (!exp2.IsMatch(txtPOR2.Text.Insert(txtPOR2.SelectionStart, e.KeyChar.ToString()) + "1"))
                {
                    if (!exp3.IsMatch(txtPOR2.Text.Insert(txtPOR2.SelectionStart, e.KeyChar.ToString()) + "1"))
                        e.Handled = true;
                    else
                        e.Handled = false;
                }
            }
        }

        private void SwitchForColorByVitalRange(Control currentControl, bool isInRange, string message)
        {
            RadTextBox _textBox = currentControl as RadTextBox;
            if (_textBox == null)
                return;
            if (string.IsNullOrEmpty(_textBox.Text.Trim()))
                return;
            _textBox.ForeColor = System.Drawing.Color.Black;
            if (isInRange)
                _textBox.ForeColor = System.Drawing.Color.Green;
            else
            {
                if (!string.IsNullOrEmpty(message))
                {
                    if (HelperFunctions.ShowMessageBox(message, "Vital", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        _textBox.Focus();
                    else
                    {
                        _textBox.ForeColor = System.Drawing.Color.Red;
                    }
                }
                else
                    _textBox.ForeColor = System.Drawing.Color.Red;
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (12-20)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtRespirationRate_Leave(object sender, EventArgs e)
        {
            decimal _Value = new decimal();
            if (!string.IsNullOrEmpty(txtRespirationRate.Text) && decimal.TryParse(txtRespirationRate.Text.Trim(), out _Value))
            {
                if (CommonHelpers.IsRespirationInRange(_Value))
                    SwitchForColorByVitalRange(txtRespirationRate, true, "");
                else
                {
                    if ((btnSaveVital.Tag != null && !btnSaveVital.Tag.ToString().Equals("ESIGNED")) || btnSaveVital.Tag == null)
                        SwitchForColorByVitalRange(txtRespirationRate, false, "The value has to be 12-20, Do you want to adjust?");
                    else
                        SwitchForColorByVitalRange(txtRespirationRate, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between  (95.7-99.5)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTempVital_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtTempVital.Text.Trim()))
            {
                decimal _temp = default(decimal);
                if (decimal.TryParse(txtTempVital.Text.Trim(), out _temp))
                {
                    if (CommonHelpers.IsTemperatureInRange(_temp))
                        SwitchForColorByVitalRange(txtTempVital, true, "");
                    else
                    {
                        if ((btnSaveVital.Tag != null && !btnSaveVital.Tag.ToString().Equals("ESIGNED")) || btnSaveVital.Tag == null)
                            SwitchForColorByVitalRange(txtTempVital, false, "The value should be " + ConfigurationManager.AppSettings["NormalTempRange"] + ", Do you want to adjust ?");
                        else
                            SwitchForColorByVitalRange(txtTempVital, false, string.Empty);
                    }
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (90-150)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSBPR1_Leave(object sender, EventArgs e)
        {
            decimal _Value = new decimal();
            if (!string.IsNullOrEmpty(txtSBPR1.Text.Trim()) && decimal.TryParse(txtSBPR1.Text.Trim(), out _Value))
            {
                if (CommonHelpers.IsSystolicBPInRange(_Value, studyId))
                    SwitchForColorByVitalRange(txtSBPR1, true, "");
                else
                {
                    if ((btneSignR1.Tag != null && !btneSignR1.Tag.ToString().Equals("ESIGNED")) || btneSignR1.Tag == null)
                        SwitchForColorByVitalRange(txtSBPR1, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtSBPR1, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-90)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtDBPR1_Leave(object sender, EventArgs e)
        {
            decimal _Value = new decimal();
            if (!string.IsNullOrEmpty(txtDBPR1.Text.Trim()) && decimal.TryParse(txtDBPR1.Text.Trim(), out _Value))
            {
                if (CommonHelpers.IsDiastolicBPInRange(_Value, studyId))
                    SwitchForColorByVitalRange(txtDBPR1, true, "");
                else
                {
                    if ((btneSignR1.Tag != null && !btneSignR1.Tag.ToString().Equals("ESIGNED")) || btneSignR1.Tag == null)
                        SwitchForColorByVitalRange(txtDBPR1, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtDBPR1, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPRateR1_Leave(object sender, EventArgs e)
        {
            decimal _Value = new decimal();
            if (!string.IsNullOrEmpty(txtPRateR1.Text) && decimal.TryParse(txtPRateR1.Text.Trim(), out _Value))
            {
                if (CommonHelpers.IsPulseRateInRange(_Value, studyId))
                    SwitchForColorByVitalRange(txtPRateR1, true, "");
                else
                {
                    if ((btneSignR1.Tag != null && !btneSignR1.Tag.ToString().Equals("ESIGNED")) || btneSignR1.Tag == null)
                        SwitchForColorByVitalRange(txtPRateR1, false, "The value has to be 50-100, Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtPRateR1, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (12-20)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtRRateR1_Leave(object sender, EventArgs e)
        {
            decimal _Value = new decimal();
            if (!string.IsNullOrEmpty(txtRRateR1.Text) && decimal.TryParse(txtRRateR1.Text.Trim(), out _Value))
            {
                if (CommonHelpers.IsRespirationInRange(_Value, studyId))
                    SwitchForColorByVitalRange(txtRRateR1, true, "");
                else
                {
                    if ((btneSignR1.Tag != null && !btneSignR1.Tag.ToString().Equals("ESIGNED")) || btneSignR1.Tag == null)
                        SwitchForColorByVitalRange(txtRRateR1, false, "The value has to be 12-20, Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtRRateR1, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (95.7-99.5)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTR1_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtTR1.Text))
            {
                decimal _temp = default(decimal);
                if (decimal.TryParse(txtTR1.Text.Trim(), out _temp))
                {
                    if (CommonHelpers.IsTemperatureInRange(_temp, studyId))
                        SwitchForColorByVitalRange(txtTR1, true, "");
                    else
                    {
                        if ((btneSignR1.Tag != null && !btneSignR1.Tag.ToString().Equals("ESIGNED")) || btneSignR1.Tag == null)
                            SwitchForColorByVitalRange(txtTR1, false, "The value should be " + ConfigurationManager.AppSettings["NormalTempRange"] + ", Do you want to adjust ?");
                        else
                            SwitchForColorByVitalRange(txtTR1, false, string.Empty);
                    }
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (90-150)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSBPR2_Leave(object sender, EventArgs e)
        {
            decimal _sbpValue = new decimal();
            if (!string.IsNullOrEmpty(txtSBPR2.Text) && decimal.TryParse(txtSBPR2.Text.Trim(), out _sbpValue))
            {
                if (CommonHelpers.IsSystolicBPInRange(_sbpValue, studyId))
                    SwitchForColorByVitalRange(txtSBPR2, true, "");
                else
                {
                    if ((btneSignR2.Tag != null && !btneSignR2.Tag.ToString().Equals("ESIGNED")) || btneSignR2.Tag == null)
                        SwitchForColorByVitalRange(txtSBPR2, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtSBPR2, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["SystolicMax"] + ", Do you want to adjust ?");
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-90)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtDBPR2_Leave(object sender, EventArgs e)
        {
            decimal _value = new decimal();
            if (!string.IsNullOrEmpty(txtDBPR2.Text) && decimal.TryParse(txtDBPR2.Text.Trim(), out _value))
            {
                if (CommonHelpers.IsDiastolicBPInRange(_value, studyId))
                    SwitchForColorByVitalRange(txtDBPR2, true, "");
                else
                {
                    if ((btneSignR2.Tag != null && !btneSignR2.Tag.ToString().Equals("ESIGNED")) || btneSignR2.Tag == null)
                        SwitchForColorByVitalRange(txtDBPR2, false, "The value has to be " + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMin"] + "-" + CommonHelpers.SystolicDiastolicRange(studyId)["DiastolicMax"] + ", Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtDBPR2, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPRateR2_Leave(object sender, EventArgs e)
        {
            decimal _value = new decimal();
            if (!string.IsNullOrEmpty(txtPRateR2.Text) && decimal.TryParse(txtPRateR2.Text.Trim(), out _value))
            {
                if (CommonHelpers.IsPulseRateInRange(_value, studyId))
                    SwitchForColorByVitalRange(txtPRateR2, true, "");
                else
                {
                    if ((btneSignR2.Tag != null && !btneSignR2.Tag.ToString().Equals("ESIGNED")) || btneSignR2.Tag == null)
                        SwitchForColorByVitalRange(txtPRateR2, false, "The value has to be 50-100, Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtPRateR2, false, "The value has to be 50-100, Do you want to adjust ?");
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (12-20)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtRRateR2_Leave(object sender, EventArgs e)
        {
            decimal _value = new decimal();
            if (!string.IsNullOrEmpty(txtRRateR2.Text) && decimal.TryParse(txtRRateR2.Text.Trim(), out _value))
            {
                if (CommonHelpers.IsRespirationInRange(_value, studyId))
                    SwitchForColorByVitalRange(txtRRateR2, true, "");
                else
                {
                    if ((btneSignR2.Tag != null && !btneSignR2.Tag.ToString().Equals("ESIGNED")) || btneSignR2.Tag == null)
                        SwitchForColorByVitalRange(txtRRateR2, false, "The value has to be 12-20, Do you want to adjust ?");
                    else
                        SwitchForColorByVitalRange(txtRRateR2, false, string.Empty);
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (95.7-99.5)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTR2_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtTR2.Text))
            {
                decimal _temp = default(decimal);
                if (decimal.TryParse(txtTR2.Text.Trim(), out _temp))
                {
                    if (CommonHelpers.IsTemperatureInRange(_temp, studyId))
                        SwitchForColorByVitalRange(txtTR2, true, "");
                    else
                    {
                        if ((btneSignR2.Tag != null && !btneSignR2.Tag.ToString().Equals("ESIGNED")) || btneSignR2.Tag == null)
                            SwitchForColorByVitalRange(txtTR2, false, "The value should be " + ConfigurationManager.AppSettings["NormalTempRange"] + ", Do you want to adjust ?");
                        else
                            SwitchForColorByVitalRange(txtTR2, false, string.Empty);
                    }
                }

            }
        }

        private void txtTempVital_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
            var _values = txtTempVital.Text.Trim().Split('.');
            if (_values != null && _values.Count() >= 2 && _values[1].Length > 0 && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }
        /// <summary>
        /// Allow only one decimal point in the Temp(textbox)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
            var _values = txtTR1.Text.Trim().Split('.');
            if (_values != null && _values.Count() >= 2 && _values[1].Length > 0 && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }
        /// <summary>
        /// Allow only one decimal point in the Temp(textbox)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            CommonHelpers.ValidateDecimalTextBox(sender, e);
            var _values = txtTR2.Text.Trim().Split('.');
            if (_values != null && _values.Count() >= 2 && _values[1].Length > 0 && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }
        #endregion  ********** End Validation ********
        private void ReadOnlyNoRepeatVitalControl()
        {
            txtSystolic.ReadOnly = true;
            txtDiastolic.ReadOnly = true;
            txtPulseOximetry.ReadOnly = true;
            txtRespirationRate.ReadOnly = true;
            txtPulseRate.ReadOnly = true;
            txtTempVital.ReadOnly = true;
            txtEquipID.ReadOnly = true;
            txtTempEquipmentID.ReadOnly = true;
            txtDateTimeNoR.ReadOnly = true;
            btnSaveVital.Enabled = false;
        }
        private void ReadOnlyFirstRepeatVitalControl()
        {
            txtSBPR1.ReadOnly = true;
            txtDBPR1.ReadOnly = true;
            txtPOR1.ReadOnly = true;
            txtRRateR1.ReadOnly = true;
            txtPRateR1.ReadOnly = true;
            txtTR1.ReadOnly = true;
            txtEquipIDR1.ReadOnly = true;
            txtTempEquipmentIDR1.ReadOnly = true;
            txtTimeR1.ReadOnly = true;
            btneSignR1.Enabled = false;
        }
        private void ReadOnlySecondRepeatVitalControl()
        {
            txtSBPR2.ReadOnly = true;
            txtDBPR2.ReadOnly = true;
            txtPOR2.ReadOnly = true;
            txtRRateR2.ReadOnly = true;
            txtPRateR2.ReadOnly = true;
            txtTR2.ReadOnly = true;
            txtEquipIDR2.ReadOnly = true;
            txtTempEquipmentIDR2.ReadOnly = true;
            txtTimeR2.ReadOnly = true;
            btneSignR2.Enabled = false;
        }
        private void ChekValueInRange()
        {
            // ...... No Repeat............
            if (!string.IsNullOrEmpty(txtSystolic.Text))
            {
                if (Convert.ToDecimal(txtSystolic.Text) >= CheckSystolicDiastolicRange()[0] && Convert.ToDecimal(txtSystolic.Text) <= CheckSystolicDiastolicRange()[1])
                {
                    txtSystolic.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtSystolic.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtDiastolic.Text))
            {
                if (Convert.ToDecimal(txtDiastolic.Text) >= CheckSystolicDiastolicRange()[2] && Convert.ToDecimal(txtDiastolic.Text) <= CheckSystolicDiastolicRange()[3])
                {
                    txtDiastolic.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtDiastolic.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtPulseRate.Text))
            {
                if (Convert.ToInt32(txtPulseRate.Text) >= 50 && Convert.ToInt32(txtPulseRate.Text) <= 100)
                {
                    txtPulseRate.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtPulseRate.ForeColor = System.Drawing.Color.Red;
                }
            }

            if (!string.IsNullOrEmpty(txtRespirationRate.Text))
            {
                if (Convert.ToDecimal(txtRespirationRate.Text) >= 12 && Convert.ToDecimal(txtRespirationRate.Text) <= 20)
                {
                    txtRespirationRate.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtRespirationRate.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtTempVital.Text))
            {
                if (decimal.Parse(txtTempVital.Text) >= 95.7m && decimal.Parse(txtTempVital.Text) <= 99.5m)
                {
                    txtTempVital.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtTempVital.ForeColor = System.Drawing.Color.Red;
                }
            }
            //............. First Repeat...............

            if (!string.IsNullOrEmpty(txtSBPR1.Text))
            {
                if (Convert.ToInt32(txtSBPR1.Text) >= 90 && Convert.ToInt32(txtSBPR1.Text) <= 150)
                {
                    txtSBPR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtSBPR1.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtDBPR1.Text))
            {
                if (Convert.ToInt32(txtDBPR1.Text) >= 50 && Convert.ToInt32(txtDBPR1.Text) <= 90)
                {
                    txtDBPR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtDBPR1.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtPRateR1.Text))
            {
                if (Convert.ToInt32(txtPRateR1.Text) >= 50 && Convert.ToInt32(txtPRateR1.Text) <= 100)
                {
                    txtPRateR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtPRateR1.ForeColor = System.Drawing.Color.Red;
                }
            }

            if (!string.IsNullOrEmpty(txtRRateR1.Text))
            {
                if (Convert.ToDecimal(txtRRateR1.Text) >= 12 && Convert.ToDecimal(txtRRateR1.Text) <= 20)
                {
                    txtRRateR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtRRateR1.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtTR1.Text))
            {
                if (decimal.Parse(txtTR1.Text) >= 95.7m && decimal.Parse(txtTR1.Text) <= 99.5m)
                {
                    txtTR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtTR1.ForeColor = System.Drawing.Color.Red;
                }
            }

            //............. Second Repeat...............

            if (!string.IsNullOrEmpty(txtSBPR2.Text))
            {
                if (Convert.ToInt32(txtSBPR2.Text) >= 90 && Convert.ToInt32(txtSBPR2.Text) <= 150)
                {
                    txtSBPR2.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtSBPR2.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtDBPR2.Text))
            {
                if (Convert.ToInt32(txtDBPR2.Text) >= 50 && Convert.ToInt32(txtDBPR2.Text) <= 90)
                {
                    txtDBPR2.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtDBPR2.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtPRateR2.Text))
            {
                if (Convert.ToInt32(txtPRateR2.Text) >= 50 && Convert.ToInt32(txtPRateR2.Text) <= 100)
                {
                    txtPRateR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtPRateR1.ForeColor = System.Drawing.Color.Red;
                }
            }

            if (!string.IsNullOrEmpty(txtRRateR2.Text))
            {
                if (Convert.ToDecimal(txtRRateR2.Text) >= 12 && Convert.ToDecimal(txtRRateR2.Text) <= 20)
                {
                    txtRRateR2.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtRRateR2.ForeColor = System.Drawing.Color.Red;
                }

            }
            if (!string.IsNullOrEmpty(txtTR2.Text))
            {
                if (decimal.Parse(txtTR2.Text) >= 95.7m && decimal.Parse(txtTR2.Text) <= 99.5m)
                {
                    txtTR2.ForeColor = System.Drawing.Color.Green;

                }
                else

                {

                    txtTR2.ForeColor = System.Drawing.Color.Red;
                }
            }
        }

        /// <summary>
        /// Check if Subejct has been seated prior for Vitals 
        /// </summary>
        private void SubjectSeatedPriorToVitals()
        {
            if (!cbConfirmSubjectSeated.Checked)
            {
                CommonHelpers.SetReadOnlyProperties(GBNoRepeatVital, true);
                CommonHelpers.SetReadOnlyProperties(GBVitalR1, true);
                CommonHelpers.SetReadOnlyProperties(GBVitalR2, true);
                //foreach (Control ctrl in GBNoRepeatVital.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                //foreach (Control ctrl in GBVitalR1.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                //foreach (Control ctrl in GBVitalR2.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                btnRepeatVital.Enabled = false;
                txtVitalComments.ReadOnly = false;
                ChekValueInRange();
            }
            else if (cbConfirmSubjectSeated.Checked && OnScreeningHelper.IsVitalESigned(studyId, ValueOfKey) && !OnScreeningHelper.IsVitalsRepeat1Signed(studyId, ValueOfKey))
            {

                //foreach (Control ctrl in GBNoRepeatVital.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                ReadOnlyNoRepeatVitalControl();
                if (GetFirstVitalPassedTime() <= 0 && GetFirstVitalPassedTime() <= 60)
                {
                    GBVitalR1.Visible = true;
                }
                ChekValueInRange();
            }
            else if (cbConfirmSubjectSeated.Checked && OnScreeningHelper.IsVitalsRepeat1Signed(studyId, ValueOfKey))
            {

                //foreach (Control ctrl in GBNoRepeatVital.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                //foreach (Control ctrl in GBVitalR1.Controls)
                //{
                //    ctrl.Enabled = false;
                //}
                ReadOnlyNoRepeatVitalControl();
                ReadOnlyFirstRepeatVitalControl();
                GBVitalR1.Visible = true;
                if (GetVitalFirstRepeatPassedTime() <= 0)
                {
                    GBVitalR2.Visible = true;
                }
                if (!OnScreeningHelper.IsVitalsRepeat2Signed(studyId, ValueOfKey))
                {
                    GBVitalR2.Visible = false;
                }
                ChekValueInRange();
            }


        }

        /// <summary>
        /// if Pulse Oximetry
        /// </summary>
        /// <returns></returns>
        private void PulseOximetryRequired()
        {
            if (OnScreeningHelper.IsPulseOximetryRequired(studyId))
            {
                lblPulseOxi.Visible = true;
                lblPulseOxiR1.Visible = true;
                txtPulseOximetry.Visible = true;
                lblPulseOxiUnit.Visible = true;
                txtPOR1.Visible = true;
                txtPOR2.Visible = true;
            }
            else
            {
                lblPulseOxi.Visible = false;
                lblPulseOxiR2.Visible = false;
                txtPulseOximetry.Visible = false;
                lblPulseOxiUnit.Visible = false;
                txtPOR1.Visible = false;
                txtPOR2.Visible = false;
            }
        }

        // ================================== Repeat===================================
        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void RepeatedValuesSystolicDiaStolic()
        {
            string subjectKey = string.Empty;
            string equipmentID = string.Empty;
            decimal systolicBloodPressure = default(decimal);
            decimal diastolicBloodPressure = default(decimal);
            decimal pulseOximetry = default(decimal);
            decimal pulseRate = default(decimal);
            decimal respirationRate = default(decimal);
            txtSBPR1.NullText = string.Empty;
            txtSBPR1.NullText = string.Empty;
            txtDBPR1.NullText = string.Empty;
            txtPRateR1.NullText = string.Empty;
            txtPOR1.NullText = string.Empty;
            txtRRateR1.NullText = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT EquipmentID,SystolicBloodPressure,DiastolicBloodPressure,PulseRate,RespirationRate,PulseOximetry FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        equipmentID = reader["EquipmentID"].ToString();
                        systolicBloodPressure = string.IsNullOrEmpty(reader["SystolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["SystolicBloodPressure"].ToString());
                        diastolicBloodPressure = string.IsNullOrEmpty(reader["DiastolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["DiastolicBloodPressure"].ToString());
                        pulseRate = string.IsNullOrEmpty(reader["PulseRate"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseRate"].ToString());
                        pulseOximetry = string.IsNullOrEmpty(reader["PulseOximetry"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseOximetry"].ToString());
                        respirationRate = string.IsNullOrEmpty(reader["RespirationRate"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["RespirationRate"].ToString());
                        bool _isPOReqAndInRange = default(bool);
                        if (OnScreeningHelper.IsPulseOximetryRequired(studyId))
                        {
                            if (CommonHelpers.IsPulseOximetryInRange(pulseOximetry))
                                _isPOReqAndInRange = true;
                            else
                                _isPOReqAndInRange = false;
                        }
                        else
                            _isPOReqAndInRange = true;
                        if (CommonHelpers.IsSystolicBPInRange(systolicBloodPressure) && CommonHelpers.IsDiastolicBPInRange(diastolicBloodPressure) && CommonHelpers.IsPulseRateInRange(pulseRate) && _isPOReqAndInRange)
                        {
                            //txtDateTimeR1.NullText = "N/A";
                            //txtDateTimeR1.ReadOnly = true;
                            //txtTimeR1.NullText = "N/A";
                            //txtTimeR1.ReadOnly = true;
                            //txtEquipIDR1.NullText = "N/A";
                            //txtEquipIDR1.ReadOnly = true;
                            txtSBPR1.ForeColor = System.Drawing.Color.Green;
                            txtSBPR1.NullText = "N/A"; //systolicBloodPressure.ToString();
                            txtSBPR1.ReadOnly = true;
                            txtDBPR1.ForeColor = System.Drawing.Color.Green;
                            txtDBPR1.NullText = "N/A"; //systolicBloodPressure.ToString();
                            txtDBPR1.ReadOnly = true;
                            txtPRateR1.ForeColor = System.Drawing.Color.Green;
                            txtPRateR1.NullText = "N/A";// systolicBloodPressure.ToString();
                            txtPRateR1.ReadOnly = true;
                            txtPOR1.ForeColor = System.Drawing.Color.Green;
                            txtPOR1.NullText = "N/A";// pulseOximetry.ToString();
                            txtPOR1.ReadOnly = true;
                        }
                        else
                        {
                            // txtDateTimeR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
                            //txtSBPR1.Clear();
                            //txtSBPR1.Enabled = true;
                            //txtSBPR1.ReadOnly = false;
                            //txtDBPR1.Clear();
                            //txtDBPR1.Enabled = true;
                            //txtDBPR1.ReadOnly = false;
                            //txtPRateR1.Clear();
                            //txtPRateR1.Enabled = true;
                            //txtPRateR1.ReadOnly = false;
                            //txtPRateR1.Clear();
                            //txtPRateR1.Enabled = true;
                            //txtPRateR1.ReadOnly = false;
                            //txtPOR1.Clear();
                            //txtPOR1.Enabled = true;
                            //txtPOR1.ReadOnly = false;
                        }

                        if (CommonHelpers.IsRespirationInRange(respirationRate))
                        {
                            txtRRateR1.ForeColor = System.Drawing.Color.Green;
                            txtRRateR1.NullText = "N/A"; //respirationRate.ToString();
                            txtRRateR1.ReadOnly = true;
                        }
                        else
                        {
                            txtRRateR1.Clear();
                        }
                    }
                }
                conn.Close();
            }
        }

        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void RepeatedValuesTempreture()
        {
            string subjectKey = string.Empty;

            decimal temp = default(decimal);
            string tempEquipmentID = string.Empty;
            txtTR1.NullText = string.Empty;
            txtTempEquipmentIDR1.Text = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT TempEquipmentID,Tempreature FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        tempEquipmentID = reader["TempEquipmentID"].ToString();
                        temp = string.IsNullOrEmpty(reader["Tempreature"].ToString()) ? temp : Convert.ToDecimal(reader["Tempreature"].ToString());
                        if (CommonHelpers.IsTemperatureInRange(temp))
                        {
                            txtTempEquipmentIDR1.Text = "N/A";// tempEquipmentID;
                            txtTempEquipmentIDR1.ReadOnly = true;
                            txtTR1.ForeColor = System.Drawing.Color.Green;
                            txtTR1.NullText = "N/A";// temp.ToString();
                            //double _temp = default(double);
                            //if (double.TryParse(reader["Tempreature"].ToString(), out _temp))
                            //    txtTempVitalCR1.Text = CommonHelpers.ToCelsius(_temp).ToString();
                            //else
                            //    txtTempVitalCR1.ResetText();
                            txtTR1.ReadOnly = true;
                        }
                        else
                        {
                            txtTempEquipmentIDR1.Clear();
                            txtTR1.Clear();
                            //txtTempEquipmentIDR1.Enabled = true;
                            //txtTempEquipmentIDR1.ReadOnly = false;                            
                            //txtTR1.Enabled = true;
                            //txtTR1.ReadOnly = false;
                        }

                    }
                }
                conn.Close();
            }

        }

        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void SecondRepeatValuesSystolicDiaStolic()
        {
            string subjectKey = string.Empty;
            string equipmentID = string.Empty;
            decimal systolicBloodPressure = default(decimal);
            decimal diastolicBloodPressure = default(decimal);
            decimal pulseOximetry = default(decimal);
            decimal pulseRate = default(decimal);
            decimal respirationRate = default(decimal);

            txtRRateR2.NullText = string.Empty;
            txtSBPR2.NullText = string.Empty;
            txtDBPR2.NullText = string.Empty;
            txtPRateR2.NullText = string.Empty;
            txtPOR2.NullText = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT EquipmentIDR1,SystolicBloodPressure,DiastolicBloodPressure,PulseRate,PulseOximetry,RespirationRate,SystolicBloodPressureR1,DiastolicBloodPressureR1,PulseRateR1,RespirationRateR1,PulseOximetryR1 FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {

                        equipmentID = reader["EquipmentIDR1"].ToString();
                        systolicBloodPressure = string.IsNullOrEmpty(reader["SystolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["SystolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["SystolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["SystolicBloodPressureR1"].ToString());
                        diastolicBloodPressure = string.IsNullOrEmpty(reader["DiastolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["DiastolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["DiastolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["DiastolicBloodPressureR1"].ToString());
                        pulseRate = string.IsNullOrEmpty(reader["PulseRateR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseRate"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseRate"].ToString()) : Convert.ToDecimal(reader["PulseRateR1"].ToString());
                        pulseOximetry = string.IsNullOrEmpty(reader["PulseOximetryR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseOximetry"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseOximetry"].ToString()) : Convert.ToDecimal(reader["PulseOximetryR1"].ToString());
                        respirationRate = string.IsNullOrEmpty(reader["RespirationRateR1"].ToString()) ? string.IsNullOrEmpty(reader["RespirationRate"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["RespirationRate"].ToString()) : Convert.ToDecimal(reader["RespirationRateR1"].ToString());
                        bool _isPOReqAndInRange = default(bool);
                        if (OnScreeningHelper.IsPulseOximetryRequired(studyId))
                        {
                            if (CommonHelpers.IsPulseOximetryInRange(pulseOximetry))
                                _isPOReqAndInRange = true;
                            else
                                _isPOReqAndInRange = false;
                        }
                        else
                            _isPOReqAndInRange = true;
                        if (CommonHelpers.IsSystolicBPInRange(systolicBloodPressure) && CommonHelpers.IsDiastolicBPInRange(diastolicBloodPressure) && CommonHelpers.IsPulseRateInRange(pulseRate) && _isPOReqAndInRange)
                        {
                            txtSBPR2.ForeColor = System.Drawing.Color.Green;
                            txtSBPR2.NullText = "N/A";// systolicBloodPressure.ToString();
                            txtSBPR2.ReadOnly = true;
                            txtDBPR2.ForeColor = System.Drawing.Color.Green;
                            txtDBPR2.NullText = "N/A";// diastolicBloodPressure.ToString();
                            txtDBPR2.ReadOnly = true;
                            txtPRateR2.ForeColor = System.Drawing.Color.Green;
                            txtPRateR2.NullText = "N/A";// pulseRate.ToString();
                            txtPRateR2.ReadOnly = true;
                            txtPOR2.ForeColor = System.Drawing.Color.Green;
                            txtPOR2.NullText = "N/A";// pulseOximetry.ToString();
                            txtPOR2.ReadOnly = true;
                        }
                        else
                        {
                            // txtDateTimeR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
                            //txtSBPR2.Clear();
                            //txtSBPR2.Enabled = true;
                            //txtSBPR2.ReadOnly = false;
                            //txtDBPR2.Clear();
                            //txtDBPR2.Enabled = true;
                            //txtDBPR2.ReadOnly = false;
                            //txtPRateR2.Clear();
                            //txtPRateR2.Enabled = true;
                            //txtPRateR2.ReadOnly = false;
                            //txtPOR2.Clear();
                            //txtPOR2.Enabled = true;
                            //txtPOR2.ReadOnly = false;
                        }
                        if (CommonHelpers.IsRespirationInRange(respirationRate))
                        {
                            txtRRateR2.ForeColor = System.Drawing.Color.Green;
                            txtRRateR2.NullText = "N/A"; //respirationRate.ToString();
                            txtRRateR2.ReadOnly = true;
                        }
                        else
                        {
                            txtRRateR2.ForeColor = System.Drawing.Color.Red;
                            //txtRRateR2.Clear();
                            //txtRRateR2.ReadOnly = false;
                            //txtRRateR2.Enabled = true;
                        }

                    }
                }

                conn.Close();
            }

        }

        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void SecondRepeatdValuesTempreture()
        {
            string subjectKey = string.Empty;
            decimal temp = default(decimal);
            string tempEquipmentID = string.Empty;
            txtTempEquipmentIDR2.Text = string.Empty;
            txtTR2.NullText = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT TempEquipmentID,Tempreature,TempEquipmentIDR1,TempreatureR1 FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        tempEquipmentID = reader["TempEquipmentIDR1"].ToString();
                        temp = string.IsNullOrEmpty(reader["TempreatureR1"].ToString()) ? string.IsNullOrEmpty(reader["Tempreature"].ToString()) ? temp : Convert.ToDecimal(reader["Tempreature"].ToString()) : Convert.ToDecimal(reader["TempreatureR1"].ToString());
                        if (CommonHelpers.IsTemperatureInRange(temp))
                        {
                            txtTempEquipmentIDR2.Text = "N/A";// tempEquipmentID;
                            txtTempEquipmentIDR2.ReadOnly = true;
                            txtTR2.ForeColor = System.Drawing.Color.Green;
                            txtTR2.NullText = "N/A";
                            txtTR2.ReadOnly = true;
                        }
                        else
                        {
                            txtTR2.ForeColor = System.Drawing.Color.Red;
                            txtTempEquipmentIDR2.Clear();
                            txtTR2.Clear();
                        }

                    }
                }

                conn.Close();
            }

        }

        /// <summary>
        ///  Check Range (Systolic & Diastolic)
        /// </summary>
        private List<decimal> CheckSystolicDiastolicRange()
        {
            List<decimal> rangeList = new List<decimal>();
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT VitalSignSystolicMin,VitalSignSystolicMax,VitalSignDiastolicMin,VitalSignDiastolicMax FROM [dbo].[ScreeningSetupVariables] WHERE StudyID=@studyId ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyId", studyId);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        rangeList.Add(Convert.ToDecimal(reader["VitalSignSystolicMin"].ToString()));
                        rangeList.Add(Convert.ToDecimal(reader["VitalSignSystolicMax"].ToString()));
                        rangeList.Add(Convert.ToDecimal(reader["VitalSignDiastolicMin"].ToString()));
                        rangeList.Add(Convert.ToDecimal(reader["VitalSignDiastolicMax"].ToString()));

                    }
                }

                conn.Close();
            }
            return rangeList;
        }

        /// <summary>
        /// Check if No Repeat values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckNoRepeatValuesInRange(decimal? systolicBloodPressure = null, decimal? diastolicBloodPressure = null, decimal? pulseRate = null, decimal? respirationRate = null, decimal? Temperature = null, decimal? pulseOximetry = null)
        {
            string subjectKey = string.Empty;
            string equipmentID = string.Empty;
            if (systolicBloodPressure == null && diastolicBloodPressure == null && pulseRate == null && respirationRate == null && Temperature == null && pulseOximetry == null)
            {
                //decimal systolicBloodPressure = default(decimal), diastolicBloodPressure = default(decimal), pulseRate = default(decimal), respirationRate = default(decimal), Temperature = default(decimal), pulseOximetry = default(decimal);
                using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    conn.Open();
                    string query = string.Format(@"SELECT SystolicBloodPressure,DiastolicBloodPressure,PulseRate,PulseOximetry,RespirationRate,Tempreature FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                    SqlCommand command = new SqlCommand(query, conn);
                    command.Parameters.AddWithValue("@studyid", studyId);
                    command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                    // int result = command.ExecuteNonQuery();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            systolicBloodPressure = string.IsNullOrEmpty(reader["SystolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["SystolicBloodPressure"].ToString());
                            diastolicBloodPressure = string.IsNullOrEmpty(reader["DiastolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["DiastolicBloodPressure"].ToString());
                            pulseRate = string.IsNullOrEmpty(reader["PulseRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["PulseRate"].ToString());
                            respirationRate = string.IsNullOrEmpty(reader["RespirationRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["RespirationRate"].ToString());
                            Temperature = string.IsNullOrEmpty(reader["Tempreature"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["Tempreature"].ToString());
                            pulseOximetry = string.IsNullOrEmpty(reader["PulseOximetry"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseOximetry"].ToString());
                        }
                    }

                    conn.Close();
                }
            }
            bool _PORequired = OnScreeningHelper.IsPulseOximetryRequired(studyId);
            if (CommonHelpers.IsSystolicBPInRange(systolicBloodPressure, studyId) && CommonHelpers.IsDiastolicBPInRange(diastolicBloodPressure, studyId) && CommonHelpers.IsPulseRateInRange(pulseRate, studyId) && CommonHelpers.IsRespirationInRange(respirationRate, studyId) && CommonHelpers.IsTemperatureInRange(Temperature, studyId) && (!_PORequired || (_PORequired && CommonHelpers.IsPulseOximetryInRange(pulseOximetry, studyId))))
                return true;
            else
                return false;
        }

        /// <summary>
        /// Check if First values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckFirstRepeatValuesInRange(decimal? systolicBloodPressureR1 = null, decimal? diastolicBloodPressureR1 = null, decimal? pulseRateR1 = null, decimal? respirationRateR1 = null, decimal? TemperatureR1 = null, decimal? pulseOximetryR1 = null)
        {
            string subjectKey = string.Empty;
            //  decimal systolicBloodPressureR1 = default(decimal), diastolicBloodPressureR1 = default(decimal), pulseRateR1 = default(decimal), respirationRateR1 = default(decimal), TemperatureR1 = default(decimal), pulseOximetryR1 = default(decimal);
            if (systolicBloodPressureR1 == null && diastolicBloodPressureR1 == null && pulseRateR1 == null && respirationRateR1 == null && TemperatureR1 == null && pulseOximetryR1 == null)
            {
                using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    conn.Open();
                    string query = string.Format(@"SELECT SystolicBloodPressure,SystolicBloodPressureR1,DiastolicBloodPressure,DiastolicBloodPressureR1,PulseRate,PulseRateR1,PulseOximetry,PulseOximetryR1,RespirationRate,RespirationRateR1,Tempreature,TempreatureR1 FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                    SqlCommand command = new SqlCommand(query, conn);
                    command.Parameters.AddWithValue("@studyid", studyId);
                    command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                    // int result = command.ExecuteNonQuery();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            systolicBloodPressureR1 = string.IsNullOrEmpty(reader["SystolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["SystolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["SystolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["SystolicBloodPressureR1"].ToString());
                            diastolicBloodPressureR1 = string.IsNullOrEmpty(reader["DiastolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["DiastolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["DiastolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["DiastolicBloodPressureR1"].ToString());
                            pulseRateR1 = string.IsNullOrEmpty(reader["PulseRateR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["PulseRate"].ToString()) : Convert.ToInt32(reader["PulseRateR1"].ToString());
                            respirationRateR1 = string.IsNullOrEmpty(reader["RespirationRateR1"].ToString()) ? string.IsNullOrEmpty(reader["RespirationRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["RespirationRate"].ToString()) : Convert.ToInt32(reader["RespirationRateR1"].ToString());
                            TemperatureR1 = string.IsNullOrEmpty(reader["TempreatureR1"].ToString()) ? string.IsNullOrEmpty(reader["Tempreature"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["Tempreature"].ToString()) : Convert.ToDecimal(reader["TempreatureR1"].ToString());
                            pulseOximetryR1 = string.IsNullOrEmpty(reader["PulseOximetryR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseOximetry"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseOximetry"].ToString()) : Convert.ToDecimal(reader["PulseOximetryR1"].ToString());
                        }
                    }
                    conn.Close();
                }
            }
            bool _PORequired = OnScreeningHelper.IsPulseOximetryRequired(studyId);
            if (CommonHelpers.IsSystolicBPInRange(systolicBloodPressureR1, studyId) && CommonHelpers.IsDiastolicBPInRange(diastolicBloodPressureR1, studyId) && CommonHelpers.IsPulseRateInRange(pulseRateR1, studyId) && CommonHelpers.IsRespirationInRange(respirationRateR1, studyId) && CommonHelpers.IsTemperatureInRange(TemperatureR1, studyId) && (!_PORequired || (_PORequired && CommonHelpers.IsPulseOximetryInRange(pulseOximetryR1, studyId))))
                return true;
            else
                return false;
        }

        /// <summary>
        /// Check if Second values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckSecondRepeatValuesInRange(decimal? systolicBloodPressureR2 = null, decimal? diastolicBloodPressureR2 = null, decimal? pulseRateR2 = null, decimal? respirationRateR2 = null, decimal? TemperatureR2 = null, decimal? pulseOximetryR2 = null)
        {
            string subjectKey = string.Empty;
            // decimal systolicBloodPressureR2 = default(decimal), diastolicBloodPressureR2 = default(decimal), pulseRateR2 = default(decimal), respirationRateR2 = default(decimal), TemperatureR2 = default(decimal), pulseOximetryR2 = default(decimal);
            if (systolicBloodPressureR2 == null && diastolicBloodPressureR2 == null && pulseRateR2 == null && respirationRateR2 == null && TemperatureR2 == null && pulseOximetryR2 == null)
            {
                using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    conn.Open();
                    string query = string.Format(@"SELECT SystolicBloodPressure,SystolicBloodPressureR1,DiastolicBloodPressure,DiastolicBloodPressureR1,PulseRate,PulseRateR1,PulseOximetry,PulseOximetryR1,RespirationRate,RespirationRateR1,Tempreature,TempreatureR1,SystolicBloodPressureR2,DiastolicBloodPressureR2,PulseRateR2,PulseOximetryR2,RespirationRateR2,TempreatureR2 FROM [dbo].[ScreeningVital] WHERE StudyID=@studyid AND SubjectKey=@subjectKey and Visit=" + Visit);
                    SqlCommand command = new SqlCommand(query, conn);
                    command.Parameters.AddWithValue("@studyid", studyId);
                    command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                    // int result = command.ExecuteNonQuery();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            systolicBloodPressureR2 = string.IsNullOrEmpty(reader["SystolicBloodPressureR2"].ToString()) ? string.IsNullOrEmpty(reader["SystolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["SystolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["SystolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["SystolicBloodPressureR1"].ToString()) : Convert.ToDecimal(reader["SystolicBloodPressureR2"].ToString());
                            diastolicBloodPressureR2 = string.IsNullOrEmpty(reader["DiastolicBloodPressureR2"].ToString()) ? string.IsNullOrEmpty(reader["DiastolicBloodPressureR1"].ToString()) ? string.IsNullOrEmpty(reader["DiastolicBloodPressure"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["DiastolicBloodPressure"].ToString()) : Convert.ToDecimal(reader["DiastolicBloodPressureR1"].ToString()) : Convert.ToDecimal(reader["DiastolicBloodPressureR2"].ToString());
                            pulseRateR2 = string.IsNullOrEmpty(reader["PulseRateR2"].ToString()) ? string.IsNullOrEmpty(reader["PulseRateR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["PulseRate"].ToString()) : Convert.ToInt32(reader["PulseRateR1"].ToString()) : Convert.ToInt32(reader["PulseRateR2"].ToString());
                            respirationRateR2 = string.IsNullOrEmpty(reader["RespirationRateR2"].ToString()) ? string.IsNullOrEmpty(reader["RespirationRateR1"].ToString()) ? string.IsNullOrEmpty(reader["RespirationRate"].ToString()) ? default(decimal) : Convert.ToInt32(reader["RespirationRate"].ToString()) : Convert.ToInt32(reader["RespirationRateR1"].ToString()) : Convert.ToInt32(reader["RespirationRateR2"].ToString());
                            TemperatureR2 = string.IsNullOrEmpty(reader["TempreatureR2"].ToString()) ? string.IsNullOrEmpty(reader["TempreatureR1"].ToString()) ? string.IsNullOrEmpty(reader["Tempreature"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["Tempreature"].ToString()) : Convert.ToDecimal(reader["TempreatureR1"].ToString()) : Convert.ToDecimal(reader["TempreatureR2"].ToString());
                            pulseOximetryR2 = string.IsNullOrEmpty(reader["PulseOximetryR2"].ToString()) ? string.IsNullOrEmpty(reader["PulseOximetryR1"].ToString()) ? string.IsNullOrEmpty(reader["PulseOximetry"].ToString()) ? default(decimal) : Convert.ToDecimal(reader["PulseOximetry"].ToString()) : Convert.ToDecimal(reader["PulseOximetryR1"].ToString()) : Convert.ToDecimal(reader["PulseOximetryR2"].ToString());
                        }
                    }
                    conn.Close();
                }
            }
            bool _PORequired = OnScreeningHelper.IsPulseOximetryRequired(studyId);
            if (CommonHelpers.IsSystolicBPInRange(systolicBloodPressureR2, studyId) && CommonHelpers.IsDiastolicBPInRange(diastolicBloodPressureR2, studyId) && CommonHelpers.IsPulseRateInRange(pulseRateR2, studyId) && CommonHelpers.IsRespirationInRange(respirationRateR2, studyId) && CommonHelpers.IsTemperatureInRange(TemperatureR2, studyId) && (!_PORequired || (_PORequired && CommonHelpers.IsPulseOximetryInRange(pulseOximetryR2, studyId))))
                return true;
            else
                return false;
        }

        /// <summary>
        /// Remaining Time for the first repeat
        /// </summary>
        /// <returns></returns>
        private int GetFirstVitalPassedTime()
        {
            int output = default(int);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "select dbo.spGetRemainingTimeForVital('" + studyId + "','" + ValueOfKey + "'," + Visit + ",'" + DateTime.Now + "')";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = (int)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }

        /// <summary>
        /// Remaining Time for the second repeat
        /// </summary>
        /// <returns></returns>
        private int GetVitalFirstRepeatPassedTime()
        {
            int output = default(int);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "select dbo.spGetRemainingTimeForVitalR1('" + studyId + "','" + ValueOfKey + "'," + Visit + ",'" + DateTime.Now + "')";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = (int)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;

        }

        //====================================== eSign===============================
        /// <summary>
        /// Before Repeat check if all fields are filled then show Repeat(1) or Repeat(2) base on the times of repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRepeatVital_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                string _repeatReqNo = string.Empty;

                // bool _isVitalRepeatReq = false;
                int _timePassedFromLastVital = 0;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT * FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + ValueOfKey + "' and Visit=" + Visit + ")");
                    DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    if (_dtExist.Rows.Count > 0)
                    {
                        //  _repeatReqNo = OnScreeningHelper.GetVitalRepeat(studyId, ValueOfKey);
                        //if (!string.IsNullOrEmpty(_dtExist.Rows[0]["IsRepeatRequired"].ToString()))
                        //{
                        //    _isVitalRepeatReq = Convert.ToBoolean(_dtExist.Rows[0]["IsRepeatRequired"].ToString());
                        //}
                        if (!string.IsNullOrEmpty(_dtExist.Rows[0]["eSignedBy"].ToString()) && string.IsNullOrEmpty(_dtExist.Rows[0]["eSignedByR1"].ToString()))
                            _repeatReqNo = "Repeat1";
                        else if (!string.IsNullOrEmpty(_dtExist.Rows[0]["eSignedByR1"].ToString()) && string.IsNullOrEmpty(_dtExist.Rows[0]["eSignedByR2"].ToString()))
                            _repeatReqNo = "Repeat2";
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Vital has not been started yet.", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                }

                RadTextBox[] VitaltextBoxes = null;
                RadTextBox[] VitaltextBoxesRepeat1 = null;
                if (_repeatReqNo.Equals("Repeat1")) //(VitaltextBoxes.Any(x => x.Visible == true) && VitaltextBoxesRepeat1.Any(x => x.Visible == false))
                {
                    if (txtPulseOximetry.Visible)
                        VitaltextBoxes = new RadTextBox[] { txtEquipID, txtSystolic, txtDiastolic, txtPulseRate, txtPulseOximetry, txtRespirationRate, txtTempEquipmentID, txtTempVital, txtDateTimeNoR };
                    else
                    {
                        VitaltextBoxes = new RadTextBox[] { txtEquipID,txtSystolic, txtDiastolic, txtPulseRate, txtRespirationRate,txtTempEquipmentID,
                                txtTempVital,txtDateTimeNoR};
                    }
                    if (VitaltextBoxes.Any(tb => string.IsNullOrEmpty(tb.Text.Trim()) && !tb.NullText.Trim().Equals("N/A")))
                    {
                        HelperFunctions.ShowMessageBox("All fields are required", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        foreach (RadTextBox txtbox in VitaltextBoxes)
                        {
                            if (string.IsNullOrEmpty(txtbox.Text.Trim()))
                            {
                                ValidationError.SetError(txtbox, "Field can not be empty");
                            }
                            else
                            {
                                ValidationError.Clear();
                            }
                        }
                        return;
                    }
                    else
                    {
                        _timePassedFromLastVital = GetFirstVitalPassedTime();
                    }
                }
                else if (_repeatReqNo.Equals("Repeat2"))
                {
                    if (txtPOR1.Visible)
                        VitaltextBoxesRepeat1 = new RadTextBox[] { txtEquipIDR1, txtSBPR1, txtDBPR1, txtPRateR1, txtRRateR1, txtPOR1, txtTempEquipmentIDR1, txtTR1, txtDateTimeR1 };
                    else
                    {
                        VitaltextBoxesRepeat1 = new RadTextBox[] { txtEquipIDR1, txtSBPR1, txtDBPR1, txtPRateR1, txtRRateR1, txtTempEquipmentIDR1, txtTR1, txtDateTimeR1 };
                    }
                    if (VitaltextBoxesRepeat1.Any(tb => string.IsNullOrEmpty(tb.Text.Trim()) && !tb.NullText.Trim().Equals("N/A")))
                    {
                        HelperFunctions.ShowMessageBox("All fields are required", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        foreach (RadTextBox txtbox in VitaltextBoxesRepeat1)
                        {
                            if (string.IsNullOrEmpty(txtbox.Text.Trim()))
                            {
                                ValidationError.SetError(txtbox, "Field can not be empty");
                            }
                            else
                            {
                                ValidationError.Clear();
                            }
                        }
                        return;
                    }
                    else
                    {
                        _timePassedFromLastVital = GetVitalFirstRepeatPassedTime();
                    }
                }
                if (_timePassedFromLastVital < 10 || _timePassedFromLastVital > 60)
                {
                    TimeSpan _ts = new TimeSpan(0, _timePassedFromLastVital, 0);
                    string _msg = string.Empty;
                    if (_ts.Hours > 0)
                        _msg += _ts.Hours + " hour(s) ";
                    if (_ts.Minutes > 0)
                        _msg += _ts.Minutes + " minute(s) ";
                    if (HelperFunctions.ShowMessageBox("Vital was done " + _msg + "ago. For vital repeat you have to wait 10-60 minutes. Are you sure you want to repeat?", "Vital", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return;
                }
                tabName = "Vital";
                reason = String.Format("The Repeat Approved By :" + "" + App.EsignedUser.UserName);
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                string _updateQuery = string.Empty;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    if (_repeatReqNo.Equals("Repeat1")) //(VitaltextBoxes.Any(x => x.Visible == true) && VitaltextBoxesRepeat1.Any(x => x.Visible == false))
                    {
                        _updateQuery = "update [ScreeningVital] set IsRepeatRequired=1,RepeatRequestedByR1='" + App.EsignedUser.UserName + "',RepeatRequestedDateR1='" + DateTime.Now + "',RepeatRequestedCommentR1 = '" + txtVitalComments.Text.Trim() + "' where StudyID='" + studyId + "' and SubjectKey='" + ValueOfKey + "' and Visit=" + Visit;
                    }
                    else if (_repeatReqNo.Equals("Repeat2")) //  (VitaltextBoxesRepeat1.Any(x => x.Visible == true) && VitaltextBoxesRepeat2.Any(x => x.Visible != true))
                    {
                        _updateQuery = "update [ScreeningVital] set IsRepeatRequired=1,RepeatRequestedByR2='" + App.EsignedUser.UserName + "',RepeatRequestedDateR2='" + DateTime.Now + "',RepeatRequestedCommentR2='" + txtVitalComments.Text.Trim() + "' where StudyID='" + studyId + "' and SubjectKey='" + ValueOfKey + "' and Visit=" + Visit;
                    }
                    db.ExecuteUpdateQuery(_updateQuery, null, false);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningVital", pgvVitals.Name, "VitalsProceed", SubjectStatusCode.Status.Repeat, txtVitalComments.Text, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningVitals", SubjectStatusCode.Status.Repeat, txtVitalComments.Text.Trim());
                }
                CheckIfVitalRepeatRequired();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vitals", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                btnRepeatVital.Enabled = false;
            }

        }

        private void CheckVitalRepeat()
        {
            lblRemainingTimeToRepeat.Visible = false;
            lblRemainVitals.Visible = false;
            RemainingTimeToRepeat1.Enabled = false;
            RemainingTimeToRepeat2.Enabled = false;
            // disable vital controls after e-sign
            string _vitalRepeat = OnScreeningHelper.GetVitalRepeat(studyId, ValueOfKey);
            //check values in range
            bool _firstVitalsInRange = CheckNoRepeatValuesInRange();
            bool _secondVitalsInRange = default(bool);
            if (OnScreeningHelper.IsVitalESigned(studyId, ValueOfKey))
            {
                if (!_firstVitalsInRange && !OnScreeningHelper.IsVitalsRepeat1Signed(studyId, ValueOfKey))
                {
                    btnFailedVitals.Enabled = true;
                    // GBNoRepeatVital.Enabled = false;
                    ReadOnlyNoRepeatVitalControl(); //GetFirstVitalPassedTime() > 0 && 
                    if (GetFirstVitalPassedTime() > 0) //<60
                    {
                        var start = DateTime.Now; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                        var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                        // endTime1Vital = RemoveMiliseconds.AddMinutes(GetFirstVitalPassedTime()); //endTime is a member, not a local variable
                        endTime1Vital = RemoveMiliseconds.AddMinutes(60 - GetFirstVitalPassedTime());
                        btnRepeatVital.Enabled = true;
                        RemainingTimeToRepeat1.Enabled = true;
                    }
                    else
                    {
                        btnRepeatVital.Enabled = false;
                        RemainingTimeToRepeat1.Enabled = false;
                    }
                }
                else if (!_firstVitalsInRange && OnScreeningHelper.IsVitalsRepeat1Signed(studyId, ValueOfKey))
                {
                    _secondVitalsInRange = CheckFirstRepeatValuesInRange();
                    GBVitalR1.Visible = true;
                    if (_secondVitalsInRange)
                    {
                        btnFailedVitals.Enabled = false;
                        ReadOnlyFirstRepeatVitalControl();
                        btnRepeatVital.Enabled = false;
                        RemainingTimeToRepeat1.Enabled = false;
                    }
                    else
                    {
                        btnFailedVitals.Enabled = true;
                        if (!_secondVitalsInRange && OnScreeningHelper.IsVitalsRepeat2Signed(studyId, ValueOfKey))
                        {
                            if (CheckSecondRepeatValuesInRange())
                            {
                                btnFailedVitals.Enabled = false;
                                ReadOnlySecondRepeatECGControl();
                                btnRepeatVital.Enabled = false;
                                RemainingTimeToRepeat2.Enabled = false;
                            }
                            else
                                btnFailedVitals.Enabled = true;
                        }
                        else
                        {
                            ReadOnlyNoRepeatVitalControl();
                            ReadOnlyFirstRepeatVitalControl();
                            if (GetVitalFirstRepeatPassedTime() > 0) //<= 60
                            {
                                var start = DateTime.Now; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                                var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                                endTime2Vital = RemoveMiliseconds.AddMinutes(60 - GetVitalFirstRepeatPassedTime()); //endTime is a member, not a local variable
                                btnRepeatVital.Enabled = true;
                                RemainingTimeToRepeat2.Enabled = true;
                            }
                            else
                            {
                                btnRepeatVital.Enabled = false;
                                RemainingTimeToRepeat2.Enabled = false;
                            }
                        }

                    }
                }
                else if (_firstVitalsInRange)
                    btnFailedVitals.Enabled = false;
            }
            else
            {
                btnFailedVitals.Enabled = false;
                GBNoRepeatVital.Enabled = true;
                btnRepeatVital.Enabled = false;
                RemainingTimeToRepeat1.Enabled = false;
            }
        }
        private void CheckIfVitalRepeatRequired()
        {
            string _repeatReqNo = OnScreeningHelper.GetVitalRepeat(studyId, ValueOfKey);
            if (_repeatReqNo.Equals("Repeat1")) //(VitaltextBoxes.Any(x => x.Visible == true) && VitaltextBoxesRepeat1.Any(x => x.Visible == false))
            {
                CommonHelpers.ScrollPanelToTop(pnlSCVitalsBody);
                GBVitalR1.Visible = true;
                CommonHelpers.SetReadOnlyProperties(GBVitalR1, true);
                cbConfirmSubjectSeatedR1.ReadOnly = false;
                lblRemainingTimeToRepeat.Visible = false;
                lblRemainVitals.Visible = false;
                CommonHelpers.SetReadOnlyProperties(GBNoRepeatVital, true);
                RepeatedValuesSystolicDiaStolic();
                RepeatedValuesTempreture();
                txtTimeR1.Focus();
            }
            else if (_repeatReqNo.Equals("Repeat2")) //  (VitaltextBoxesRepeat1.Any(x => x.Visible == true) && VitaltextBoxesRepeat2.Any(x => x.Visible != true))
            {
                CommonHelpers.ScrollPanelToTop(pnlSCVitalsBody);
                CommonHelpers.SetReadOnlyProperties(GBVitalR2, true);
                cbConfirmSubjectSeatedR2.ReadOnly = false;
                GBVitalR2.Visible = true;
                lblRemainingTimeToRepeat.Visible = false;
                lblRemainVitals.Visible = false;
                CommonHelpers.SetReadOnlyProperties(GBVitalR1, true);
                SecondRepeatValuesSystolicDiaStolic();
                SecondRepeatdValuesTempreture();
                txtTimeR2.Focus();
            }
        }
        private bool IsTimeValid(string enteredDateTime, bool checkCurrentTime = true)
        {
            DateTime _time = new DateTime();
            if (DateTime.TryParse(enteredDateTime, out _time))
            {
                if (!OnScreeningHelper.IsDateTimeAfterConsent(studyId, ValueOfKey, _time))
                {
                    HelperFunctions.ShowMessageBox("Entered time must be after consent time.", ModuleNames, MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return false;
                }
                if (checkCurrentTime && !CommonHelpers.IsEnteredTimeCorrect(_time))
                {
                    if (HelperFunctions.ShowMessageBox("Entered time doesn't match with current system time. Do you want to correct it?(Yes/No)", ModuleNames, MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.Yes))
                        return false;
                }
            }
            return true;
        }

        /// <summary>
        ///  Save Body Measurement (Vital)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveVital_Click(object sender, EventArgs e)
        {
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            int _status = 0;
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    if (!string.IsNullOrEmpty(txtSystolic.Text.Trim()) && !string.IsNullOrEmpty(txtDiastolic.Text.Trim()) && !string.IsNullOrEmpty(txtPulseRate.Text.Trim()) && !string.IsNullOrEmpty(txtRespirationRate.Text.Trim()) && !string.IsNullOrEmpty(txtTempVital.Text.Trim()) && !string.IsNullOrEmpty(txtEquipID.Text.Trim()) && !string.IsNullOrEmpty(txtDateTimeNoR.Text.Trim()))
                    {
                        if (!ControlsValidator.IsValidTimeTextBox(txtTimeNoRepeat, null, "", "Vital"))
                            return;
                        if (!IsTimeValid(txtDateTimeNoR.Text.Trim() + " " + txtTimeNoRepeat.Text.Trim()))
                        {
                            txtTimeNoRepeat.Focus();
                            return;
                        }
                        if (!rdbVitalsOutRangeYes.IsChecked && !rdbVitalsOutRangeNo.IsChecked)
                        {
                            HelperFunctions.ShowMessageBox("Please check 'Out of Acceptable Range' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                            return;
                        }
                        if (!rdbVitalsCSYes.IsChecked && !rdbVitalsCSNo.IsChecked)
                        {
                            HelperFunctions.ShowMessageBox("Please check 'Clinically Significant' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                            return;
                        }
                        int _isVitalOutOfRange = 0;
                        int _isVitalsCS = 0;
                        if (rdbVitalsOutRangeYes.IsChecked)
                            _isVitalOutOfRange = 1;
                        if (rdbVitalsCSYes.IsChecked)
                            _isVitalsCS = 1;
                        using (DbConnection db = new DbConnection())
                        {
                            db.OpenConnection();
                            string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                            DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                            db.BeginTransaction();
                            string _dtVitalDateTime = (string.IsNullOrEmpty(txtDateTimeNoR.Text.Trim()) && (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim()))) ? "" : txtDateTimeNoR.Text.Trim() + " " + txtTimeNoRepeat.Text.Trim();
                            string _dtVitalDateTimeR1 = (string.IsNullOrEmpty(txtDateTimeR1.Text.Trim()) && (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim()))) ? "" : txtDateTimeR1.Text.Trim() + " " + txtTimeR1.Text.Trim();
                            string _dtVitalDateTimeR2 = (string.IsNullOrEmpty(txtDateTimeR2.Text.Trim()) && (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim()))) ? "" : txtDateTimeR2.Text.Trim() + " " + txtTimeR2.Text.Trim();
                            string _vitalTime = (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim())) ? "" : txtTimeNoRepeat.Text.Trim();
                            string _vitalTimeR1 = (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim())) ? "" : txtTimeR1.Text.Trim();
                            string _vitalTimeR2 = (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim())) ? "" : txtTimeR2.Text.Trim();
                            if (_dtExist.Rows.Count > 0)
                            {
                                tabName = "Vital";
                                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                                {
                                    return;
                                }
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsOutOfAcceptableRange1=" + _isVitalOutOfRange + ",IsClinicallySignificant1=" + _isVitalsCS + ",EquipmentID='" + txtEquipID.Text.Trim() + "',EquipmentIDR1='" + txtEquipIDR1.Text.Trim() + "',EquipmentIDR2='" + txtEquipIDR2.Text + "', SystolicBloodPressure='" + txtSystolic.Text + "',SystolicBloodPressureR1='" + txtSBPR1.Text + "' ,SystolicBloodPressureR2='" + txtSBPR2.Text + "',DiastolicBloodPressure='" + txtDiastolic.Text + "',DiastolicBloodPressureR1='" + txtDBPR1.Text + "' ,DiastolicBloodPressureR2='" + txtDBPR2.Text + "',PulseRate='" + txtPulseRate.Text + "' ,PulseRateR1='" + txtPRateR1.Text + "',PulseRateR2='" + txtPRateR2.Text + "',PulseOximetry='" + txtPulseOximetry.Text + "',PulseOximetryR1='" + txtPOR1.Text + "',PulseOximetryR2='" + txtPOR2.Text + "',RespirationRate='" + txtRespirationRate.Text + "',RespirationRateR1='" + txtRRateR1.Text + "',RespirationRateR2='" + txtRRateR2.Text + "',TempEquipmentID='" + txtTempEquipmentID.Text + "',Tempreature='" + txtTempVital.Text + "',TempEquipmentIDR1='" + txtTempEquipmentIDR1.Text + "',TempreatureR1='" + txtTR1.Text + "',TempEquipmentIDR2='" + txtTempEquipmentIDR2.Text + "',TempreatureR2='" + txtTR2.Text + "',DateTime='" + _dtVitalDateTime + "',DateTimeR1='" + _dtVitalDateTimeR1 + "',DateTimeR2='" + _dtVitalDateTimeR2 + "',Time='" + _vitalTime + "',TimeR1='" + _vitalTimeR1 + "',TimeR2='" + _vitalTimeR2 + "',SubjectStatus='" + _status + "',Comments='" + txtVitalComments.Text + "',IsSeated='" + Convert.ToInt16(cbConfirmSubjectSeated.Checked) + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedDate='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                                db.ExecuteUpdateQuery(UpdateQuery, null, false);
                            }
                            else
                            {
                                tabName = "Vital";
                                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                                {
                                    return;
                                }
                                string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningVital]
                                 (StudyID,SubjectKey,Visit,EquipmentID,EquipmentIDR1,EquipmentIDR2,SystolicBloodPressure,SystolicBloodPressureR1 ,SystolicBloodPressureR2,DiastolicBloodPressure,DiastolicBloodPressureR1 ,DiastolicBloodPressureR2,PulseRate,PulseRateR1,PulseRateR2,PulseOximetry,PulseOximetryR1,PulseOximetryR2,RespirationRate,RespirationRateR1,RespirationRateR2,TempEquipmentID,Tempreature,TempEquipmentIDR1,TempreatureR1,TempEquipmentIDR2,TempreatureR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,IsOutOfAcceptableRange1,IsClinicallySignificant1,SubjectStatus,Comments,IsSeated,eSignedBy,eSignedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + ",'" + txtEquipID.Text + "','" + txtEquipIDR1.Text + "','" + txtEquipIDR2.Text + "','" + txtSystolic.Text + "','" + txtSBPR1.Text + "','" + txtSBPR2.Text + "','" + txtDiastolic.Text + "','" + txtDBPR1.Text + "','" + txtDBPR2.Text + "','" + txtPulseRate.Text + "','" + txtPRateR1.Text + "','" + txtPRateR2.Text + "','" + txtPulseOximetry.Text + "','" + txtPOR1.Text + "','" + txtPOR2.Text + "','" + txtRespirationRate.Text + "','" + txtRRateR1.Text + "','" + txtRRateR2.Text + "','" + txtTempEquipmentID.Text + "','" + txtTempVital.Text + "','" + txtTempEquipmentIDR1.Text + "','" + txtTR1.Text + "','" + txtTempEquipmentIDR2.Text + "','" + txtTR2.Text + "','" + _dtVitalDateTime + "','" + _dtVitalDateTimeR1 + "','" + _dtVitalDateTimeR2 + "','" + _vitalTime + "','" + _vitalTimeR1 + "','" + _vitalTimeR2 + "'," + _isVitalOutOfRange + "," + _isVitalsCS + ",'" + _status + "','" + txtVitalComments.Text + "','" + Convert.ToInt16(cbConfirmSubjectSeated.Checked) + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                                db.ExecuteInsertQuery(InsertQuery, null, false);
                            }
                            //subject status
                            OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningVital", pgvVitals.Name, "VitalsProceed", SubjectStatusCode.Status.Proceed, txtVitalComments.Text, App.EsignedUser.UserName);
                            OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningVitals", SubjectStatusCode.Status.Proceed, txtVitalComments.Text.Trim());
                            db.CommitTransaction();
                            db.CloseConnection();
                            LoadDataBySelectedTab();
                        }
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Fields Can not be Empty", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vital", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// e-Sign First Repeat (Vitals)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignR1_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            int _status = 0;
            try
            {
                int _timePassedFromLastVital = GetFirstVitalPassedTime();
                if (_timePassedFromLastVital < 10 || _timePassedFromLastVital > 60)
                {
                    string _msg = string.Empty;
                    if (_timePassedFromLastVital > 60)
                        _msg = _timePassedFromLastVital / 60 + " hours and " + _timePassedFromLastVital % 60 + " minutes";
                    else
                        _msg = _timePassedFromLastVital + " minutes";
                    if (HelperFunctions.ShowMessageBox("Vital was done " + _msg + " ago. For vital repeat you have to wait 10-60 minutes. Are you sure you want to repeat?", "Vital", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return;
                }

                if ((txtSBPR1.Text.Trim() != "" || txtSBPR1.NullText.Trim().Equals("N/A")) && (txtDBPR1.Text.Trim() != "" || txtDBPR1.NullText.Trim().Equals("N/A")) && (txtPRateR1.Text.Trim() != "" || txtPRateR1.NullText.Trim().Equals("N/A")) && (txtRRateR1.Text.Trim() != "" || txtRRateR1.NullText.Trim().Equals("N/A")) && (txtTR1.Text.Trim() != "" || txtTR1.NullText.Trim().Equals("N/A")) && txtEquipIDR1.Text.Trim() != "" && txtDateTimeR1.Text.Trim() != "")
                {
                    if (!ControlsValidator.IsValidTimeTextBox(txtTimeR1, null, "", "Vital"))
                        return;
                    if (!IsTimeValid(txtDateTimeR1.Text.Trim() + " " + txtTimeR1.Text.Trim()))
                    {
                        txtTimeR1.Focus();
                        return;
                    }
                    if (!rdbVitalsOutRangeYesR1.IsChecked && !rdbVitalsOutRangeNoR1.IsChecked)
                    {
                        HelperFunctions.ShowMessageBox("Please check 'Out of Acceptable Range' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    if (!rdbVitalsCSYesR1.IsChecked && !rdbVitalsCSNoR1.IsChecked)
                    {
                        HelperFunctions.ShowMessageBox("Please check 'Clinically Significant' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    int _isVitalOutOfRange = 0;
                    int _isVitalsCS = 0;
                    if (rdbVitalsOutRangeYesR1.IsChecked)
                        _isVitalOutOfRange = 1;
                    if (rdbVitalsCSYesR1.IsChecked)
                        _isVitalsCS = 1;
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        string _dtVitalDateTime = (string.IsNullOrEmpty(txtDateTimeNoR.Text.Trim()) && (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim()))) ? "" : txtDateTimeNoR.Text.Trim() + " " + txtTimeNoRepeat.Text.Trim();
                        string _dtVitalDateTimeR1 = (string.IsNullOrEmpty(txtDateTimeR1.Text.Trim()) && (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim()))) ? "" : txtDateTimeR1.Text.Trim() + " " + txtTimeR1.Text.Trim();
                        string _dtVitalDateTimeR2 = (string.IsNullOrEmpty(txtDateTimeR2.Text.Trim()) && (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim()))) ? "" : txtDateTimeR2.Text.Trim() + " " + txtTimeR2.Text.Trim();
                        string _vitalTime = (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim())) ? "" : txtTimeNoRepeat.Text.Trim();
                        string _vitalTimeR1 = (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim())) ? "" : txtTimeR1.Text.Trim();
                        string _vitalTimeR2 = (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim())) ? "" : txtTimeR2.Text.Trim();
                        if (_dtExist.Rows.Count > 0)
                        {
                            tabName = "Vital";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            //  string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsSeatedR1=" + Convert.ToInt16(cbConfirmSubjectSeatedR1.Checked) + ",IsOutOfAcceptableRange2=" + _isVitalOutOfRange + ",IsClinicallySignificant2=" + _isVitalsCS + ",IsRepeatRequired=0, EquipmentID='" + txtEquipID.Text + "',EquipmentIDR1='" + txtEquipIDR1.Text + "',EquipmentIDR2='" + txtEquipIDR2.Text + "', SystolicBloodPressure='" + txtSystolic.Text + "',SystolicBloodPressureR1='" + txtSBPR1.Text + "' ,SystolicBloodPressureR2='" + txtSBPR2.Text + "',DiastolicBloodPressure='" + txtDiastolic.Text + "',DiastolicBloodPressureR1='" + txtDBPR1.Text + "' ,DiastolicBloodPressureR2='" + txtDBPR2.Text + "',PulseRate='" + txtPulseRate.Text + "' ,PulseRateR1='" + txtPRateR1.Text + "',PulseRateR2='" + txtPRateR2.Text + "',PulseOximetry='" + txtPulseOximetry.Text + "',PulseOximetryR1='" + txtPOR1.Text + "',PulseOximetryR2='" + txtPOR2.Text + "',RespirationRate='" + txtRespirationRate.Text + "',RespirationRateR1='" + txtRRateR1.Text + "',RespirationRateR2='" + txtRRateR2.Text + "',TempEquipmentID='" + txtTempEquipmentID.Text + "',Tempreature='" + txtTempVital.Text + "',TempEquipmentIDR1='" + txtTempEquipmentIDR1.Text + "',TempreatureR1='" + txtTR1.Text + "',TempEquipmentIDR2='" + txtTempEquipmentIDR2.Text + "',TempreatureR2='" + txtTR2.Text + "',DateTime='" + _dtVitalDateTime + "',DateTimeR1='" + _dtVitalDateTimeR1 + "',DateTimeR2='" + _dtVitalDateTimeR2 + "',Time='" + _vitalTime + "',TimeR1='" + _vitalTimeR1 + "',TimeR2='" + _vitalTimeR2 + "',SubjectStatus='" + _status + "',Comments='" + txtVitalComments.Text + "',eSignedByR1='" + App.EsignedUser.UserName + "',eSignedDateR1='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsSeatedR1=" + Convert.ToInt16(cbConfirmSubjectSeatedR1.Checked) + ",IsOutOfAcceptableRange2=" + _isVitalOutOfRange + ",IsClinicallySignificant2=" + _isVitalsCS + ",IsRepeatRequired=0,EquipmentIDR1='" + txtEquipIDR1.Text + "',SystolicBloodPressureR1='" + txtSBPR1.Text.Trim() + "',DiastolicBloodPressureR1='" + txtDBPR1.Text.Trim() + "',PulseRateR1='" + txtPRateR1.Text + "',PulseOximetryR1='" + txtPOR1.Text.Trim() + "',RespirationRateR1='" + txtRRateR1.Text.Trim() + "',TempEquipmentIDR1='" + txtTempEquipmentIDR1.Text.Trim() + "',TempreatureR1='" + txtTR1.Text.Trim() + "',TempreatureR2='" + txtTR2.Text.Trim() + "',DateTimeR1='" + _dtVitalDateTimeR1 + "',TimeR1='" + _vitalTimeR1 + "',SubjectStatus='" + _status + "',Comments='" + txtVitalComments.Text + "',eSignedByR1='" + App.EsignedUser.UserName + "',eSignedDateR1='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                            db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        }
                        else
                        {
                            tabName = "Vital";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningVital]
                                 (StudyId,SubjectKey,Visit,IsSeatedR1,EquipmentID,EquipmentIDR1,EquipmentIDR2,SystolicBloodPressure,SystolicBloodPressureR1 ,SystolicBloodPressureR2,DiastolicBloodPressure,DiastolicBloodPressureR1 ,DiastolicBloodPressureR2,PulseRate,PulseRateR1,PulseRateR2,PulseOximetry,PulseOximetryR1,PulseOximetryR2,RespirationRate,RespirationRateR1,RespirationRateR2,TempEquipmentID,Tempreature,TempEquipmentIDR1,TempreatureR1,TempEquipmentIDR2,TempreatureR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,IsOutOfAcceptableRange2,IsClinicallySignificant2,SubjectStatus,Comments,eSignedByR1,eSignedDateR1) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + "," + Convert.ToInt16(cbConfirmSubjectSeatedR1.Checked) + ",'" + txtEquipID.Text + "','" + txtEquipIDR1.Text + "','" + txtEquipIDR2.Text + "','" + txtSystolic.Text + "','" + txtSBPR1.Text + "','" + txtSBPR2.Text + "','" + txtDiastolic.Text + "','" + txtDBPR1.Text + "','" + txtDBPR2.Text + "','" + txtPulseRate.Text + "','" + txtPRateR1.Text + "','" + txtPRateR2.Text + "','" + txtPulseOximetry.Text + "','" + txtPOR1.Text + "','" + txtPOR2.Text + "','" + txtRespirationRate.Text + "','" + txtRRateR1.Text + "','" + txtRRateR2.Text + "','" + txtTempEquipmentID.Text + "','" + txtTempVital.Text + "','" + txtTempEquipmentIDR1.Text + "','" + txtTR1.Text + "','" + txtTempEquipmentIDR2.Text + "','" + txtTR2.Text + "','" + _dtVitalDateTime + "','" + _dtVitalDateTimeR1 + "','" + _dtVitalDateTimeR2 + "','" + _vitalTime + "','" + _vitalTimeR1 + "','" + _vitalTimeR2 + "'," + _isVitalOutOfRange + "," + _isVitalsCS + ",'" + _status + "','" + txtVitalComments.Text + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                            db.ExecuteInsertQuery(InsertQuery, null, false);
                        }
                        //subject status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningVital", pgvVitals.Name, "VitalsProceed", SubjectStatusCode.Status.Proceed, txtVitalComments.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningVitals", SubjectStatusCode.Status.Proceed, txtVitalComments.Text.Trim());
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                    }
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Fields Can not be Empty", "Vital", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vital", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// e-Sign Second Repeat (Vitals)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignR2_Click(object sender, EventArgs e)
        {
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            int _status = 0;
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    if (((txtSBPR2.Text != "" || txtSBPR2.NullText.Equals("N/A")) && (txtDBPR2.Text != "" || txtDBPR2.NullText.Equals("N/A")) && (txtPRateR2.Text != "" || txtPRateR2.NullText.Equals("N/A")) && (txtRRateR2.Text != "" || txtRRateR2.NullText.Equals("N/A")) && (txtTR2.Text != "" || txtTR2.NullText.Equals("N/A")) && txtEquipIDR2.Text != "" && txtDateTimeR2.Text != ""))
                    {
                        if (!ControlsValidator.IsValidTimeTextBox(txtTimeR2, null, "", "Vital"))
                            return;
                        if (!IsTimeValid(txtDateTimeR2.Text.Trim() + " " + txtTimeR2.Text.Trim()))
                        {
                            txtTimeR2.Focus();
                            return;
                        }
                        if (!rdbVitalsOutRangeYesR2.IsChecked && !rdbVitalsOutRangeNoR2.IsChecked)
                        {
                            HelperFunctions.ShowMessageBox("Please check 'Out of Acceptable Range' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                            return;
                        }
                        if (!rdbVitalsCSYesR2.IsChecked && !rdbVitalsCSNoR2.IsChecked)
                        {
                            HelperFunctions.ShowMessageBox("Please check 'Clinically Significant' radio button(Y/N).", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                            return;
                        }
                        int _isVitalOutOfRange = 0;
                        int _isVitalsCS = 0;
                        if (rdbVitalsOutRangeYesR2.IsChecked)
                            _isVitalOutOfRange = 1;
                        if (rdbVitalsCSYesR2.IsChecked)
                            _isVitalsCS = 1;
                        using (DbConnection db = new DbConnection())
                        {
                            db.OpenConnection();
                            string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                            DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                            db.BeginTransaction();
                            string _dtVitalDateTime = (string.IsNullOrEmpty(txtDateTimeNoR.Text.Trim()) && (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim()))) ? "" : txtDateTimeNoR.Text.Trim() + " " + txtTimeNoRepeat.Text.Trim();
                            string _dtVitalDateTimeR1 = (string.IsNullOrEmpty(txtDateTimeR1.Text.Trim()) && (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim()))) ? "" : txtDateTimeR1.Text.Trim() + " " + txtTimeR1.Text.Trim();
                            string _dtVitalDateTimeR2 = (string.IsNullOrEmpty(txtDateTimeR2.Text.Trim()) && (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim()))) ? "" : txtDateTimeR2.Text.Trim() + " " + txtTimeR2.Text.Trim();
                            string _vitalTime = (txtTimeNoRepeat.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeNoRepeat.Text.Trim())) ? "" : txtTimeNoRepeat.Text.Trim();
                            string _vitalTimeR1 = (txtTimeR1.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR1.Text.Trim())) ? "" : txtTimeR1.Text.Trim();
                            string _vitalTimeR2 = (txtTimeR2.Text.Trim().Equals("__:__") || string.IsNullOrEmpty(txtTimeR2.Text.Trim())) ? "" : txtTimeR2.Text.Trim();
                            if (_dtExist.Rows.Count > 0)
                            {
                                tabName = "Vital";
                                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                                {
                                    return;
                                }
                                //string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsSeatedR2=" + Convert.ToInt16(cbConfirmSubjectSeatedR2.Checked) + ",IsOutOfAcceptableRange3=" + _isVitalOutOfRange + ",IsClinicallySignificant3=" + _isVitalsCS + ",IsRepeatRequired=0,EquipmentID='" + txtEquipID.Text + "',EquipmentIDR1='" + txtEquipIDR1.Text + "',EquipmentIDR2='" + txtEquipIDR2.Text + "', SystolicBloodPressure='" + txtSystolic.Text + "',SystolicBloodPressureR1='" + txtSBPR1.Text + "' ,SystolicBloodPressureR2='" + txtSBPR2.Text + "',DiastolicBloodPressure='" + txtDiastolic.Text + "',DiastolicBloodPressureR1='" + txtDBPR1.Text + "' ,DiastolicBloodPressureR2='" + txtDBPR2.Text + "',PulseRate='" + txtPulseRate.Text + "' ,PulseRateR1='" + txtPRateR1.Text + "',PulseRateR2='" + txtPRateR2.Text + "',PulseOximetry='" + txtPulseOximetry.Text + "',PulseOximetryR1='" + txtPOR1.Text + "',PulseOximetryR2='" + txtPOR2.Text + "',RespirationRate='" + txtRespirationRate.Text + "',RespirationRateR1='" + txtRRateR1.Text + "',RespirationRateR2='" + txtRRateR2.Text + "',TempEquipmentID='" + txtTempEquipmentID.Text + "',Tempreature='" + txtTempVital.Text + "',TempEquipmentIDR1='" + txtTempEquipmentIDR1.Text + "',TempreatureR1='" + txtTR1.Text + "',TempEquipmentIDR2='" + txtTempEquipmentIDR2.Text + "',TempreatureR2='" + txtTR2.Text + "',DateTime='" + _dtVitalDateTime + "',DateTimeR1='" + _dtVitalDateTimeR1 + "',DateTimeR2='" + _dtVitalDateTimeR2 + "',Time='" + _vitalTime + "',TimeR1='" + _vitalTimeR1 + "',TimeR2='" + _vitalTimeR2 + "',SubjectStatus='" + _status + "',Comments='" + txtVitalComments.Text + "',eSignedByR2='" + App.EsignedUser.UserName + "',eSignedDateR2='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET IsSeatedR2=" + Convert.ToInt16(cbConfirmSubjectSeatedR2.Checked) + ",IsOutOfAcceptableRange3=" + _isVitalOutOfRange + ",IsClinicallySignificant3=" + _isVitalsCS + ",IsRepeatRequired=0,EquipmentIDR2='" + txtEquipIDR2.Text.Trim() + "' ,SystolicBloodPressureR2='" + txtSBPR2.Text.Trim() + "' ,DiastolicBloodPressureR2='" + txtDBPR2.Text.Trim() + "',PulseRateR2='" + txtPRateR2.Text.Trim() + "',PulseOximetryR2='" + txtPOR2.Text.Trim() + "',RespirationRateR2='" + txtRRateR2.Text.Trim() + "',TempEquipmentIDR2='" + txtTempEquipmentIDR2.Text.Trim() + "',TempreatureR2='" + txtTR2.Text.Trim() + "',DateTimeR2='" + _dtVitalDateTimeR2 + "',TimeR2='" + _vitalTimeR2 + "',SubjectStatus='" + _status + "',Comments='" + txtVitalComments.Text + "',eSignedByR2='" + App.EsignedUser.UserName + "',eSignedDateR2='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                                db.ExecuteUpdateQuery(UpdateQuery, null, false);
                            }
                            else
                            {
                                tabName = "Vital";
                                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                                {
                                    return;
                                }
                                string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningVital]
                                 (StudyID,SubjectKey,Visit,IsSeatedR2,EquipmentID,EquipmentIDR1,EquipmentIDR2,SystolicBloodPressure,SystolicBloodPressureR1 ,SystolicBloodPressureR2,DiastolicBloodPressure,DiastolicBloodPressureR1 ,DiastolicBloodPressureR2,PulseRate,PulseRateR1,PulseRateR2,PulseOximetry,PulseOximetryR1,PulseOximetryR2,RespirationRate,RespirationRateR1,RespirationRateR2,TempEquipmentID,Tempreature,TempEquipmentIDR1,TempreatureR1,TempEquipmentIDR2,TempreatureR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,IsOutOfAcceptableRange3,IsClinicallySignificant3,SubjectStatus,Comments,eSignedByR2,eSignedDateR2) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + "," + Convert.ToInt16(cbConfirmSubjectSeatedR2.Checked) + ",'" + txtEquipID.Text + "','" + txtEquipIDR1.Text + "','" + txtEquipIDR2.Text + "','" + txtSystolic.Text + "','" + txtSBPR1.Text + "','" + txtSBPR2.Text + "','" + txtDiastolic.Text + "','" + txtDBPR1.Text + "','" + txtDBPR2.Text + "','" + txtPulseRate.Text + "','" + txtPRateR1.Text + "','" + txtPRateR2.Text + "','" + txtPulseOximetry.Text + "','" + txtPOR1.Text + "','" + txtPOR2.Text + "','" + txtRespirationRate.Text + "','" + txtRRateR1.Text + "','" + txtRRateR2.Text + "','" + txtTempEquipmentID.Text + "','" + txtTempVital.Text + "','" + txtTempEquipmentIDR1.Text + "','" + txtTR1.Text + "','" + txtTempEquipmentIDR2.Text + "','" + txtTR2.Text + "','" + _dtVitalDateTime + "','" + _dtVitalDateTimeR1 + "','" + _dtVitalDateTimeR2 + "','" + _vitalTime + "','" + _vitalTimeR1 + "','" + _vitalTimeR2 + "'," + _isVitalOutOfRange + "," + _isVitalsCS + ",'" + _status + "','" + txtVitalComments.Text + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                                db.ExecuteInsertQuery(InsertQuery, null, false);
                            }
                            //subject status
                            OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningVital", pgvVitals.Name, "VitalsProceed", SubjectStatusCode.Status.Proceed, txtVitalComments.Text, App.EsignedUser.UserName);
                            OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningVitals", SubjectStatusCode.Status.Proceed, txtVitalComments.Text.Trim());
                            db.CommitTransaction();
                            db.CloseConnection();
                            LoadDataBySelectedTab();
                        }
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Fields Can not be Empty", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vitals", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Clear Validation Error if all text boxes are filled
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GBNoRepeatVital_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            foreach (Control ctrl in GBNoRepeatVital.Controls)
            {
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtbox = (RadTextBox)ctrl;
                    if (!decimal.TryParse(txtbox.Text, out parsedValue))
                    {
                        txtbox.Text = "";
                        ValidationError.SetError(txtbox, "Field can not be empty");
                    }
                    else
                    {
                        if (txtbox.Text != string.Empty)
                        {
                            ValidationError.Clear();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Clear Validation Error if all text boxes are filled for Repeat(1)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GBVitalR1_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            var VitaltextBoxesRepeat1 = new RadTextBox[] { txtSBPR1, txtDBPR1, txtPRateR1, txtRRateR1, txtTR1 };
            if (VitaltextBoxesRepeat1.Any(tb => tb.Text == String.Empty))
            {
                foreach (RadTextBox txtbox1 in VitaltextBoxesRepeat1)
                {
                    if (!decimal.TryParse(txtbox1.Text, out parsedValue))
                    {
                        txtbox1.Text = "";
                    }
                    if (txtbox1.Text == string.Empty)
                    {
                        ValidateErrorRepeat1.SetError(txtbox1, "Field can not be empty");
                    }
                    else
                    {
                        ValidateErrorRepeat1.Clear();
                    }
                }
            }
            else
            {
                ValidateErrorRepeat1.Clear();
            }
        }

        /// <summary>
        /// Clear Validation Error if all text boxes are filled for Repeat(2)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GBVitalR2_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            var VitaltextBoxesRepeat2 = new RadTextBox[] { txtSBPR2, txtDBPR2, txtPRateR2, txtRRateR2, txtTR2 };
            if (VitaltextBoxesRepeat2.Any(tb => tb.Text == String.Empty))
            {
                foreach (RadTextBox txtbox2 in VitaltextBoxesRepeat2)
                {
                    if (!decimal.TryParse(txtbox2.Text, out parsedValue))
                    {
                        txtbox2.Text = "";
                    }
                    if (txtbox2.Text == string.Empty)
                    {
                        ValidateErrorRepeat2.SetError(txtbox2, "Field can not be empty");
                    }
                    else
                    {
                        ValidateErrorRepeat2.Clear();
                    }
                }
            }
            else
            {
                ValidateErrorRepeat2.Clear();
            }
        }

        /// <summary>
        /// Scan Vital to retrieve subjectinfo
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanVital_TextChanged(object sender, EventArgs e)
        {
            VitalTimer.Interval = (700);
            VitalTimer.Enabled = true;
            VitalTimer.Start();
        }
        private void VitalTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                VitalTimer.Stop();
                if (string.IsNullOrEmpty(txtScanVital.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanVital.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vitals", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanVital.ResetText();
            }
        }

        /// <summary>
        /// Retrieve Vital by SubjectKey
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetVital(string subjectKey)
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "' and Visit=" + Visit);
                        DataTable dt = db.ExecuteSelectQuery(query, null, false);
                        if (dt.Rows.Count > 0)
                        {
                            DataRow dr = dt.Rows[0];
                            txtEquipID.Text = dr["EquipmentID"].ToString();
                            txtEquipIDR1.Text = dr["EquipmentIDR1"].ToString();
                            txtEquipIDR2.Text = dr["EquipmentIDR2"].ToString();
                            //Values
                            string systolicBloodPressure = default(string);
                            string diastolicBloodPressure = default(string);
                            string pulseOximetry = default(string);
                            string pulseRate = default(string);
                            string respirationRate = default(string);
                            string temperature = default(string);

                            string systolicBloodPressureR1 = default(string);
                            string diastolicBloodPressureR1 = default(string);
                            string pulseOximetryR1 = default(string);
                            string pulseRateR1 = default(string);
                            string respirationRateR1 = default(string);
                            string temperatureR1 = default(string);

                            string systolicBloodPressureR2 = default(string);
                            string diastolicBloodPressureR2 = default(string);
                            string pulseOximetryR2 = default(string);
                            string pulseRateR2 = default(string);
                            string respirationRateR2 = default(string);
                            string temperatureR2 = default(string);

                            systolicBloodPressure = dr["SystolicBloodPressure"].ToString();
                            systolicBloodPressureR1 = dr["SystolicBloodPressureR1"].ToString();
                            systolicBloodPressureR2 = dr["SystolicBloodPressureR2"].ToString();

                            diastolicBloodPressure = dr["DiastolicBloodPressure"].ToString();
                            diastolicBloodPressureR1 = dr["DiastolicBloodPressureR1"].ToString();
                            diastolicBloodPressureR2 = dr["DiastolicBloodPressureR2"].ToString();

                            pulseOximetry = dr["PulseOximetry"].ToString();
                            pulseOximetryR1 = dr["PulseOximetryR1"].ToString();
                            pulseOximetryR2 = dr["PulseOximetryR2"].ToString();

                            pulseRate = dr["PulseRate"].ToString();
                            pulseRateR1 = dr["PulseRateR1"].ToString();
                            pulseRateR2 = dr["PulseRateR2"].ToString();

                            respirationRate = dr["RespirationRate"].ToString();
                            respirationRateR1 = dr["RespirationRateR1"].ToString();
                            respirationRateR2 = dr["RespirationRateR2"].ToString();

                            temperature = dr["Tempreature"].ToString();
                            temperatureR1 = dr["TempreatureR1"].ToString();
                            temperatureR2 = dr["TempreatureR2"].ToString();
                            CheckVitalValuesInRangeInLoad(systolicBloodPressure, systolicBloodPressureR1, systolicBloodPressureR2, diastolicBloodPressure, diastolicBloodPressureR1, diastolicBloodPressureR2, pulseRate, pulseRateR1, pulseRateR2, pulseOximetry, pulseOximetryR1, pulseOximetryR2, respirationRate, respirationRateR1, respirationRateR2, temperature, temperatureR1, temperatureR2);


                            //txtSystolic.Text = dr["SystolicBloodPressure"].ToString();
                            //txtSBPR1.Text = dr["SystolicBloodPressureR1"].ToString();
                            //txtSBPR2.Text = dr["SystolicBloodPressureR2"].ToString();

                            //txtDiastolic.Text = dr["DiastolicBloodPressure"].ToString();
                            //txtDBPR1.Text = dr["DiastolicBloodPressureR1"].ToString();
                            //txtDBPR2.Text = dr["DiastolicBloodPressureR2"].ToString();

                            //txtPulseRate.Text = dr["PulseRate"].ToString();
                            //txtPRateR1.Text = dr["PulseRateR1"].ToString();
                            //txtPRateR2.Text = dr["PulseRateR2"].ToString();

                            //txtPulseOximetry.Text = dr["PulseOximetry"].ToString();
                            //txtPOR1.Text = dr["PulseOximetryR1"].ToString();
                            //txtPOR2.Text = dr["PulseOximetryR2"].ToString();

                            //txtRespirationRate.Text = dr["RespirationRate"].ToString();
                            //txtRRateR1.Text = dr["RespirationRateR1"].ToString();
                            //txtRRateR2.Text = dr["RespirationRateR2"].ToString();

                            //txtTempVital.Text = dr["Tempreature"].ToString();
                            //txtTR1.Text = dr["TempreatureR1"].ToString();
                            //txtTR2.Text = dr["TempreatureR2"].ToString();

                            txtTempEquipmentID.Text = dr["TempEquipmentID"].ToString();
                            txtTempEquipmentIDR1.Text = dr["TempEquipmentIDR1"].ToString();
                            txtTempEquipmentIDR2.Text = dr["TempEquipmentIDR2"].ToString();


                            lblSCVitalEsignedBy1.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCVitalEsignedDate1.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }

                            }
                            lblSCVitalEsignedBy2.Text = dr["eSignedByR1"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDateR1"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDateR1"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCVitalEsignedDate2.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                            lblSCVitalEsignedBy3.Text = dr["eSignedByR2"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDateR2"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDateR2"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCVitalEsignedDate3.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                            //double _temp = default(double);
                            //if (double.TryParse(dr["Tempreature"].ToString(), out _temp))
                            //    txtTempVitalC.Text = CommonHelpers.ToCelsius(_temp).ToString();
                            //else
                            //    txtTempVitalC.ResetText();
                            //txtTR1.Text = dr["TempreatureR1"].ToString();
                            //double _tempR1 = default(double);
                            //if (double.TryParse(dr["TempreatureR1"].ToString(), out _tempR1))
                            //    txtTempVitalCR1.Text = CommonHelpers.ToCelsius(_tempR1).ToString();
                            //else
                            //    txtTempVitalCR1.ResetText();
                            //txtTR2.Text = dr["TempreatureR2"].ToString();
                            //double _tempR2 = default(double);
                            //if (double.TryParse(dr["TempreatureR2"].ToString(), out _tempR2))
                            //    txtTempVitalCR2.Text = CommonHelpers.ToCelsius(_tempR2).ToString();
                            //else
                            //    txtTempVitalCR2.ResetText();
                            if (!string.IsNullOrEmpty(dr["DateTime"].ToString()))
                            {
                                txtDateTimeNoR.Text = Convert.ToDateTime(dr["DateTime"].ToString()).ToString("MMM dd, yyyy");
                            }
                            if (!string.IsNullOrEmpty(dr["DateTimeR1"].ToString()))
                            {
                                txtDateTimeR1.Text = Convert.ToDateTime(dr["DateTimeR1"].ToString()).ToString("MMM dd, yyyy");
                            }
                            if (!string.IsNullOrEmpty(dr["DateTimeR2"].ToString()))
                            {
                                txtDateTimeR2.Text = Convert.ToDateTime(dr["DateTimeR2"].ToString()).ToString("MMM dd, yyyy");
                            }
                            txtTimeNoRepeat.Text = dr["Time"].ToString();
                            txtTimeR1.Text = dr["TimeR1"].ToString();
                            txtTimeR2.Text = dr["TimeR2"].ToString();
                            txtVitalComments.Text = dr["Comments"].ToString();
                            bool IsSeated = default(bool);
                            if (!string.IsNullOrEmpty(dr["IsSeated"].ToString()))
                            {
                                IsSeated = Convert.ToBoolean(dr["IsSeated"].ToString());
                            }
                            cbConfirmSubjectSeated.CheckStateChanged -= new System.EventHandler(cbConfirmSubjectSeated_CheckStateChanged);
                            cbConfirmSubjectSeated.Checked = IsSeated;
                            cbConfirmSubjectSeated.CheckStateChanged += new System.EventHandler(cbConfirmSubjectSeated_CheckStateChanged);
                            if (!string.IsNullOrEmpty(dr["IsSeatedR1"].ToString()))
                            {
                                cbConfirmSubjectSeatedR1.CheckStateChanged -= new System.EventHandler(cbConfirmSubjectSeatedR1_CheckStateChanged);
                                cbConfirmSubjectSeatedR1.Checked = Convert.ToBoolean(dr["IsSeatedR1"].ToString());
                                cbConfirmSubjectSeatedR1.CheckStateChanged += new System.EventHandler(cbConfirmSubjectSeatedR1_CheckStateChanged);
                            }
                            if (!string.IsNullOrEmpty(dr["IsSeatedR2"].ToString()))
                            {
                                cbConfirmSubjectSeatedR2.CheckStateChanged -= new System.EventHandler(cbConfirmSubjectSeatedR2_CheckStateChanged);
                                cbConfirmSubjectSeatedR2.Checked = Convert.ToBoolean(dr["IsSeatedR2"].ToString());
                                cbConfirmSubjectSeatedR2.CheckStateChanged += new System.EventHandler(cbConfirmSubjectSeatedR2_CheckStateChanged);
                            }
                            string _vitalRepeat = OnScreeningHelper.GetVitalRepeat(studyId, ValueOfKey);
                            if (!string.IsNullOrEmpty(dr["eSignedByR1"].ToString()) || _vitalRepeat.Equals("Repeat1"))
                                GBVitalR1.Visible = true;
                            else
                                GBVitalR1.Visible = false;
                            if (!string.IsNullOrEmpty(dr["eSignedByR2"].ToString()) || _vitalRepeat.Equals("Repeat2"))
                                GBVitalR2.Visible = true;
                            else
                                GBVitalR2.Visible = false;
                            string vitalReason = string.Empty;
                            if (!string.IsNullOrEmpty(dr["IsOutOfAcceptableRange1"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsOutOfAcceptableRange1"].ToString()))
                                {
                                    rdbVitalsOutRangeYes.CheckStateChanging -= new CheckStateChangingEventHandler(rdbVitalsOutRangeYes_CheckStateChanging);
                                    rdbVitalsOutRangeYes.IsChecked = true;
                                    rdbVitalsOutRangeYes.CheckStateChanging += new CheckStateChangingEventHandler(rdbVitalsOutRangeYes_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsOutRangeNo.CheckStateChanging -= new CheckStateChangingEventHandler(rdbVitalsOutRangeNo_CheckStateChanging);
                                    rdbVitalsOutRangeNo.IsChecked = true;
                                    rdbVitalsOutRangeNo.CheckStateChanging += new CheckStateChangingEventHandler(rdbVitalsOutRangeNo_CheckStateChanging);
                                }
                            }
                            if (!string.IsNullOrEmpty(dr["IsOutOfAcceptableRange2"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsOutOfAcceptableRange2"].ToString()))
                                {
                                    rdbVitalsOutRangeYesR1.CheckStateChanging -= new CheckStateChangingEventHandler(rdbVitalsOutRangeYesR1_CheckStateChanging);
                                    rdbVitalsOutRangeYesR1.IsChecked = true;
                                    rdbVitalsOutRangeYesR1.CheckStateChanging += new CheckStateChangingEventHandler(rdbVitalsOutRangeYesR1_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsOutRangeNoR1.CheckStateChanging -= new CheckStateChangingEventHandler(rdbVitalsOutRangeNoR1_CheckStateChanging);
                                    rdbVitalsOutRangeNoR1.IsChecked = true;
                                    rdbVitalsOutRangeNoR1.CheckStateChanging += new CheckStateChangingEventHandler(rdbVitalsOutRangeNoR1_CheckStateChanging);
                                }
                            }
                            if (!string.IsNullOrEmpty(dr["IsOutOfAcceptableRange3"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsOutOfAcceptableRange3"].ToString()))
                                {
                                    rdbVitalsOutRangeYesR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsOutRangeYesR2_CheckStateChanging);
                                    rdbVitalsOutRangeYesR2.IsChecked = true;
                                    rdbVitalsOutRangeYesR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsOutRangeYesR2_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsOutRangeNoR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsOutRangeNoR2_CheckStateChanging);
                                    rdbVitalsOutRangeNoR2.IsChecked = true;
                                    rdbVitalsOutRangeNoR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsOutRangeNoR2_CheckStateChanging);
                                }
                            }
                            //*******************************
                            if (!string.IsNullOrEmpty(dr["IsClinicallySignificant1"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsClinicallySignificant1"].ToString()))
                                {
                                    rdbVitalsCSYes.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYes_CheckStateChanging);
                                    rdbVitalsCSYes.IsChecked = true;
                                    rdbVitalsCSYes.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYes_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsCSNo.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNo_CheckStateChanging);
                                    rdbVitalsCSNo.IsChecked = true;
                                    rdbVitalsCSNo.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNo_CheckStateChanging);
                                }
                            }
                            if (!string.IsNullOrEmpty(dr["IsClinicallySignificant2"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsClinicallySignificant2"].ToString()))
                                {
                                    rdbVitalsCSYesR1.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR1_CheckStateChanging);
                                    rdbVitalsCSYesR1.IsChecked = true;
                                    rdbVitalsCSYesR1.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR1_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsCSNoR1.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR1_CheckStateChanging);
                                    rdbVitalsCSNoR1.IsChecked = true;
                                    rdbVitalsCSNoR1.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR1_CheckStateChanging);
                                }
                            }
                            if (!string.IsNullOrEmpty(dr["IsClinicallySignificant3"].ToString()))
                            {
                                if (Convert.ToBoolean(dr["IsClinicallySignificant3"].ToString()))
                                {
                                    rdbVitalsCSYesR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR2_CheckStateChanging);
                                    rdbVitalsCSYesR2.IsChecked = true;
                                    rdbVitalsCSYesR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSYesR2_CheckStateChanging);
                                }
                                else
                                {
                                    rdbVitalsCSNoR2.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR2_CheckStateChanging);
                                    rdbVitalsCSNoR2.IsChecked = true;
                                    rdbVitalsCSNoR2.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rdbVitalsCSNoR2_CheckStateChanging);
                                }
                            }
                            // SubjectSeatedPriorToVitals();
                            CheckVitalsRangeAfterLoad("All");
                            CheckIfVitalRepeatRequired();
                        }
                        db.CloseConnection();
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        private void CheckVitalValuesInRangeInLoad(string SBP, string SBPR1, string SBPR2, string DBP, string DBPR1, string DBPR2, string PR, string PRR1, string PRR2, string PO, string POR1, string POR2, string RR, string RRR1, string RRR2, string Temp, string TempR1, string TempR2)
        {
            decimal _SBP = default(decimal);
            decimal _SBPR1 = default(decimal);
            decimal _SBPR2 = default(decimal);
            decimal _DBP = default(decimal);
            decimal _DBPR1 = default(decimal);
            decimal _DBPR2 = default(decimal);
            decimal _PR = default(decimal);
            decimal _PRR1 = default(decimal);
            decimal _PRR2 = default(decimal);
            decimal _PO = default(decimal);
            decimal _POR1 = default(decimal);
            decimal _POR2 = default(decimal);
            decimal _RR = default(decimal);
            decimal _RRR1 = default(decimal);
            decimal _RRR2 = default(decimal);
            decimal _Temp = default(decimal);
            decimal _TempR1 = default(decimal);
            decimal _TempR2 = default(decimal);

            //SBP
            if (decimal.TryParse(SBP, out _SBP))
            {
                txtSystolic.Text = SBP;
            }
            else
            {
                txtSystolic.Clear();
                txtSystolic.NullText = "N/A";
            }
            if (decimal.TryParse(SBPR1, out _SBPR1))
            {
                txtSBPR1.Text = SBPR1;
            }
            else
            {
                txtSBPR1.Clear();
                txtSBPR1.NullText = "N/A";
            }
            if (decimal.TryParse(SBPR2, out _SBPR2))
            {
                txtSBPR2.Text = SBPR2;
            }
            else
            {
                txtSBPR2.Clear();
                txtSBPR2.NullText = "N/A";
            }

            //DBP
            if (decimal.TryParse(DBP, out _DBP))
            {
                txtDiastolic.Text = DBP;
            }
            else
            {
                txtDiastolic.Clear();
                txtDiastolic.NullText = "N/A";
            }
            if (decimal.TryParse(DBPR1, out _DBPR1))
            {
                txtDBPR1.Text = DBPR1;
            }
            else
            {
                txtDBPR1.Clear();
                txtDBPR1.NullText = "N/A";
            }
            if (decimal.TryParse(DBPR2, out _DBPR2))
            {
                txtDBPR2.Text = DBPR2;
            }
            else
            {
                txtDBPR2.Clear();
                txtDBPR2.NullText = "N/A";
            }

            //PR
            if (decimal.TryParse(PR, out _PR))
            {
                txtPulseRate.Text = PR;
            }
            else
            {
                txtPulseRate.Clear();
                txtPulseRate.NullText = "N/A";
            }
            if (decimal.TryParse(PRR1, out _PRR1))
            {
                txtPRateR1.Text = PRR1;
            }
            else
            {
                txtPRateR1.Clear();
                txtPRateR1.NullText = "N/A";
            }
            if (decimal.TryParse(PRR2, out _PRR2))
            {
                txtPRateR2.Text = PRR2;
            }
            else
            {
                txtPRateR2.Clear();
                txtPRateR2.NullText = "N/A";
            }

            //PO
            if (decimal.TryParse(PO, out _PO))
            {
                txtPulseOximetry.Text = PO;
            }
            else
            {
                txtPulseOximetry.Clear();
                txtPulseOximetry.NullText = "N/A";
            }
            if (decimal.TryParse(POR1, out _POR1))
            {
                txtPOR1.Text = POR1;
            }
            else
            {
                txtPOR1.Clear();
                txtPOR1.NullText = "N/A";
            }
            if (decimal.TryParse(POR2, out _POR2))
            {
                txtPOR2.Text = POR2;
            }
            else
            {
                txtPOR2.Clear();
                txtPOR2.NullText = "N/A";
            }

            //RR
            if (decimal.TryParse(RR, out _RR))
            {
                txtRespirationRate.Text = RR;
            }
            else
            {
                txtRespirationRate.Clear();
                txtRespirationRate.NullText = "N/A";
            }
            if (decimal.TryParse(RRR1, out _RRR1))
            {
                txtRRateR1.Text = RRR1;
            }
            else
            {
                txtRRateR1.Clear();
                txtRRateR1.NullText = "N/A";
            }
            if (decimal.TryParse(RRR2, out _RRR2))
            {
                txtRRateR2.Text = RRR2;
            }
            else
            {
                txtRRateR2.Clear();
                txtRRateR2.NullText = "N/A";
            }

            //Temp
            if (decimal.TryParse(Temp, out _Temp))
            {
                txtTempVital.Text = Temp;
            }
            else
            {
                txtTempVital.Clear();
                txtTempVital.NullText = "N/A";
            }
            if (decimal.TryParse(TempR1, out _TempR1))
            {
                txtTR1.Text = TempR1;
            }
            else
            {
                txtTR1.Clear();
                txtTR1.NullText = "N/A";
            }
            if (decimal.TryParse(TempR2, out _TempR2))
            {
                txtTR2.Text = TempR2;
            }
            else
            {
                txtTR2.Clear();
                txtTR2.NullText = "N/A";
            }
        }

        /// <summary>
        /// Subject Failed Vitals
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedVitals_Click(object sender, EventArgs e)
        {
            try
            {
                if (!IsStudyIDSelected() || ddSubjects.SelectedIndex < 0)
                    return;
                if (string.IsNullOrEmpty(txtVitalComments.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter comment.", "Vitals", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtVitalComments.Focus();
                    return;
                }
                tabName = "Vital";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                else
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningVital] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET  SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,ActionBy=@ActionBy,ActionDate=@ActionDate WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtVitalComments.Text));
                            _params.Add(new SqlParameter("@ActionBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@ActionDate", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningVital]
                                 (StudyID,SubjectKey,Visit,SubjectStatus,Comments,ActionBy,ActionDate) VALUES
                                (@studyid,@subjectkey,@Visit,@SubjectStatus,@CordinatorComment,@ActionBy,@ActionDate)");

                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyid", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtVitalComments.Text));
                            _params.Add(new SqlParameter("@ActionBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@ActionDate", DateTime.Now));
                            _params.Add(new SqlParameter("@Visit", Visit));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }

                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningVital", pgvVitals.Name, "VitalsFail", SubjectStatusCode.Status.Fail, txtVitalComments.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningVitals", SubjectStatusCode.Status.Fail, txtVitalComments.Text);
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Vital Dropped", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Subject Dropped Failed Vitals
        /// </summary>
        /// <param name="subjectkey"></param>
        private void SubjectDroppedFailedVitals(string subjectkey)
        {
            bool subjectDropped = DroppedHelper.IsSubjectDroppedVital(studyId, subjectkey);
            bool subjectFailed = FailedHelper.IsSubjectFailedVital(studyId, subjectkey);
            // ======================== Dropped==============================
            if (subjectDropped == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Dropped;
                        pgvVitals.Image = Dropped;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropVital();

                        foreach (Control c in pgvVitals.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        //  pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvVitals;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }

            // ======================== Failed==============================
            else if (subjectFailed == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Failed;
                        pgvVitals.Image = Failed;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropVital();

                        foreach (Control c in pgvVitals.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        // pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvVitals;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }
            else
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {

                    ctrl.Enabled = true;

                }
                //foreach (Control ctrl in pgvMeasurement.Controls)
                //{

                //    ctrl.Enabled = true;

                //}

                lblSubjectStatus.ForeColor = System.Drawing.Color.Black;
                lblSubjectStatus.Text = "None";
                ddlDocumentTypeInf.Enabled = true;
            }
        }

        //====================== Remaining Time to repeat=================

        /// <summary>
        ///  repeat First Time
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RemainingTimeToRepeat1_Tick(object sender, EventArgs e)
        {

            //if (remainingTime < TimeSpan.Zero)
            int _timePassed = GetFirstVitalPassedTime();
            //for temporary sunil 2018-07-03
            TimeSpan remainingTime = endTime1Vital - DateTime.Now;// DateTime.Now-DateTime.Now.AddMinutes(-_timePassed);//endTime1Vital - DateTime.Now;
            if (_timePassed <= 60) //_timePassed >= 3 && <= 60
            {
                // lblRemainingTimeToRepeat.Text = "Done!";
                //lblRemainingTimeToRepeat.Visible = false;
                // lblRemainVitals.Visible = false;
                // RemainingTimeToRepeat1.Enabled = false;
                lblRemainingTimeToRepeat.Visible = true;
                lblRemainVitals.Visible = true;
                lblRemainingTimeToRepeat.ForeColor = System.Drawing.Color.Black;
                if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey) && !OnScreeningHelper.IsVitalsRepeat1Signed(studyId, ValueOfKey))
                    btnRepeatVital.Enabled = false;
                else
                    btnRepeatVital.Enabled = true;
                lblRemainingTimeToRepeat.Text = String.Format("{0:C}", remainingTime.ToString(@"mm\:ss"));
            }
            else
            {
                //if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey))
                //{
                //lblRemainingTimeToRepeat.ForeColor = System.Drawing.Color.Red;
                //lblRemainingTimeToRepeat.Text = "00:00 (Repeat Cannot be done!)"; // (You can't repeat vitals because 1 hour already passed since last vitals.)
                // }
                lblRemainingTimeToRepeat.Visible = false;
                lblRemainVitals.Visible = false;
                if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey))
                {
                    btnRepeatVital.Enabled = false;
                    RemainingTimeToRepeat1.Enabled = false;
                }
                else
                    btnRepeatVital.Enabled = true;
            }
        }

        /// <summary>
        /// Repeat Second Time
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RemainingTimeToRepeat2_Tick(object sender, EventArgs e)
        {
            int _timePassed = GetVitalFirstRepeatPassedTime();
            //var start = DateTime.Now;
            //var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
            //endTime2Vital = RemoveMiliseconds.AddMinutes(60 - _timePassed);
            TimeSpan remainingTime = endTime2Vital - DateTime.Now;
            // if (remainingTime < TimeSpan.Zero)            
            if (_timePassed <= 60) //_timePassed >= 3 && 
            {
                //lblRemainingTimeToRepeat.Text = "Done!";
                //lblRemainingTimeToRepeat.Visible = false;
                //lblRemainVitals.Visible = false;
                //RemainingTimeToRepeat2.Enabled = false;
                lblRemainingTimeToRepeat.ForeColor = System.Drawing.Color.Black;
                lblRemainingTimeToRepeat.Visible = true;
                lblRemainVitals.Visible = true;
                if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey) && !OnScreeningHelper.IsVitalsRepeat2Signed(studyId, ValueOfKey))
                { btnRepeatVital.Enabled = false; }
                else
                    btnRepeatVital.Enabled = true;
                lblRemainingTimeToRepeat.Text = String.Format("{0:C}", remainingTime.ToString(@"mm\:ss"));
            }
            else
            {
                //if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey))
                //{
                //lblRemainingTimeToRepeat.ForeColor = System.Drawing.Color.Red;
                //lblRemainingTimeToRepeat.Text = "00:00";
                //}
                lblRemainingTimeToRepeat.Visible = false;
                lblRemainVitals.Visible = false;
                if (OnScreeningHelper.IsVitalsRepeatRequired(studyId, ValueOfKey))
                {
                    btnRepeatVital.Enabled = false;
                    RemainingTimeToRepeat2.Enabled = false;
                }
                else
                    btnRepeatVital.Enabled = true;
            }
        }

        #endregion ............... Vital .............................

        //****************************** ECG ******************************
        #region  ECG 
        private void ckECGEmailRepeat_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Unchecked))
            {
                return;
            }
            bool _isValuesInRange = true;
            if (OnScreeningHelper.IsECGRepeat2Signed(studyId, ValueOfKey))
            {
                if (!CheckSecondRepeatValuesInRangeECG(null, null, null))
                    _isValuesInRange = false;
            }
            else if (OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))
            {
                if (!CheckFirstRepeatValuesInRangeECG(null, null, null))
                    _isValuesInRange = false;
            }
            else if (OnScreeningHelper.IsECGSigned(studyId, ValueOfKey))
            {
                if (!CheckNoRepeatValuesInRangeECG(null, null, null))
                    _isValuesInRange = false;
            }
            if (_isValuesInRange)
            {
                if (HelperFunctions.ShowMessageBox("Values are in range. Do you still want to repeat(Y/N)?", "ECG", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void DisableAllControlsAfterSubjectDropECG()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvECG")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvOnScreeningPages.Controls)
            {
                if (c.Name == "  pgvECGG")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }
        private void CheckDroppedECGs(string subjectkey)
        {
            bool subjectDroppedECG = DroppedHelper.IsSubjectDroppedECG(studyId, subjectkey);
            bool subjectFailedECG = FailedHelper.IsSubjectFailedECG(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedECG == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        //pgvECG.Image = Dropped;
                        pgvECGG.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        foreach (Control c in pgvECGG.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvECGG")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Drop=======================

            //========================Failed================================

            if (subjectFailedECG == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvECG")
                    {
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        //pgvECG.Image = Failed;
                        pgvECGG.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        foreach (Control c in pgvECGG.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvOnScreeningPages.Controls)
                        {
                            if (c.Name == "pgvECGG")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
        }
        //**************************** Validation for all textboxes (ECG) ******
        #region Validate textboxes with accepting Integer with right value*************


        private void txtECGEquipmentID_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNowECG.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }

        private void txtECGEquipmentIDR1_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }

        private void txtECGEquipmentIDR2_Leave(object sender, EventArgs e)
        {
            //  txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
        }
        private void txtHeartRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPRInterval_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQRS_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQT_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTcB_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTcF_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtHR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPRR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQRSR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTCBR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTcFR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);

        }

        private void txtHR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtPRR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQRSR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTCBR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtQTcFR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHeartRate_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNowECG.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtHeartRate.Text))
            {
                if (Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100)
                {
                    txtHeartRate.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtHeartRate.ForeColor = System.Drawing.Color.Red;
                    if ((btnSaveECG.Tag != null && !btnSaveECG.Tag.ToString().Equals("ESIGNED")) || btnSaveECG.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (50-100) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtHeartRate.Focus();
                        }
                    }
                }
            }
            Enable_Load_Unload();
        }

        /// <summary>
        /// Validate if the enetered Data is between (120-200)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPRInterval_Leave(object sender, EventArgs e)
        {
            //txtDateTimeNowECG.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtPRInterval.Text))
            {
                if (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200)
                {
                    txtPRInterval.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtPRInterval.ForeColor = System.Drawing.Color.Red;
                    if ((btnSaveECG.Tag != null && !btnSaveECG.Tag.ToString().Equals("ESIGNED")) || btnSaveECG.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (120-200) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtPRInterval.Focus();
                        }
                    }
                }
            }
            // ... if all fields are validated and has correct value do not show repeat , else show repeat 
            //if (!string.IsNullOrEmpty(txtHeartRate.Text) && !string.IsNullOrEmpty(txtPRInterval.Text) && !string.IsNullOrEmpty(txtQTcB.Text))
            //{
            //    if (txtGenders.Text == "Female")
            //    {
            //        if ((Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100) && (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200) && (Convert.ToInt32(txtQTcB.Text) <= 470))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //          //  btnReasonECG.Enabled = false;

            //        }

            //        else
            //        {
            //            ddlECGReason.Enabled = true;
            //            ddlDoctor.Enabled = false;
            //          //  btnReasonECG.Enabled = false;
            //        }
            //    }
            //    else if (txtGenders.Text == "Male")
            //    {
            //        if ((Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100) && (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200) && (Convert.ToInt32(txtQTcB.Text) <= 450))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;

            //        }

            //        else
            //        {
            //            ddlECGReason.Enabled = true;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;
            //        }
            //    }

            //}
            Enable_Load_Unload();
        }

        /// <summary>
        /// Validate for Male (less than or equal 450) , for Female (less than or equal 470)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTcB_Leave(object sender, EventArgs e)
        {
            int _maxLimit = 450;
            if (txtGenders.Text.Trim().Equals("Male"))
                _maxLimit = 450;
            else if (txtGenders.Text.Trim().Equals("Female"))
                _maxLimit = 470;
            if (!string.IsNullOrEmpty(txtQTcB.Text))
            {
                if (Convert.ToInt32(txtQTcB.Text) <= _maxLimit)
                {
                    txtQTcB.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtQTcB.ForeColor = System.Drawing.Color.Red;
                    if ((btnSaveECG.Tag != null && !btnSaveECG.Tag.ToString().Equals("ESIGNED")) || btnSaveECG.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be  (less than or equal " + _maxLimit + ") , Do you want to adjust ?", "ECG", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtQTcB.Focus();
                        }
                    }
                }
            }
            // ... if all fields are validated and has correct value do not show repeat , else show repeat 
            //if (!string.IsNullOrEmpty(txtHeartRate.Text) && !string.IsNullOrEmpty(txtPRInterval.Text) && !string.IsNullOrEmpty(txtQTcB.Text))
            //{
            //    if (txtGenders.Text == "Female")
            //    {
            //        if ((Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100) && (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200) && (Convert.ToInt32(txtQTcB.Text) <= 470))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;

            //        }

            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //          //  btnReasonECG.Enabled = false;
            //        }
            //    }
            //    else if (txtGenders.Text == "Male")
            //    {
            //        if ((Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100) && (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200) && (Convert.ToInt32(txtQTcB.Text) <= 450))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;

            //        }

            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;
            //        }
            //    }

            //}
            Enable_Load_Unload();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTcF_Leave(object sender, EventArgs e)
        {
            //....To DO 
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTcFR1_Leave(object sender, EventArgs e)
        {
            //....To DO 
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTcFR2_Leave(object sender, EventArgs e)
        {
            //....To DO 
        }
        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHR1_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtHR1.Text))
            {
                if (Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100)
                {
                    txtHR1.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtHR1.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR1.Tag != null && !btnECGR1.Tag.ToString().Equals("ESIGNED")) || btnECGR1.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (50-100) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                            txtHR1.Select();
                    }
                    //  txtHR1.ForeColor = System.Drawing.Color.Red;
                    //else
                }
            }
            // ... if all fields are validated and has correct value do not show repeat , else show repeat 
            //if (!string.IsNullOrEmpty(txtHR1.Text) && !string.IsNullOrEmpty(txtPRR1.Text) && !string.IsNullOrEmpty(txtQTCBR1.Text))
            //{
            //    if (txtGenders.Text == "Female")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 470))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //           // btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //          //  btnReasonECG.Enabled = false;
            //        }
            //    }
            //    else if (txtGenders.Text == "Male")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 450))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;
            //        }

            //    }

            //}
        }

        /// <summary>
        /// Validate if the enetered Data is between (120-200)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPRR1_Leave(object sender, EventArgs e)
        {
            // txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtPRR1.Text))
            {
                if (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200)
                {
                    txtPRR1.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtPRR1.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR1.Tag != null && !btnECGR1.Tag.ToString().Equals("ESIGNED")) || btnECGR1.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (120-200) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtPRR1.Focus();
                        }
                    }
                }
            }
            // ... if all fields are validated and has correct value do not show repeat , else show repeat 
            //if (!string.IsNullOrEmpty(txtHR1.Text) && !string.IsNullOrEmpty(txtPRR1.Text) && !string.IsNullOrEmpty(txtQTCBR1.Text))
            //{
            //    if (txtGenders.Text == "Female")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 470))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;
            //        }
            //    }
            //    else if (txtGenders.Text == "Male")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 450))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;
            //        }

            //    }

            //}
        }

        /// <summary>
        /// Validate for Male (less than or equal 450) , for Female (less than or equal 470)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTCBR1_Leave(object sender, EventArgs e)
        {
            int _maxLimit = 450;
            if (txtGenders.Text.Trim().Equals("Male"))
                _maxLimit = 450;
            else if (txtGenders.Text.Trim().Equals("Female"))
                _maxLimit = 470;
            if (!string.IsNullOrEmpty(txtQTCBR1.Text))
            {
                if (Convert.ToInt32(txtQTCBR1.Text) <= _maxLimit)
                {
                    txtQTCBR1.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtQTCBR1.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR1.Tag != null && !btnECGR1.Tag.ToString().Equals("ESIGNED")) || btnECGR1.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be  (less than or equal " + _maxLimit + ") , Do you want to adjust ?", "ECG", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtQTCBR1.Focus();
                        }
                    }
                }
            }
            // ... if all fields are validated and has correct value do not show repeat , else show repeat 
            //if (!string.IsNullOrEmpty(txtHR1.Text) && !string.IsNullOrEmpty(txtPRR1.Text) && !string.IsNullOrEmpty(txtQTCBR1.Text))
            //{
            //    if (txtGenders.Text == "Female")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 470))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;
            //        }
            //    }
            //    else if (txtGenders.Text == "Male")
            //    {
            //        if ((Convert.ToInt32(txtHR1.Text) >= 50 && Convert.ToInt32(txtHR1.Text) <= 100) && (Convert.ToInt32(txtPRR1.Text) >= 120 && Convert.ToInt32(txtPRR1.Text) <= 200) && (Convert.ToInt32(txtQTCBR1.Text) <= 450))
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;

            //        }
            //        else
            //        {
            //            ddlECGReason.Enabled = false;
            //            ddlDoctor.Enabled = false;
            //            btnReasonECG.Enabled = false;
            //        }

            //    }

            //}
        }

        /// <summary>
        /// Validate if the enetered Data is between (50-100)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtHR2_Leave(object sender, EventArgs e)
        {
            txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtHR2.Text))
            {
                if (Convert.ToInt32(txtHR2.Text) >= 50 && Convert.ToInt32(txtHR2.Text) <= 100)
                {
                    txtHR2.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtHR2.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR2.Tag != null && !btnECGR2.Tag.ToString().Equals("ESIGNED")) || btnECGR2.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (50-100) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtHR2.Focus();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Validate if the enetered Data is between (120-200)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPRR2_Leave(object sender, EventArgs e)
        {
            txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
            if (!string.IsNullOrEmpty(txtPRR2.Text))
            {
                if (Convert.ToInt32(txtPRR2.Text) >= 120 && Convert.ToInt32(txtPRR2.Text) <= 200)
                {
                    txtPRR2.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtPRR2.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR2.Tag != null && !btnECGR2.Tag.ToString().Equals("ESIGNED")) || btnECGR2.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be between (120-200) , Do you want to adjust ?", "Alert", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtPRR2.Focus();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Validate for Male (less than or equal 450) , for Female (less than or equal 470)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtQTCBR2_Leave(object sender, EventArgs e)
        {
            int _maxLimit = 450;
            if (txtGenders.Text.Trim().Equals("Male"))
                _maxLimit = 450;
            else if (txtGenders.Text.Trim().Equals("Female"))
                _maxLimit = 470;
            if (!string.IsNullOrEmpty(txtQTCBR2.Text))
            {
                if (Convert.ToInt32(txtQTCBR2.Text) <= _maxLimit)
                {
                    txtQTCBR2.ForeColor = System.Drawing.Color.Green;
                }
                else
                {
                    txtQTCBR2.ForeColor = System.Drawing.Color.Red;
                    if ((btnECGR2.Tag != null && !btnECGR2.Tag.ToString().Equals("ESIGNED")) || btnECGR2.Tag == null)
                    {
                        if (HelperFunctions.ShowMessageBox("The Value has to be  (less than or equal " + _maxLimit + ") , Do you want to adjust ?", "ECG", MessageBoxButtons.YesNo, RadMessageIcon.Error).Equals(DialogResult.Yes))
                        {
                            txtQTCBR2.Focus();
                        }
                    }

                }
            }
        }
        #endregion  ******** End Validation *******
        /// <summary>
        /// if item been selected enable dropdpnw Approved by Doctor , else keep dropdpwn approved by Doctor disabled
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ddlECGReason_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            //if (ddlECGReason.SelectedIndex > -1)
            //{
            //    ddlDoctor.Enabled = true;
            //}
            //else
            //{
            //    ddlDoctor.Enabled = false;
            //}
        }
        /// <summary>
        /// if Aitem from Approved By Doctor has been selected , Enable Repeat Button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ddlDoctor_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            //   // if (ddlDoctor.SelectedIndex > -1)
            //    {
            //        btnReasonECG.Enabled = true;
            //    }
            //    else
            //    {
            //        btnReasonECG.Enabled = false;
            //    }
        }

        /// <summary>
        /// DateTime now for  No Repeat status ECG
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDateTimeNowECG_Click(object sender, EventArgs e)
        {


        }
        /// <summary>
        /// DateTime now for  Repeat(1) status ECG
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDateTimeNowECGR1_Click(object sender, EventArgs e)
        {
            //  txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy H:mm");

        }
        /// <summary>
        /// DateTime now for  Repeat(2) status ECG
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDateTimeNowECGR2_Click(object sender, EventArgs e)
        {
            txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy H:mm");

        }

        /// <summary>
        /// scan ECG to retrieve Subject Info
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanECG_TextChanged(object sender, EventArgs e)
        {
            ECGTimer.Interval = (700);
            ECGTimer.Enabled = true;
            ECGTimer.Start();
        }

        private void ECGTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                ECGTimer.Stop();
                if (string.IsNullOrEmpty(txtScanECG.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanECG.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanECG.ResetText();
            }
        }

        /// <summary>
        /// Load ECG (PDF File) and save to the database 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnLoadECG_Click(object sender, EventArgs e)
        {
            DateTime dateNow = DateTime.Now;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    OpenFile.Filter = "Pdf Files|*.pdf";
                    if (OpenFile.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        string exist = string.Format(@"SELECT Count(*) FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                        SqlCommand exists = new SqlCommand(exist, connection);
                        int found = (int)exists.ExecuteScalar();
                        if (found > 0)
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"UPDATE [dbo].[ScreeningECG] SET ECGFile1=@loadFile,DateTimeFile1=@datetime WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"INSERT INTO [dbo].[ScreeningECG] (StudyID,SubjectKey,ECGFile1,DateTimeFile1) VALUES(@studyid,@subjectkey,@loadFile,@datetime)");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();
                        }
                        HelperFunctions.ShowMessageBox("ECG File has been uploaded successfully!", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }

                }
            }
            catch (SqlException ex)

            {

                HelperFunctions.ShowMessageBox(ex.Message, "Load/Unload ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// View ECG For Selected Subject No Repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewECG_Click(object sender, EventArgs e)
        {
            //_subjectKey = Convert.ToInt32(SubjectKey.Text);
            //ViewECG viewECG = new ViewECG();
            //viewECG._subjectKey = Convert.ToString(_subjectKey);
            //viewECG._studyId = Convert.ToString(studyId);
            //viewECG.ShowDialog();
            LoadECGFile("ECGFile1");
        }
        private void LoadECGFile(string field)
        {
            using (ViewECG viewECG = new ViewECG())
            {
                viewECG._subjectKey = ValueOfKey;
                viewECG._studyId = studyId;
                viewECG.SCECGFileFieldName = field;
                viewECG.ShowDialog();
            }
        }
        /// <summary>
        /// Load ECG (PDF File) and save to the database Reapeat (1)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnLoadECGR1_Click(object sender, EventArgs e)
        {
            DateTime dateNow = DateTime.Now;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    OpenFile.Filter = "Pdf Files|*.pdf";
                    if (OpenFile.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        string exist = string.Format(@"SELECT Count(*) FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                        SqlCommand exists = new SqlCommand(exist, connection);
                        int found = (int)exists.ExecuteScalar();
                        if (found > 0)
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"UPDATE [dbo].[ScreeningECG] SET ECGFile2=@loadFile,DateTimeFile2=@datetime WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"INSERT INTO [dbo].[ScreeningECG] (StudyID,SubjectKey,ECGFile2,DateTimeFile2) VALUES(@studyid,@subjectkey,@loadFile1,@datetime)");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();
                        }
                        HelperFunctions.ShowMessageBox("ECG File has been uploaded successfully!", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }

                }
            }
            catch (SqlException ex)

            {

                HelperFunctions.ShowMessageBox(ex.Message, "Load/Unload Repeat ECG(1)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// View ECG For Selected Subject Repeat(1)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewECGR1_Click(object sender, EventArgs e)
        {
            //_subjectKey = Convert.ToInt32(SubjectKey.Text);
            //ViewECGRepeat1 viewECG1 = new ViewECGRepeat1();
            //viewECG1._subjectKey = Convert.ToString(_subjectKey);
            //viewECG1._studyId = Convert.ToString(studyId);
            //viewECG1.ShowDialog();
            LoadECGFile("ECGFile2");
        }
        /// <summary>
        /// Load ECG (PDF File) and save to the database Reapeat (2)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnLoadECGR2_Click(object sender, EventArgs e)
        {
            DateTime dateNow = DateTime.Now;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    OpenFile.Filter = "Pdf Files|*.pdf";
                    if (OpenFile.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        string exist = string.Format(@"SELECT Count(*) FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                        SqlCommand exists = new SqlCommand(exist, connection);
                        int found = (int)exists.ExecuteScalar();
                        if (found > 0)
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"UPDATE [dbo].[ScreeningECG] SET ECGFile3=@loadFile,DateTimeFile3=@datetime WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                            byte[] contents = new byte[fStream.Length];
                            fStream.Read(contents, 0, (int)fStream.Length);
                            fStream.Close();
                            string query = string.Format(@"INSERT INTO [dbo].[ScreeningECG] (StudyID,SubjectKey,ECGFile3,DateTimeFile3) VALUES(@studyid,@subjectkey,@loadFile,@datetime)");
                            SqlCommand cmd = new SqlCommand(query, connection);
                            cmd.Parameters.AddWithValue("@studyid", studyId);
                            cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                            cmd.Parameters.AddWithValue("@loadFile", contents);
                            cmd.Parameters.AddWithValue("@datetime", dateNow);
                            cmd.ExecuteNonQuery();

                        }
                        HelperFunctions.ShowMessageBox("ECG File has been uploaded successfully!", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }

                }
            }
            catch (SqlException ex)

            {

                HelperFunctions.ShowMessageBox(ex.Message, "Load/Unload Repeat ECG(2)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// View ECG For Selected Subject Repeat(2)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewECGR2_Click(object sender, EventArgs e)
        {
            LoadECGFile("ECGFile3");
            //_subjectKey = Convert.ToInt32(SubjectKey.Text);
            //ViewECGRepeat2 viewECG2 = new ViewECGRepeat2();
            //viewECG2._subjectKey = Convert.ToString(_subjectKey);
            //viewECG2._studyId = Convert.ToString(studyId);
            //viewECG2.ShowDialog();
        }

        // ================================== Repeat===================================
        private void ReadOnlyNoRepeatECGControl()
        {
            txtECGEquipmentID.ReadOnly = true;
            txtHeartRate.ReadOnly = true;
            txtPRInterval.ReadOnly = true;
            txtQRS.ReadOnly = true;
            txtQT.ReadOnly = true;
            txtQTcB.ReadOnly = true;
            txtQTcF.ReadOnly = true;
            btnSaveECG.Enabled = false;
            txtTimeECGNoR.ReadOnly = true;
            //btnLoadECG.Enabled = false;
            btnViewECG.Enabled = true;
        }
        private void ReadOnlyFirstRepeatECGControl()
        {
            txtECGEquipmentIDR1.ReadOnly = true;
            txtHR1.ReadOnly = true;
            txtPRR1.ReadOnly = true;
            txtQRSR1.ReadOnly = true;
            txtQTR1.ReadOnly = true;
            txtQTCBR1.ReadOnly = true;
            txtQTcFR1.ReadOnly = true;
            txtTimeECGR1.ReadOnly = true;
            btnECGR1.Enabled = false;
            //btnLoadECGR1.Enabled = false;
            btnViewECGR1.Enabled = true;
        }
        private void ReadOnlySecondRepeatECGControl()
        {
            txtECGEquipmentIDR2.ReadOnly = true;
            txtHR2.ReadOnly = true;
            txtPRR2.ReadOnly = true;
            txtQRSR2.ReadOnly = true;
            txtQTR2.ReadOnly = true;
            txtQTCBR2.ReadOnly = true;
            txtQTcFR2.ReadOnly = true;
            txtTimeECGR2.ReadOnly = true;
            btnECGR2.Enabled = false;
            //  btnLoadECGR2.Enabled = false;
            btnViewECGR2.Enabled = true;
        }


        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void RepeatedValuesECG()
        {
            string subjectKey = string.Empty;
            string Heartrate = string.Empty;
            string PRInterval = string.Empty;
            string QRSInterval = string.Empty;
            string QTInterval = string.Empty;
            string QTcBInterval = string.Empty;
            string QTcFInterval = string.Empty;
            //  string ReasonPI = string.Empty;

            txtHR1.NullText = string.Empty;
            txtPRR1.NullText = string.Empty;
            txtQTCBR1.NullText = string.Empty;
            txtQRSR1.NullText = string.Empty;
            txtQTR1.NullText = string.Empty;

            string _ecgRepeat = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT Heartrate,PRInterval,QRSInterval,QTInterval,QTcBInterval,QTcFInterval FROM [dbo].[ScreeningECG] WHERE StudyID=@studyid AND SubjectKey=@subjectKey ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {

                        Heartrate = reader["Heartrate"].ToString();
                        PRInterval = reader["PRInterval"].ToString();
                        QRSInterval = reader["QRSInterval"].ToString();
                        QTInterval = reader["QTInterval"].ToString();
                        QTcBInterval = reader["QTcBInterval"].ToString();
                        QTcFInterval = reader["QTcFInterval"].ToString();
                        int _QTcBMax = 0;
                        if (txtGenders.Text == "Male")
                            _QTcBMax = 450;
                        else
                            _QTcBMax = 470;
                        if (!string.IsNullOrEmpty(Heartrate) && !string.IsNullOrEmpty(PRInterval) && !string.IsNullOrEmpty(QTcBInterval))
                        {
                            if ((Convert.ToInt32(Heartrate) >= 50 && Convert.ToInt32(Heartrate) <= 100) && (Convert.ToInt32(PRInterval) >= 120 && Convert.ToInt32(PRInterval) <= 200) && (Convert.ToInt32(QTcBInterval) <= _QTcBMax))
                            {
                                txtHR1.ForeColor = System.Drawing.Color.Green;
                                txtHR1.NullText = "N/A";// Heartrate.ToString();
                                txtHR1.ReadOnly = true;
                                txtRRR1.NullText = "N/A";
                                txtRRR1.ReadOnly = true;
                                txtPRR1.ForeColor = System.Drawing.Color.Green;
                                txtPRR1.NullText = "N/A";// PRInterval.ToString();
                                txtPRR1.ReadOnly = true;
                                txtQTCBR1.ForeColor = System.Drawing.Color.Green;
                                txtQTCBR1.NullText = "N/A";// QTcBInterval.ToString();
                                txtQTCBR1.ReadOnly = true;
                                txtQRSR1.NullText = "N/A";// QRSInterval.ToString();
                                txtQTR1.NullText = "N/A";// QTInterval.ToString();
                                txtQRSR1.ReadOnly = true;
                                txtQTR1.ReadOnly = true;
                            }
                            else
                            {

                                txtHR1.Clear();
                                txtHR1.ReadOnly = false;
                                txtRRR1.Clear();
                                txtRRR1.ReadOnly = false;
                                txtPRR1.Clear();
                                txtPRR1.ReadOnly = false;

                                txtQTCBR1.Clear();
                                txtQTCBR1.ReadOnly = false;
                                txtQRSR1.NullText = "N/A";// QRSInterval.ToString();
                                txtQTR1.NullText = "N/A";// QTInterval.ToString();
                                txtQRSR1.ReadOnly = true;
                                txtQTR1.ReadOnly = true;
                            }
                        }
                        //}
                        //else
                        //{
                        //    if (!string.IsNullOrEmpty(Heartrate) && !string.IsNullOrEmpty(PRInterval) && !string.IsNullOrEmpty(QTcBInterval))
                        //    {
                        //        if ((Convert.ToInt32(Heartrate) >= 50 && Convert.ToInt32(Heartrate) <= 100) && (Convert.ToInt32(PRInterval) >= 120 && Convert.ToInt32(PRInterval) <= 200) && (Convert.ToInt32(QTcBInterval) <= 470))
                        //        {
                        //            txtHR1.ForeColor = System.Drawing.Color.Green;
                        //            txtHR1.Text = Heartrate.ToString();
                        //            txtHR1.Enabled = false;
                        //            txtPRR1.ForeColor = System.Drawing.Color.Green;
                        //            txtPRR1.Text = PRInterval.ToString();
                        //            txtPRR1.Enabled = false;
                        //            txtQTCBR1.ForeColor = System.Drawing.Color.Green;
                        //            txtQTCBR1.Text = QTcBInterval.ToString();
                        //            txtQTCBR1.Enabled = false;

                        //            txtQRSR1.Text = QRSInterval.ToString();
                        //            txtQTR1.Text = QTInterval.ToString();


                        //        }
                        //        else
                        //        {

                        //            txtHR1.Clear();
                        //            txtHR1.Enabled = true;

                        //            txtPRR1.Clear();
                        //            txtPRR1.Enabled = true;

                        //            txtQTCBR1.Clear();
                        //            txtQTCBR1.Enabled = true;
                        //            txtQRSR1.Text = QRSInterval.ToString();
                        //            txtQTR1.Text = QTInterval.ToString();

                        //        }
                        //    }
                        //}


                    }
                }

                conn.Close();
            }

        }

        /// <summary>
        ///  Bring Values from Database and push to the repeat boxes (with range only)
        /// </summary>
        private void SecondRepeatValuesECG()
        {
            string subjectKey = string.Empty;
            string HeartrateR1 = string.Empty;
            string PRIntervalR1 = string.Empty;
            string QRSIntervalR1 = string.Empty;
            string QTIntervalR1 = string.Empty;
            string QTcBIntervalR1 = string.Empty;
            string QTcFIntervalR1 = string.Empty;

            txtHR2.NullText = string.Empty;
            txtPRR2.NullText = string.Empty;
            txtQTCBR2.NullText = string.Empty;
            txtQRSR2.NullText = string.Empty;
            txtQTR2.NullText = string.Empty;
            string _ecgRepeat = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
            // string ReasonPIR1 = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT HeartrateR1,PRIntervalR1,QRSIntervalR1,QTIntervalR1,QTcBIntervalR1,QTcFIntervalR1 FROM [dbo].[ScreeningECG] WHERE StudyID=@studyid AND SubjectKey=@subjectKey ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        HeartrateR1 = reader["HeartrateR1"].ToString();
                        PRIntervalR1 = reader["PRIntervalR1"].ToString();
                        QRSIntervalR1 = reader["QRSIntervalR1"].ToString();
                        QTIntervalR1 = reader["QTIntervalR1"].ToString();
                        QTcBIntervalR1 = reader["QTcBIntervalR1"].ToString();
                        QTcFIntervalR1 = reader["QTcFIntervalR1"].ToString();

                        int _QTcBMax = 0;
                        if (txtGenders.Text == "Male")
                            _QTcBMax = 450;
                        else
                            _QTcBMax = 470;
                        if (!string.IsNullOrEmpty(HeartrateR1) && !string.IsNullOrEmpty(PRIntervalR1) && !string.IsNullOrEmpty(QTcBIntervalR1))
                        {
                            if (!_ecgRepeat.Equals("NoRepeat") && (Convert.ToInt32(HeartrateR1) >= 50 && Convert.ToInt32(HeartrateR1) <= 100) && (Convert.ToInt32(PRIntervalR1) >= 120 && Convert.ToInt32(PRIntervalR1) <= 200) && (Convert.ToInt32(QTcBIntervalR1) <= _QTcBMax))
                            {
                                txtHR2.ForeColor = System.Drawing.Color.Green;
                                txtHR2.NullText = "N/A";// HeartrateR1.ToString();
                                txtHR2.ReadOnly = true;
                                txtRRR2.NullText = "N/A";
                                txtRRR2.ReadOnly = true;
                                txtPRR2.ForeColor = System.Drawing.Color.Green;
                                txtPRR2.NullText = "N/A";// PRIntervalR1.ToString();
                                txtPRR2.ReadOnly = true;
                                txtQTCBR2.ForeColor = System.Drawing.Color.Green;
                                txtQTCBR2.NullText = "N/A"; //QTcBIntervalR1.ToString();
                                txtQTCBR2.ReadOnly = true;

                                txtQRSR2.NullText = "N/A";// QRSIntervalR1.ToString();
                                txtQTR2.NullText = "N/A";// QTIntervalR1.ToString();
                                txtQRSR2.ReadOnly = true;
                                txtQTR2.ReadOnly = true;

                            }
                            else
                            {

                                txtHR2.Clear();
                                txtHR2.ReadOnly = false;
                                txtRRR2.Clear();
                                txtRRR2.ReadOnly = false;
                                txtPRR2.Clear();
                                txtPRR2.ReadOnly = false;

                                txtQTCBR2.Clear();
                                txtQTCBR2.ReadOnly = false;

                                txtQRSR2.NullText = "N/A";// QRSIntervalR1.ToString();
                                txtQRSR2.ReadOnly = true;
                                txtQTR2.ReadOnly = true;
                                txtQTR2.NullText = "N/A";// QTIntervalR1.ToString();

                            }
                        }
                        //else
                        //{
                        //    if (!string.IsNullOrEmpty(HeartrateR1) && !string.IsNullOrEmpty(PRIntervalR1) && !string.IsNullOrEmpty(QTcBIntervalR1))
                        //    {
                        //        if ((Convert.ToInt32(HeartrateR1) >= 50 && Convert.ToInt32(HeartrateR1) <= 100) && (Convert.ToInt32(PRIntervalR1) >= 120 && Convert.ToInt32(PRIntervalR1) <= 200) && (Convert.ToInt32(QTcBIntervalR1) <= 470))
                        //        {
                        //            txtHR2.ForeColor = System.Drawing.Color.Green;
                        //            txtHR2.Text = HeartrateR1.ToString();
                        //            txtHR2.Enabled = false;
                        //            txtPRR2.ForeColor = System.Drawing.Color.Green;
                        //            txtPRR2.Text = PRIntervalR1.ToString();
                        //            txtPRR2.Enabled = false;
                        //            txtQTCBR2.ForeColor = System.Drawing.Color.Green;
                        //            txtQTCBR2.Text = QTcBIntervalR1.ToString();
                        //            txtQTCBR2.Enabled = false;

                        //            txtQRSR2.Text = QRSIntervalR1.ToString();
                        //            txtQTR2.Text = QTIntervalR1.ToString();


                        //        }
                        //        else
                        //        {

                        //            txtHR2.Clear();
                        //            txtHR2.Enabled = true;

                        //            txtPRR2.Clear();
                        //            txtPRR2.Enabled = true;

                        //            txtQTCBR2.Clear();
                        //            txtQTCBR2.Enabled = true;
                        //            txtQRSR2.ReadOnly = true; txtQTR2.ReadOnly = true;
                        //            txtQRSR2.Text = QRSIntervalR1.ToString();
                        //            txtQTR2.Text = QTIntervalR1.ToString();

                        //        }
                        //    }
                        //}


                    }
                }

                conn.Close();
            }

        }

        //**************************** Repeat ECG Functionality **********************
        private int CheckValuesInRangeECGeSign(string Heartrate, string PRInterval, string QTcBInterval)
        {
            int _status = 0;
            if ((Convert.ToDecimal(Heartrate) >= 50 && Convert.ToDecimal(Heartrate) <= 100) && (Convert.ToDecimal(PRInterval) >= 120 && Convert.ToDecimal(PRInterval) <= 200))
            {
                if (txtGenders.Text == "Male")
                {
                    if (Convert.ToInt32(QTcBInterval) <= 450)

                        _status = (int)SubjectStatusCode.Status.Proceed;
                }
                else if (txtGenders.Text == "Female")
                {
                    if (Convert.ToInt32(QTcBInterval) <= 470)
                        _status = (int)SubjectStatusCode.Status.Proceed;
                }

            }
            return _status;
        }

        private void ChekValueInRangeECG()
        {
            // ...... No Repeat............
            if (!string.IsNullOrEmpty(txtHeartRate.Text))
            {
                if (Convert.ToDecimal(txtHeartRate.Text) >= 50 && Convert.ToDecimal(txtHeartRate.Text) <= 100)
                {
                    txtHeartRate.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtHeartRate.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtPRInterval.Text))
            {
                if (Convert.ToDecimal(txtPRInterval.Text) >= 120 && Convert.ToDecimal(txtPRInterval.Text) <= 200)
                {
                    txtPRInterval.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtPRInterval.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtQTcB.Text))
            {
                if (txtGenders.Text == "Male")
                {
                    if (Convert.ToInt32(txtQTcB.Text) <= 450)
                    {
                        txtQTcB.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        txtQTcB.ForeColor = System.Drawing.Color.Red;
                    }

                }
                else if (txtGenders.Text == "Female")
                {
                    if (Convert.ToInt32(txtQTcB.Text) <= 470)
                    {
                        txtQTcB.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                    {
                        txtQTcB.ForeColor = System.Drawing.Color.Red;
                    }
                }
            }

            //............. First Repeat...............

            if (!string.IsNullOrEmpty(txtHR1.Text))
            {
                if (Convert.ToDecimal(txtHR1.Text) >= 50 && Convert.ToDecimal(txtHR1.Text) <= 100)
                {
                    txtHR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                {
                    txtHR1.ForeColor = System.Drawing.Color.Red;
                }
            }
            if (!string.IsNullOrEmpty(txtPRR1.Text))
            {
                if (Convert.ToDecimal(txtPRR1.Text) >= 120 && Convert.ToDecimal(txtPRR1.Text) <= 200)
                {
                    txtPRR1.ForeColor = System.Drawing.Color.Green;

                }
                else
                    txtPRR1.ForeColor = System.Drawing.Color.Red;
            }
            if (!string.IsNullOrEmpty(txtQTCBR1.Text))
            {
                if (txtGenders.Text == "Male")
                {
                    if (Convert.ToInt32(txtQTCBR1.Text) <= 450)
                    {
                        txtQTCBR1.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                        txtQTCBR1.ForeColor = System.Drawing.Color.Red;

                }
                else if (txtGenders.Text == "Female")
                {
                    if (Convert.ToInt32(txtQTCBR1.Text) <= 470)
                    {
                        txtQTCBR1.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                        txtQTCBR1.ForeColor = System.Drawing.Color.Red;

                }
            }

            //............. Second Repeat...............


            if (!string.IsNullOrEmpty(txtHR2.Text))
            {
                if (Convert.ToDecimal(txtHR2.Text) >= 50 && Convert.ToDecimal(txtHR2.Text) <= 100)
                {
                    txtHR2.ForeColor = System.Drawing.Color.Green;

                }
                else
                    txtHR2.ForeColor = System.Drawing.Color.Red;
            }
            if (!string.IsNullOrEmpty(txtPRR2.Text))
            {
                if (Convert.ToDecimal(txtPRR2.Text) >= 120 && Convert.ToDecimal(txtPRR2.Text) <= 200)
                {
                    txtPRR2.ForeColor = System.Drawing.Color.Green;
                }
                else
                    txtPRR2.ForeColor = System.Drawing.Color.Red;
            }
            if (!string.IsNullOrEmpty(txtQTCBR2.Text))
            {
                if (txtGenders.Text == "Male")
                {
                    if (Convert.ToInt32(txtQTCBR2.Text) <= 450)
                    {
                        txtQTCBR2.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                        txtQTCBR2.ForeColor = System.Drawing.Color.Red;

                }
                else if (txtGenders.Text == "Female")
                {
                    if (Convert.ToInt32(txtQTCBR2.Text) <= 470)
                    {
                        txtQTCBR2.ForeColor = System.Drawing.Color.Green;
                    }
                    else
                        txtQTCBR2.ForeColor = System.Drawing.Color.Red;
                }
            }
        }
        private void SubjectSeatedPriorToECG()
        {

            if (OnScreeningHelper.IsECGESigned(studyId, ValueOfKey) && !OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))
            {
                ReadOnlyNoRepeatECGControl();
                if (GetECGRemainingTime() <= 0)
                {
                    GBECGR1.Visible = true;
                }
                ChekValueInRangeECG();
            }
            else if (OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))
            {


                ReadOnlyNoRepeatECGControl();
                ReadOnlyFirstRepeatECGControl();
                GBECGR1.Visible = true;
                if (GetECGRemainingTimeRepeat1() <= 0)
                {
                    GBECGR2.Visible = true;
                }
                if (!OnScreeningHelper.IsECGRepeat2Signed(studyId, ValueOfKey))
                {
                    GBECGR2.Visible = false;
                }
                ChekValueInRangeECG();
            }


        }
        private void CheckECGRepeatAndEnableRepeat()
        {
            try
            {
                //GetECGRepeat
                // disable vital controls after e-sign
                if (OnScreeningHelper.IsECGESigned(studyId, ValueOfKey))
                {
                    string _ecgRepeat = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
                    CommonHelpers.SetReadOnlyProperties(gbECGEmail, false);
                    //if (CheckSecondRepeatValuesInRangeECG(null, null, null) && !OnScreeningHelper.IsECGRepeatRequired(studyId, ValueOfKey))
                    if (!OnScreeningHelper.IsECGRepeatRequired(studyId, ValueOfKey))
                    {
                        return;
                    }
                    // else if ((!CheckFirstRepeatValuesInRangeECG(null, null, null) && OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))) //_ecgRepeat.Equals("Repeat2") || 
                    else if (OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey)) //_ecgRepeat.Equals("Repeat2") || 
                    {
                        GBECGR2.Visible = true;
                        HelperFunctions.EnableParentAndAllChildControls(GBECGR2);
                        GBECGR1.Visible = true;
                        btnRepeatECG.Enabled = true;
                        ReadOnlyNoRepeatECGControl();
                        ReadOnlyFirstRepeatECGControl();
                        if (GetECGRemainingTimeRepeat1() <= 60)
                        {
                            var start = DateTime.UtcNow; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                            var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                            endTime2ECG = RemoveMiliseconds.AddMinutes(60 - GetECGRemainingTimeRepeat1()); //endTime is a member, not a local variable
                                                                                                           // btnRepeatECG.Enabled = true;
                            RemainingTimeToRepeatECG2.Enabled = true;
                        }
                        else
                        {
                            // btnRepeatECG.Enabled = false;
                            RemainingTimeToRepeatECG2.Enabled = false;
                        }

                        //    }
                    }
                    //!CheckNoRepeatValuesInRangeECG(null, null, null) &&
                    else if (!CheckNoRepeatValuesInRangeECG(null, null, null)) //_ecgRepeat.Equals("Repeat1") ||
                    {
                        GBECGR1.Visible = true;
                        ReadOnlyNoRepeatECGControl();
                        btnRepeatECG.Enabled = true;
                        if (GetECGRemainingTime() <= 60)
                        {
                            var start = DateTime.Now; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                            var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                            endTime1ECG = RemoveMiliseconds.AddMinutes(60 - GetECGRemainingTime()); //endTime is a member, not a local variable
                            RemainingTimeToRepeatECG1.Enabled = true;
                        }
                        else
                        {
                            //btnRepeatECG.Enabled = false;
                            RemainingTimeToRepeatECG1.Enabled = false;
                        }
                        HelperFunctions.EnableParentAndAllChildControls(GBECGR1);
                    }
                    else
                    {
                        GBECGR1.Visible = false;
                        GBECGR2.Visible = false;
                        HelperFunctions.EnableParentAndAllChildControls(GBECGNoRepeat);
                        EnableECGCommonRepeatControls(false);
                        RemainingTimeToRepeatECG1.Enabled = false;
                        RemainingTimeToRepeatECG2.Enabled = false;
                        btnRepeatECG.Enabled = false;
                    }
                }
                else
                {
                    GBECGR1.Visible = false;
                    GBECGR2.Visible = false;
                    btnFailedECG.Enabled = false;
                    GBECGNoRepeat.Enabled = true;
                    btnRepeatECG.Enabled = false;
                    RemainingTimeToRepeatECG1.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(gbECGEmail, true);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void CheckAllRepeatECGEmail()
        {
            bool EsignedEmail1 = OnScreeningHelper.IsECGEmail1eSigned(studyId, ValueOfKey);
            bool EsignedEmail2 = OnScreeningHelper.IsECGEmail2eSigned(studyId, ValueOfKey);
            // disable vital controls after e-sign
            if (OnScreeningHelper.IsECGESigned(studyId, ValueOfKey))
            {
                // !CheckNoRepeatValuesInRangeECG(null, null, null) &&
                if (CheckECGRepeatRequired() && !OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey) && EsignedEmail1)
                {

                    // GBNoRepeatVital.Enabled = false;
                    ReadOnlyNoRepeatECGControl();
                    if (GetECGRemainingTime() > 0)
                    {
                        var start = DateTime.UtcNow; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                        var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                        endTime1ECG = RemoveMiliseconds.AddMinutes(GetECGRemainingTime()); //endTime is a member, not a local variable
                        RemainingTimeToRepeatECG1.Enabled = true;
                    }
                    else
                    {
                        btnRepeatECG.Enabled = false;
                        RemainingTimeToRepeatECG1.Enabled = false;
                    }
                }
                //!CheckNoRepeatValuesInRangeECG(null, null, null) &&
                else if (ckECGEmailRepeat.Checked && OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey) && EsignedEmail2)
                {
                    GBECGR1.Visible = true;
                    if (CheckFirstRepeatValuesInRangeECG(null, null, null))
                    {
                        //GBVitalR1.Enabled = false;
                        ReadOnlyFirstRepeatECGControl();

                        btnRepeatECG.Enabled = false;
                        RemainingTimeToRepeatECG1.Enabled = false;
                    }
                    else
                    {

                        // GBNoRepeatVital.Enabled = false;
                        // GBVitalR1.Enabled = false;
                        ReadOnlyNoRepeatECGControl();
                        ReadOnlyFirstRepeatECGControl();
                        if (GetECGRemainingTimeRepeat1() > 0)
                        {
                            var start = DateTime.UtcNow; // Use UtcNow instead of Now start -(start.Ticks % 10000000)
                            var RemoveMiliseconds = start.AddTicks(-(start.Ticks % TimeSpan.TicksPerSecond));
                            endTime2ECG = RemoveMiliseconds.AddMinutes(GetECGRemainingTimeRepeat1()); //endTime is a member, not a local variable
                            btnRepeatECG.Enabled = true;
                            RemainingTimeToRepeatECG2.Enabled = true;
                        }
                        else
                        {
                            btnRepeatECG.Enabled = false;
                            RemainingTimeToRepeatECG2.Enabled = false;
                        }

                    }
                }
            }
            else
            {
                btnFailedECG.Enabled = false;
                GBECGNoRepeat.Enabled = true;
                btnRepeatECG.Enabled = false;
                RemainingTimeToRepeatECG1.Enabled = false;
            }
        }

        /// <summary>
        /// Check if No Repeat values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckNoRepeatValuesInRangeECG(decimal? Heartrate, decimal? PRInterval, decimal? QTcBInterval)
        {
            string subjectKey = string.Empty;
            //   string Heartrate = string.Empty;
            //  string PRInterval = string.Empty;
            string QRSInterval = string.Empty;
            string QTInterval = string.Empty;
            //  string QTcBInterval = string.Empty;
            //  string ReasonPI = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT Heartrate,PRInterval,QRSInterval,QTInterval,QTcBInterval FROM [dbo].[ScreeningECG] WHERE StudyID=@studyid AND SubjectKey=@subjectKey ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        Heartrate = (reader["Heartrate"] == DBNull.Value || reader["Heartrate"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["Heartrate"].ToString());
                        PRInterval = (reader["PRInterval"] == DBNull.Value || reader["PRInterval"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["PRInterval"].ToString());
                        QTcBInterval = (reader["QTcBInterval"] == DBNull.Value || reader["QTcBInterval"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["QTcBInterval"].ToString());
                    }
                }

                conn.Close();
            }
            if (txtGenders.Text.Trim().Equals("Male"))
            {
                if ((Convert.ToInt32(Heartrate) >= 50 && Convert.ToInt32(Heartrate) <= 100) && (Convert.ToInt32(PRInterval) >= 120 && Convert.ToInt32(PRInterval) <= 200) && (Convert.ToInt32(QTcBInterval) <= 450))
                    return true;
                else
                    return false;
            }
            else if (txtGenders.Text.Trim().Equals("Female"))
            {
                if ((Convert.ToInt32(Heartrate) >= 50 && Convert.ToInt32(Heartrate) <= 100) && (Convert.ToInt32(PRInterval) >= 120 && Convert.ToInt32(PRInterval) <= 200) && (Convert.ToInt32(QTcBInterval) <= 470))
                    return true;
                else
                    return false;
            }
            else
            {
                if ((Convert.ToInt32(Heartrate) >= 50 && Convert.ToInt32(Heartrate) <= 100) && (Convert.ToInt32(PRInterval) >= 120 && Convert.ToInt32(PRInterval) <= 200) && (Convert.ToInt32(QTcBInterval) <= 470))
                    return true;
                else
                    return false;
            }
        }

        /// <summary>
        /// Check if First values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckFirstRepeatValuesInRangeECG(decimal? HeartrateR1, decimal? PRIntervalR1, decimal? QTcBIntervalR1)
        {
            string subjectKey = string.Empty;
            // string HeartrateR1 = string.Empty;
            // string PRIntervalR1 = string.Empty;
            string QRSIntervalR1 = string.Empty;
            string QTIntervalR1 = string.Empty;
            //  string QTcBIntervalR1 = string.Empty;
            // string ReasonPIR1 = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT Heartrate,PRInterval,QRSInterval,QTInterval,QTcBInterval, HeartrateR1,PRIntervalR1,QRSIntervalR1,QTIntervalR1,QTcBIntervalR1 FROM [dbo].[ScreeningECG] WHERE StudyID=@studyid AND SubjectKey=@subjectKey ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        if (reader["HeartrateR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["HeartrateR1"].ToString()))
                        {
                            HeartrateR1 = Convert.ToDecimal(reader["HeartrateR1"].ToString());
                        }
                        else if (reader["Heartrate"] != DBNull.Value && !string.IsNullOrEmpty(reader["Heartrate"].ToString()))
                        {
                            HeartrateR1 = Convert.ToDecimal(reader["Heartrate"].ToString());
                        }
                        else
                        {
                            HeartrateR1 = default(decimal);
                        }
                        //PRIntervalR1
                        if (reader["PRIntervalR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["PRIntervalR1"].ToString()))
                        {
                            PRIntervalR1 = Convert.ToDecimal(reader["PRIntervalR1"].ToString());
                        }
                        else if (reader["PRInterval"] != DBNull.Value && !string.IsNullOrEmpty(reader["PRInterval"].ToString()))
                        {
                            PRIntervalR1 = Convert.ToDecimal(reader["PRInterval"].ToString());
                        }
                        else
                        {
                            PRIntervalR1 = default(decimal);
                        }
                        //QTcBIntervalR1
                        if (reader["QTcBIntervalR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["QTcBIntervalR1"].ToString()))
                        {
                            QTcBIntervalR1 = Convert.ToDecimal(reader["QTcBIntervalR1"].ToString());
                        }
                        else if (reader["QTcBInterval"] != DBNull.Value && !string.IsNullOrEmpty(reader["QTcBInterval"].ToString()))
                        {
                            QTcBIntervalR1 = Convert.ToDecimal(reader["QTcBInterval"].ToString());
                        }
                        else
                        {
                            QTcBIntervalR1 = default(decimal);
                        }

                        //HeartrateR1 = (reader["HeartrateR1"] == DBNull.Value || reader["HeartrateR1"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["HeartrateR1"].ToString());
                        //PRIntervalR1 = (reader["PRIntervalR1"] == DBNull.Value || reader["PRIntervalR1"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["PRIntervalR1"].ToString());
                        //QTcBIntervalR1 = (reader["QTcBIntervalR1"] == DBNull.Value || reader["QTcBIntervalR1"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["QTcBIntervalR1"].ToString());
                    }
                }

                conn.Close();
            }
            if (txtGenders.Text.Trim().Equals("Male"))
            {
                if ((Convert.ToInt32(HeartrateR1) >= 50 && Convert.ToInt32(HeartrateR1) <= 100) && (Convert.ToInt32(PRIntervalR1) >= 120 && Convert.ToInt32(PRIntervalR1) <= 200) && (Convert.ToInt32(QTcBIntervalR1) <= 450))
                    return true;
                else
                    return false;
            }
            else if (txtGenders.Text.Trim().Equals("Female"))
            {
                if ((Convert.ToInt32(HeartrateR1) >= 50 && Convert.ToInt32(HeartrateR1) <= 100) && (Convert.ToInt32(PRIntervalR1) >= 120 && Convert.ToInt32(PRIntervalR1) <= 200) && (Convert.ToInt32(QTcBIntervalR1) <= 470))
                    return true;
                else
                    return false;
            }
            else
            {
                if ((Convert.ToInt32(HeartrateR1) >= 50 && Convert.ToInt32(HeartrateR1) <= 100) && (Convert.ToInt32(PRIntervalR1) >= 120 && Convert.ToInt32(PRIntervalR1) <= 200) && (Convert.ToInt32(QTcBIntervalR1) <= 470))
                    return true;
                else
                    return false;
            }
        }

        /// <summary>
        /// Check if Second values are in range
        /// </summary>
        /// <returns></returns>
        private bool CheckSecondRepeatValuesInRangeECG(decimal? HeartrateR2, decimal? PRIntervalR2, decimal? QTcBIntervalR2)
        {
            string subjectKey = string.Empty;
            //  string HeartrateR2 = string.Empty;
            // string PRIntervalR2 = string.Empty;
            string QRSIntervalR2 = string.Empty;
            string QTIntervalR2 = string.Empty;
            // string QTcBIntervalR2 = string.Empty;
            //  string ReasonPIR1 = string.Empty;
            using (SqlConnection conn = new SqlConnection(DatabaseHelper.ConnectionString))
            {
                conn.Open();
                string query = string.Format(@"SELECT Heartrate,PRInterval,QRSInterval,QTInterval,QTcBInterval,HeartrateR1,PRIntervalR1,QRSIntervalR1,QTIntervalR1,QTcBIntervalR1,HeartrateR2,PRIntervalR2,QRSIntervalR2,QTIntervalR2,QTcBIntervalR2 FROM [dbo].[ScreeningECG] WHERE StudyID=@studyid AND SubjectKey=@subjectKey ");
                SqlCommand command = new SqlCommand(query, conn);
                command.Parameters.AddWithValue("@studyid", studyId);
                command.Parameters.AddWithValue("@subjectKey", _subjectKey);
                // int result = command.ExecuteNonQuery();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        if (reader["HeartrateR2"] != DBNull.Value && !string.IsNullOrEmpty(reader["HeartrateR2"].ToString()))
                        {
                            HeartrateR2 = Convert.ToDecimal(reader["HeartrateR2"].ToString());
                        }
                        else if (reader["HeartrateR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["HeartrateR1"].ToString()))
                        {
                            HeartrateR2 = Convert.ToDecimal(reader["HeartrateR1"].ToString());
                        }
                        else if (reader["Heartrate"] != DBNull.Value && !string.IsNullOrEmpty(reader["Heartrate"].ToString()))
                        {
                            HeartrateR2 = Convert.ToDecimal(reader["Heartrate"].ToString());
                        }
                        else
                        {
                            HeartrateR2 = default(decimal);
                        }
                        //QTcBIntervalR2
                        if (reader["QTcBIntervalR2"] != DBNull.Value && !string.IsNullOrEmpty(reader["QTcBIntervalR2"].ToString()))
                        {
                            QTcBIntervalR2 = Convert.ToDecimal(reader["QTcBIntervalR2"].ToString());
                        }
                        else if (reader["QTcBIntervalR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["QTcBIntervalR1"].ToString()))
                        {
                            QTcBIntervalR2 = Convert.ToDecimal(reader["QTcBIntervalR1"].ToString());
                        }
                        else if (reader["QTcBInterval"] != DBNull.Value && !string.IsNullOrEmpty(reader["QTcBInterval"].ToString()))
                        {
                            QTcBIntervalR2 = Convert.ToDecimal(reader["QTcBInterval"].ToString());
                        }
                        else
                        {
                            QTcBIntervalR2 = default(decimal);
                        }
                        //PR Interval
                        if (reader["PRIntervalR2"] != DBNull.Value && !string.IsNullOrEmpty(reader["PRIntervalR2"].ToString()))
                        {
                            PRIntervalR2 = Convert.ToDecimal(reader["PRIntervalR2"].ToString());
                        }
                        else if (reader["PRIntervalR1"] != DBNull.Value && !string.IsNullOrEmpty(reader["PRIntervalR1"].ToString()))
                        {
                            PRIntervalR2 = Convert.ToDecimal(reader["PRIntervalR1"].ToString());
                        }
                        else if (reader["PRInterval"] != DBNull.Value && !string.IsNullOrEmpty(reader["PRInterval"].ToString()))
                        {
                            PRIntervalR2 = Convert.ToDecimal(reader["PRInterval"].ToString());
                        }
                        else
                        {
                            PRIntervalR2 = default(decimal);
                        }
                        //HeartrateR2 = (reader["HeartrateR2"] == DBNull.Value || reader["HeartrateR2"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["HeartrateR2"].ToString());
                        //PRIntervalR2 = (reader["PRIntervalR2"] == DBNull.Value || reader["PRIntervalR2"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["PRIntervalR2"].ToString());
                        //QTcBIntervalR2 = (reader["QTcBIntervalR2"] == DBNull.Value || reader["QTcBIntervalR2"].ToString() == string.Empty) ? default(decimal) : Convert.ToDecimal(reader["QTcBIntervalR2"].ToString());
                    }
                }

                conn.Close();
            }
            if (txtGenders.Text.Trim().Equals("Male"))
            {
                if ((Convert.ToInt32(HeartrateR2) >= 50 && Convert.ToInt32(HeartrateR2) <= 100) && (Convert.ToInt32(PRIntervalR2) >= 120 && Convert.ToInt32(PRIntervalR2) <= 200) && (Convert.ToInt32(QTcBIntervalR2) <= 450))
                    return true;
                else
                    return false;
            }

            else if (txtGenders.Text.Trim().Equals("Female"))
            {
                if ((Convert.ToInt32(HeartrateR2) >= 50 && Convert.ToInt32(HeartrateR2) <= 100) && (Convert.ToInt32(PRIntervalR2) >= 120 && Convert.ToInt32(PRIntervalR2) <= 200) && (Convert.ToInt32(QTcBIntervalR2) <= 470))
                    return true;
                else
                    return false;
            }
            else
            {
                if ((Convert.ToInt32(HeartrateR2) >= 50 && Convert.ToInt32(HeartrateR2) <= 100) && (Convert.ToInt32(PRIntervalR2) >= 120 && Convert.ToInt32(PRIntervalR2) <= 200) && (Convert.ToInt32(QTcBIntervalR2) <= 470))
                    return true;
                else
                    return false;
            }
        }
        //====================== Remaining Time to repeat=================


        /// <summary>
        /// Repeat after first time is done
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RemainingTimeToRepeatECG1_Tick(object sender, EventArgs e)
        {
            TimeSpan remainingTime = endTime1ECG - DateTime.Now;
            int _timePassed = GetECGRemainingTime();
            if (!OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey).Equals("NoRepeat") && _timePassed <= 60)
            {
                //    lblTimeToRepeatECG.Text = "Done!";
                lblTimeToRepeatECG.Visible = true;
                lblrepeatECG.Visible = true;
                //    RemainingTimeToRepeatECG1.Enabled = false;
                //btnRepeatECG.Enabled = true;
                ddlECGReason1.Enabled = true;
                txtECGPhysician1.Enabled = true;
                txtECGPhysicianComment1.Enabled = true;
                lblTimeToRepeatECG.Text = String.Format("{0:C}", remainingTime.ToString(@"mm\:ss"));
            }
            else
            {
                lblTimeToRepeatECG.Visible = false;
                lblrepeatECG.Visible = false;
                //btnRepeatECG.Enabled = false;
                ddlECGReason1.Enabled = false;
                txtECGPhysician1.Enabled = false;
                txtECGPhysicianComment1.Enabled = false;
                RemainingTimeToRepeatECG1.Enabled = false;
            }
        }

        /// <summary>
        /// Repeat after second time is done
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void RemainingTimeToRepeatECG2_Tick(object sender, EventArgs e)
        {
            TimeSpan remainingTime = endTime2ECG - DateTime.Now;
            int _timePassed = GetECGRemainingTimeRepeat1();
            if (!OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey).Equals("NoRepeat") && _timePassed <= 60)
            {
                //lblTimeToRepeatECG.Text = "Done!";
                lblTimeToRepeatECG.Visible = true;
                lblrepeatECG.Visible = true;
                //RemainingTimeToRepeatECG2.Enabled = false;
                //btnRepeatECG.Enabled = true;
                ddlECGReason2.Enabled = true;
                txtECGPhysician2.Enabled = true;
                txtECGPhysicianComment2.Enabled = true;
                lblTimeToRepeatECG.Text = String.Format("{0:C}", remainingTime.ToString(@"mm\:ss"));
            }
            else
            {
                lblTimeToRepeatECG.Visible = false;
                lblrepeatECG.Visible = false;

                //btnRepeatECG.Enabled = false;
                ddlECGReason2.Enabled = false;
                txtECGPhysician2.Enabled = false;
                txtECGPhysicianComment2.Enabled = false;
                RemainingTimeToRepeatECG2.Enabled = false;
            }
        }
        // ================================== e-Sign===================================
        //.............................. Time Remaining.....................

        /// <summary>
        /// Remaining Time for the first repeat
        /// </summary>
        /// <returns></returns>
        private int GetECGRemainingTime()
        {
            int output = default(int);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "select dbo.spGetRemainingTimeForECG('" + studyId + "','" + ValueOfKey + "','" + DateTime.Now + "')";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = (int)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }
        /// <summary>
        /// Remaining Time for the second repeat
        /// </summary>
        /// <returns></returns>
        private int GetECGRemainingTimeRepeat1()
        {
            int output = default(int);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "select dbo.spGetRemainingTimeForECGR1('" + studyId + "','" + ValueOfKey + "','" + DateTime.Now + "')";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = (int)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;

        }

        /// <summary>
        /// Reset IsRepeatRequired from (1-0)
        /// </summary>
        private void ResetIsRepeatRequired()
        {
            string output = string.Empty;
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    SqlConnection con = dbCon.GetConnection();
                    string selectQuery = "Select IsRepeatRequired From [dbo].[ScreeningECG] Where StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'";
                    SqlCommand com = new SqlCommand(selectQuery, con);
                    if (com.ExecuteScalar() != DBNull.Value)
                        output = com.ExecuteScalar().ToString();
                    dbCon.CloseConnection();
                }

                if (output == "True")
                {

                    //Output = 0;
                    using (SqlConnection dbCon = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        dbCon.Open();
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET IsRepeatRequired=@isRepeatRequired WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                        SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, dbCon);
                        cmdUpdate.Parameters.AddWithValue("@isRepeatRequired", 0);
                        cmdUpdate.ExecuteNonQuery();
                        dbCon.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        //...............................................................
        /// <summary>
        /// eSign Body Measurement (ECG) No repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveECG_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            string ECGReason = string.Empty;
            string byDoctor = string.Empty;
            int _status = 0;
            try
            {
                if (string.IsNullOrEmpty(txtTimeECGNoR.Text.Trim()) || txtTimeECGNoR.Text.Trim().Equals("__:__"))
                {
                    HelperFunctions.ShowMessageBox("Please enter time.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeECGNoR.Focus();
                    return;
                }
                if (!ControlsValidator.IsValidTimeTextBox(txtTimeECGNoR, null, "", "ECG"))
                    return;
                if (!IsTimeValid(txtDateTimeNowECG.Text.Trim() + " " + txtTimeECGNoR.Text.Trim()))
                {
                    txtTimeECGNoR.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(txtECGEquipmentID.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter equipment ID.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtECGEquipmentID.Focus();
                    return;
                }
                if (!string.IsNullOrEmpty(txtHeartRate.Text.Trim()) && !string.IsNullOrEmpty(txtPRInterval.Text.Trim()) && !string.IsNullOrEmpty(txtQTcB.Text.Trim()))
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET EquipmentID='" + txtECGEquipmentID.Text + "',EquipmentIDR1='" + txtECGEquipmentIDR1.Text + "',EquipmentIDR2='" + txtECGEquipmentIDR2.Text + "', Heartrate='" + txtHeartRate.Text + "',HeartrateR1='" + txtHR1.Text + "',HeartrateR2='" + txtHR2.Text + "',RRInterval='" + txtRRInterval.Text.Trim() + "',RRIntervalR1='" + txtRRR1.Text.Trim() + "',RRIntervalR2='" + txtRRR2.Text.Trim() + "',PRInterval='" + txtPRInterval.Text + "',PRIntervalR1='" + txtPRR1.Text + "',PRIntervalR2='" + txtPRR2.Text + "',QRSInterval='" + txtQRS.Text + "',QRSIntervalR1='" + txtQRSR1.Text + "',QRSIntervalR2='" + txtQRSR2.Text + "',QTInterval='" + txtQT.Text + "',QTIntervalR1='" + txtQTR1.Text + "',QTIntervalR2='" + txtQTR2.Text + "',QTcBInterval='" + txtQTcB.Text + "',QTcBIntervalR1='" + txtQTCBR1.Text + "',QTcBIntervalR2='" + txtQTCBR2.Text + "',QTcFInterval='" + txtQTcF.Text + "',QTcFIntervalR1='" + txtQTcFR1.Text + "',QTcFIntervalR2='" + txtQTcFR2.Text + "',DateTime='" + txtDateTimeNowECG.Text + "',DateTimeR1='" + txtDateTimeNowECGR1.Text + "',DateTimeR2='" + txtDateTimeECGR2.Text + "',Time='" + txtTimeECGNoR.Text + "',TimeR1='" + txtTimeECGR1.Text + "',TimeR2='" + txtTimeECGR2.Text + "',ECGReason='" + ECGReason + "',ByDoctor='" + byDoctor + "',Comments='" + txtECGComments.Text + "',SubjectStatus='" + _status + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedDate='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        }
                        else
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningECG]
                                 (StudyID,SubjectKey,EquipmentID,EquipmentIDR1,EquipmentIDR2,Heartrate,HeartrateR1,HeartrateR2,RRInterval,RRIntervalR1,RRIntervalR2,PRInterval,PRIntervalR1,PRIntervalR2,QRSInterval,QRSIntervalR1,QRSIntervalR2,QTInterval,QTIntervalR1,QTIntervalR2,QTcBInterval,QTcBIntervalR1,QTcBIntervalR2,QTcFInterval,QTcFIntervalR1,QTcFIntervalR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,ECGReason,ByDoctor,Comments,SubjectStatus,eSignedBy,eSignedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + txtECGEquipmentID.Text + "','" + txtECGEquipmentIDR1.Text + "','" + txtECGEquipmentIDR2.Text + "','" + txtHeartRate.Text + "','" + txtHR1.Text + "','" + txtHR2.Text + "','" + txtRRInterval.Text.Trim() + "','" + txtRRR1.Text.Trim() + "','" + txtRRR2.Text.Trim() + "','" + txtPRInterval.Text + "','" + txtPRR1.Text + "','" + txtPRR2.Text + "','" + txtQRS.Text + "','" + txtQRSR1.Text + "','" + txtQRSR2.Text + "','" + txtQT.Text + "','" + txtQTR1.Text + "','" + txtQTR2.Text + "','" + txtQTcB.Text + "','" + txtQTCBR1.Text + "','" + txtQTCBR2.Text + "','" + txtQTcF.Text + "','" + txtQTcFR1.Text + "','" + txtQTcFR2.Text + "','" + txtDateTimeNowECG.Text + "','" + txtDateTimeNowECGR1.Text + "','" + txtDateTimeECGR2.Text + "','" + txtTimeECGNoR.Text + "','" + txtTimeECGR1.Text + "','" + txtTimeECGR2.Text + "','" + ECGReason + "','" + byDoctor + "','" + txtECGComments.Text + "','" + _status + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                            db.ExecuteInsertQuery(InsertQuery, null, false);
                        }
                        //subject status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningECG", pgvECGG.Name, "ECGProceed", SubjectStatusCode.Status.Proceed, txtECGComments.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningECG", SubjectStatusCode.Status.Proceed, txtECGComments.Text.Trim());
                        db.CommitTransaction();
                        db.CloseConnection();
                        HelperFunctions.ShowMessageBox("ECG has been saved successfully.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                        //CheckECGRepeatAndEnableRepeat();
                        //FirstRepeatReasonAndInvetigator();
                        // FirstRepeatInvetigatorByEmail();
                    }
                }
                else
                {

                    DialogResult _ds = HelperFunctions.ShowMessageBox("Mandetory Field " + Environment.NewLine + "1.Heart Rate 2. PR Interval 3.QTcB", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    Text = _ds.ToString();
                }

            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Body Measurement (ECG) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// eSign Body Measurement (ECG) First Repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnECGR1_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string ECGReason = string.Empty;
                string byDoctor = string.Empty;
                int _status = 0;
                if (string.IsNullOrEmpty(txtTimeECGR1.Text.Trim()) || txtTimeECGR1.Text.Trim().Equals("__:__"))
                {
                    HelperFunctions.ShowMessageBox("Please enter time.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeECGR1.Focus();
                    return;
                }
                if (!ControlsValidator.IsValidTimeTextBox(txtTimeECGR1, null, "", "ECG"))
                    return;
                if (!IsTimeValid(txtDateTimeNowECGR1.Text.Trim() + " " + txtTimeECGR1.Text.Trim()))
                {
                    txtTimeECGR1.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(txtECGEquipmentIDR1.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter equipment ID.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtECGEquipmentIDR1.Focus();
                    return;
                }
                if ((!string.IsNullOrEmpty(txtHR1.Text.Trim()) || txtHR1.NullText.Trim().Equals("N/A")) && (!string.IsNullOrEmpty(txtPRR1.Text.Trim()) || txtPRR1.NullText.Trim().Equals("N/A")) && (!string.IsNullOrEmpty(txtQTCBR1.Text.Trim()) || txtQTCBR1.NullText.Trim().Equals("N/A")))
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET EquipmentIDR1='" + txtECGEquipmentIDR1.Text.Trim() + "',HeartrateR1='" + txtHR1.Text.Trim() + "',RRIntervalR1='" + txtRRR1.Text.Trim() + "',PRIntervalR1='" + txtPRR1.Text.Trim() + "',QRSIntervalR1='" + txtQRSR1.Text.Trim() + "',QTIntervalR1='" + txtQTR1.Text.Trim() + "',QTcBIntervalR1='" + txtQTCBR1.Text.Trim() + "',QTcFIntervalR1='" + txtQTcFR1.Text.Trim() + "',DateTimeR1='" + txtDateTimeNowECGR1.Text + "',TimeR1='" + txtTimeECGR1.Text.Trim() + "',ECGReason='" + ECGReason + "',ByDoctor='" + byDoctor + "',Comments='" + txtECGComments.Text.Trim() + "',SubjectStatus='" + _status + "',eSignedByR1='" + App.EsignedUser.UserName + "',eSignedDateR1='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        }
                        else
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningECG]
                                 (StudyID,SubjectKey,EquipmentID,EquipmentIDR1,EquipmentIDR2,Heartrate,HeartrateR1,HeartrateR2,RRInterval,RRIntervalR1,RRIntervalR2,PRInterval,PRIntervalR1,PRIntervalR2,QRSInterval,QRSIntervalR1,QRSIntervalR2,QTInterval,QTIntervalR1,QTIntervalR2,QTcBInterval,QTcBIntervalR1,QTcBIntervalR2,QTcFInterval,QTcFIntervalR1,QTcFIntervalR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,ECGReason,ByDoctor,Comments,SubjectStatus,eSignedByR1,eSignedDateR1) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + txtECGEquipmentID.Text + "','" + txtECGEquipmentIDR1.Text + "','" + txtECGEquipmentIDR2.Text + "','" + txtHeartRate.Text + "','" + txtHR1.Text + "','" + txtHR2.Text + "','" + txtRRInterval.Text.Trim() + "','" + txtRRR1.Text.Trim() + "','" + txtRRR2.Text.Trim() + "','" + txtPRInterval.Text + "','" + txtPRR1.Text + "','" + txtPRR2.Text + "','" + txtQRS.Text + "','" + txtQRSR1.Text + "','" + txtQRSR2.Text + "','" + txtQT.Text + "','" + txtQTR1.Text + "','" + txtQTR2.Text + "','" + txtQTcB.Text + "','" + txtQTCBR1.Text + "','" + txtQTCBR2.Text + "','" + txtQTcF.Text + "','" + txtQTcFR1.Text + "','" + txtQTcFR2.Text + "','" + txtDateTimeNowECG.Text + "','" + txtDateTimeNowECGR1.Text + "','" + txtDateTimeECGR2.Text + "','" + txtTimeECGNoR.Text + "','" + txtTimeECGR1.Text + "','" + txtTimeECGR2.Text + "','" + ECGReason + "','" + byDoctor + "','" + txtECGComments.Text + "','" + _status + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                            db.ExecuteInsertQuery(InsertQuery, null, false);
                        }
                        //subject status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningECG", pgvECGG.Name, "ECGProceed", SubjectStatusCode.Status.Proceed, txtECGComments.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningECG", SubjectStatusCode.Status.Proceed, txtECGComments.Text.Trim());

                        db.CommitTransaction();
                        db.CloseConnection();
                        HelperFunctions.ShowMessageBox("ECG has been saved successfully.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                        //CheckECGRepeatAndEnableRepeat();
                        //SecondRepeatReasonAndInvetigator();
                        //SecondRepeatInvetigatorByEmail();
                    }
                    // ... Reset and check isRepeat required (Investigator)....
                    ResetIsRepeatRequired();
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Fields Can not be Empty", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Body Measurement (ECG) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// eSign Body Measurement (ECG) Second Repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnECGR2_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            string ECGReason = string.Empty;
            string byDoctor = string.Empty;
            int _status = 0;
            try
            {
                if (string.IsNullOrEmpty(txtTimeECGR2.Text.Trim()) || txtTimeECGR2.Text.Trim().Equals("__:__"))
                {
                    HelperFunctions.ShowMessageBox("Please enter time.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtTimeECGR2.Focus();
                    return;
                }
                if (!ControlsValidator.IsValidTimeTextBox(txtTimeECGR2, null, "", "ECG"))
                    return;
                if (!IsTimeValid(txtDateTimeECGR2.Text.Trim() + " " + txtTimeECGR2.Text.Trim()))
                {
                    txtTimeECGR2.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(txtECGEquipmentIDR2.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter equipment ID.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtECGEquipmentIDR2.Focus();
                    return;
                }
                if ((!string.IsNullOrEmpty(txtHR2.Text.Trim()) || txtHR2.NullText.Trim().Equals("N/A")) && (!string.IsNullOrEmpty(txtPRR2.Text.Trim()) || txtPRR2.NullText.Trim().Equals("N/A")) && (!string.IsNullOrEmpty(txtQTCBR2.Text.Trim()) || txtQTCBR2.NullText.Trim().Equals("N/A")))
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            //string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET  EquipmentID='" + txtECGEquipmentID.Text + "',EquipmentIDR1='" + txtECGEquipmentIDR1.Text + "',EquipmentIDR2='" + txtECGEquipmentIDR2.Text + "', Heartrate='" + txtHeartRate.Text + "',HeartrateR1='" + txtHR1.Text + "',HeartrateR2='" + txtHR2.Text + "',RRInterval='" + txtRRInterval.Text.Trim() + "',RRIntervalR1='" + txtRRR1.Text.Trim() + "',RRIntervalR2='" + txtRRR2.Text.Trim() + "',PRInterval='" + txtPRInterval.Text + "',PRIntervalR1='" + txtPRR1.Text + "',PRIntervalR2='" + txtPRR2.Text + "',QRSInterval='" + txtQRS.Text + "',QRSIntervalR1='" + txtQRSR1.Text + "',QRSIntervalR2='" + txtQRSR2.Text + "',QTInterval='" + txtQT.Text + "',QTIntervalR1='" + txtQTR1.Text + "',QTIntervalR2='" + txtQTR2.Text + "',QTcBInterval='" + txtQTcB.Text + "',QTcBIntervalR1='" + txtQTCBR1.Text + "',QTcBIntervalR2='" + txtQTCBR2.Text + "',QTcFInterval='" + txtQTcF.Text + "',QTcFIntervalR1='" + txtQTcFR1.Text + "',QTcFIntervalR2='" + txtQTcFR2.Text + "',DateTime='" + txtDateTimeNowECG.Text + "',DateTimeR1='" + txtDateTimeNowECGR1.Text + "',DateTimeR2='" + txtDateTimeECGR2.Text + "',Time='" + txtTimeECGNoR.Text + "',TimeR1='" + txtTimeECGR1.Text + "',TimeR2='" + txtTimeECGR2.Text + "',ECGReason='" + ECGReason + "',ByDoctor='" + byDoctor + "',Comments='" + txtECGComments.Text + "',SubjectStatus='" + _status + "',eSignedByR2='" + App.EsignedUser.UserName + "',eSignedDateR2='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET  EquipmentIDR2='" + txtECGEquipmentIDR2.Text.Trim() + "',HeartrateR2='" + txtHR2.Text.Trim() + "',RRIntervalR2='" + txtRRR2.Text.Trim() + "',PRIntervalR2='" + txtPRR2.Text.Trim() + "',QRSIntervalR2='" + txtQRSR2.Text.Trim() + "',QTIntervalR2='" + txtQTR2.Text.Trim() + "',QTcBIntervalR2='" + txtQTCBR2.Text.Trim() + "',QTcFIntervalR2='" + txtQTcFR2.Text.Trim() + "',DateTimeR2='" + txtDateTimeECGR2.Text.Trim() + "',TimeR2='" + txtTimeECGR2.Text.Trim() + "',ECGReason='" + ECGReason + "',ByDoctor='" + byDoctor + "',Comments='" + txtECGComments.Text.Trim() + "',SubjectStatus='" + _status + "',eSignedByR2='" + App.EsignedUser.UserName + "',eSignedDateR2='" + GetCurrentStandardDateTime() + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            db.ExecuteUpdateQuery(UpdateQuery, null, false);
                        }
                        else
                        {
                            tabName = "ECG";
                            string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                            if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                            {
                                return;
                            }
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningECG]
                                 (StudyID,SubjectKey, EquipmentID, EquipmentIDR1, EquipmentIDR2,Heartrate,HeartrateR1,HeartrateR2,RRInterval,RRIntervalR1,RRIntervalR2,PRInterval,PRIntervalR1,PRIntervalR2,QRSInterval,QRSIntervalR1,QRSIntervalR2,QTInterval,QTIntervalR1,QTIntervalR2,QTcBInterval,QTcBIntervalR1,QTcBIntervalR2,QTcFInterval,QTcFIntervalR1,QTcFIntervalR2,DateTime,DateTimeR1,DateTimeR2,Time,TimeR1,TimeR2,ECGReason,ByDoctor,Comments,SubjectStatus,eSignedByR2,eSignedDateR2) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + txtECGEquipmentID.Text + "','" + txtECGEquipmentIDR1.Text + "','" + txtECGEquipmentIDR2.Text + "','" + txtHeartRate.Text + "','" + txtHR1.Text + "','" + txtHR2.Text + "','" + txtRRInterval.Text.Trim() + "','" + txtRRR1.Text.Trim() + "','" + txtRRR2.Text.Trim() + "','" + txtPRInterval.Text + "','" + txtPRR1.Text + "','" + txtPRR2.Text + "','" + txtQRS.Text + "','" + txtQRSR1.Text + "','" + txtQRSR2.Text + "','" + txtQT.Text + "','" + txtQTR1.Text + "','" + txtQTR2.Text + "','" + txtQTcB.Text + "','" + txtQTCBR1.Text + "','" + txtQTCBR2.Text + "','" + txtQTcF.Text + "','" + txtQTcFR1.Text + "','" + txtQTcFR2.Text + "','" + txtDateTimeNowECG.Text + "','" + txtDateTimeNowECGR1.Text + "','" + txtDateTimeECGR2.Text + "','" + txtTimeECGNoR.Text + "','" + txtTimeECGR1.Text + "','" + txtTimeECGR2.Text + "','" + ECGReason + "','" + byDoctor + "','" + txtECGComments.Text + "','" + _status + "','" + App.EsignedUser.UserName + "','" + GetCurrentStandardDateTime() + "')");
                            db.ExecuteInsertQuery(InsertQuery, null, false);
                        }
                        //subject status
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningECG", pgvECGG.Name, "ECGProceed", SubjectStatusCode.Status.Proceed, txtECGComments.Text, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningECG", SubjectStatusCode.Status.Proceed, txtECGComments.Text.Trim());
                        db.CommitTransaction();
                        db.CloseConnection();
                        HelperFunctions.ShowMessageBox("ECG has been saved successfully.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                        // CheckECGRepeatAndEnableRepeat();
                        // ThirdRepeatReasonAndInvetigator();
                    }
                    // ... Reset and check isRepeat required (Investigator)....
                    ResetIsRepeatRequired();
                }
                else
                {

                    DialogResult _ds = HelperFunctions.ShowMessageBox("Fields Can not be Empty", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    Text = _ds.ToString();
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Body Measurement (ECG) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Retrieve ECG by SubjectKey
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetECG(string subjectKey)
        {
            string ecgReason = string.Empty;
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "'");
                        SqlCommand cmd = new SqlCommand(query, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            txtECGEquipmentID.Text = dr["EquipmentID"].ToString();
                            txtECGEquipmentIDR1.Text = dr["EquipmentIDR1"].ToString();
                            txtECGEquipmentIDR2.Text = dr["EquipmentIDR2"].ToString();
                            string _HR = string.Empty;
                            string _HRR1 = string.Empty;
                            string _HRR2 = string.Empty;

                            string _RR = string.Empty;
                            string _RRR1 = string.Empty;
                            string _RRR2 = string.Empty;

                            string _PRInterval = string.Empty;
                            string _PRIntervalR1 = string.Empty;
                            string _PRIntervalR2 = string.Empty;
                            string _QRS = string.Empty;
                            string _QRSR1 = string.Empty;
                            string _QRSR2 = string.Empty;
                            string _QT = string.Empty;
                            string _QTR1 = string.Empty;
                            string _QTR2 = string.Empty;
                            string _QTCB = string.Empty;
                            string _QTCBR1 = string.Empty;
                            string _QTCBR2 = string.Empty;
                            string _QTCF = string.Empty;
                            string _QTCFR1 = string.Empty;
                            string _QTCFR2 = string.Empty;

                            _HR = dr["Heartrate"].ToString();
                            _HRR1 = dr["HeartrateR1"].ToString();
                            _HRR2 = dr["HeartrateR2"].ToString();

                            _RR = dr["RRInterval"].ToString().Trim();
                            _RRR1 = dr["RRIntervalR1"].ToString().Trim();
                            _RRR2 = dr["RRIntervalR2"].ToString().Trim();
                            txtRRInterval.Text = _RR;
                            txtRRR1.Text = _RRR1;
                            txtRRR2.Text = _RRR2;

                            _PRInterval = dr["PRInterval"].ToString();
                            _PRIntervalR1 = dr["PRIntervalR1"].ToString();
                            _PRIntervalR2 = dr["PRIntervalR2"].ToString();

                            _QRS = dr["QRSInterval"].ToString();
                            _QRSR1 = dr["QRSIntervalR1"].ToString();
                            _QRSR2 = dr["QRSIntervalR2"].ToString();

                            _QT = dr["QTInterval"].ToString();
                            _QTR1 = dr["QTIntervalR1"].ToString();
                            _QTR2 = dr["QTIntervalR2"].ToString();

                            _QTCB = dr["QTcBInterval"].ToString();
                            _QTCBR1 = dr["QTcBIntervalR1"].ToString();
                            _QTCBR2 = dr["QTcBIntervalR2"].ToString();

                            _QTCF = dr["QTcFInterval"].ToString();
                            _QTCFR1 = dr["QTcFIntervalR1"].ToString();
                            _QTCFR2 = dr["QTcFIntervalR2"].ToString();
                            CheckECGValuesAfterLoad(_HR, _HRR1, _HRR2, _PRInterval, _PRIntervalR1, _PRIntervalR2, _QRS, _QRSR1, _QRSR2, _QT, _QTR1, _QTR2, _QTCB, _QTCBR1, _QTCBR2, _QTCF, _QTCFR1, _QTCFR2);

                            txtDateTimeNowECG.Text = dr["DateTime"].ToString();
                            txtDateTimeNowECGR1.Text = dr["DateTimeR1"].ToString();
                            txtDateTimeECGR2.Text = dr["DateTimeR2"].ToString();
                            txtTimeECGNoR.Text = dr["Time"].ToString();
                            txtTimeECGR1.Text = dr["TimeR1"].ToString();
                            txtTimeECGR2.Text = dr["TimeR2"].ToString();

                            lblSCECGEsignedBy1.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCECGEsignedDate1.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }

                            }
                            lblSCECGEsignedBy2.Text = dr["eSignedByR1"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDateR1"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDateR1"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCECGEsignedDate2.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                            lblSCECGEsignedBy3.Text = dr["eSignedByR2"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDateR2"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDateR2"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCECGEsignedDate3.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }

                            if (!string.IsNullOrEmpty(dr["InvestigatorEsign1"].ToString()))
                            {
                                ecgReason = (dr["InvestigatorReason1"].ToString());
                                var item = ddlECGReason1.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason1.SelectedIndex = item.Index;
                                else
                                    ddlECGReason1.SelectedIndex = -1;
                                txtECGPhysicianComment1.Text = dr["InvestigatorComment1"].ToString();
                                txtECGPhysician1.Text = dr["InvestigatorEsign1"].ToString();
                                ddlECGReason1.ReadOnly = true;
                                txtECGPhysician1.ReadOnly = true;
                                txtECGPhysicianComment1.ReadOnly = true;
                            }
                            else if (!string.IsNullOrEmpty(dr["EsignedEmail1By"].ToString()))
                            {
                                ecgReason = (dr["PhysicianEmailInterpretation1"].ToString());
                                var item = ddlECGReason1.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason1.SelectedIndex = item.Index;
                                else
                                    ddlECGReason1.SelectedIndex = -1;
                                txtECGPhysicianComment1.Text = dr["EmailEsignedByComment1"].ToString();
                                txtECGPhysician1.Text = dr["RepeatGrantedEmailBy1"].ToString();
                                ddlECGReason1.ReadOnly = true;
                                txtECGPhysician1.ReadOnly = true;
                                txtECGPhysicianComment1.ReadOnly = true;
                            }
                            if (!string.IsNullOrEmpty(dr["InvestigatorEsign2"].ToString()))
                            {
                                ecgReason = (dr["InvestigatorReason2"].ToString());
                                var item = ddlECGReason2.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason2.SelectedIndex = item.Index;
                                else
                                    ddlECGReason2.SelectedIndex = -1;
                                txtECGPhysician2.Text = dr["InvestigatorEsign2"].ToString();
                                txtECGPhysicianComment2.Text = dr["InvestigatorComment2"].ToString();
                                ddlECGReason2.ReadOnly = true;
                                txtECGPhysician2.ReadOnly = true;
                                txtECGPhysicianComment2.ReadOnly = true;
                            }
                            else if (!string.IsNullOrEmpty(dr["EsigneEmail2By"].ToString()))
                            {

                                ecgReason = (dr["PhysicianEmailInterpretation2"].ToString());
                                var item = ddlECGReason2.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason2.SelectedIndex = item.Index;
                                else
                                    ddlECGReason2.SelectedIndex = -1;
                                txtECGPhysicianComment2.Text = dr["EmailEsignedByComment2"].ToString();
                                txtECGPhysician2.Text = dr["RepeatGrantedEmailBy2"].ToString();
                                ddlECGReason2.ReadOnly = true;
                                txtECGPhysician2.ReadOnly = true;
                                txtECGPhysicianComment2.ReadOnly = true;
                            }
                            if (!string.IsNullOrEmpty(dr["InvestigatorEsign3"].ToString()))
                            {
                                ecgReason = (dr["InvestigatorReason3"].ToString());
                                var item = ddlECGReason3.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason3.SelectedIndex = item.Index;
                                else
                                    ddlECGReason3.SelectedIndex = -1;
                                txtECGPhysician3.Text = dr["InvestigatorEsign3"].ToString();
                                txtECGPhysicianComment3.Text = dr["InvestigatorComment3"].ToString();
                                txtECGPhysicianComment3.ReadOnly = true;
                                ddlECGReason3.ReadOnly = true;
                                txtECGPhysician3.ReadOnly = true;
                            }
                            else if (!string.IsNullOrEmpty(dr["EsignedEmail3By"].ToString()))
                            {

                                ecgReason = (dr["PhysicianEmailInterpretation3"].ToString());
                                var item = ddlECGReason3.Items.Where(i => i.Text.Trim().ToUpper().Equals(ecgReason.ToUpper())).FirstOrDefault();
                                if (item != null)
                                    ddlECGReason3.SelectedIndex = item.Index;
                                else
                                    ddlECGReason3.SelectedIndex = -1;
                                txtECGPhysicianComment3.Text = dr["EmailEsignedByComment3"].ToString();
                                txtECGPhysician3.Text = dr["RepeatGrantedEmailBy3"].ToString();
                                ddlECGReason3.ReadOnly = true;
                                txtECGPhysician3.ReadOnly = true;
                                txtECGPhysicianComment3.ReadOnly = true;
                            }
                            //string _repeatValue = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
                            ////************ Reason  & Invetsigator ************
                            //if (!_repeatValue.Equals("NoReapeat"))
                            //{
                            //    //ckECGPhysicalRepeat.Checked = true;
                            //    //ckECGPhysicalRepeat.ReadOnly = true;
                            //    // gbECGEmail.Enabled = false;
                            //    if (OnScreeningHelper.IsECGESigned(studyId, ValueOfKey))
                            //    {
                            //        FirstRepeatReasonAndInvetigator();
                            //    }
                            //    if (OnScreeningHelper.IsECGRepeat1Signed(studyId, ValueOfKey))
                            //    {
                            //        SecondRepeatReasonAndInvetigator();
                            //    }

                            //    if (OnScreeningHelper.IsECGRepeat2Signed(studyId, ValueOfKey))
                            //    {
                            //        ThirdRepeatReasonAndInvetigator();
                            //    }
                            //    if (OnScreeningHelper.IsECGEmail1eSigned(studyId, ValueOfKey))
                            //    {
                            //        FirstRepeatInvetigatorByEmail();
                            //    }
                            //    if (OnScreeningHelper.IsECGEmail2eSigned(studyId, ValueOfKey))
                            //    {
                            //        SecondRepeatInvetigatorByEmail();
                            //    }
                            //    gbECGEmail.Enabled = false;
                            //}
                            //else
                            //{
                            //    gbECGEmail.Enabled = true;
                            //    gbECGEmail.Enabled = true;
                            //    ckECGEmailRepeat.Checked = true;
                            //}


                            //... Comments
                            txtECGComments.Text = dr["Comments"].ToString();

                            // Check if there is Data 
                            if (txtHR1.Text != "" && txtPRR1.Text != "" && txtQTCBR1.Text != "")
                            {
                                GBECGR1.Visible = true;
                            }
                            else
                            {
                                GBECGR1.Visible = false;
                            }
                            if (txtHR2.Text != "" && txtPRR2.Text != "" && txtQTCBR2.Text != "")
                            {
                                GBECGR2.Visible = true;
                            }
                            else
                            {
                                GBECGR2.Visible = false;
                            }

                        }
                        connection.Close();

                    }
                    // ..... Dropped / Failed ECG.....
                    //SubjectDroppedFailedECG(subjectKey);
                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void CheckECGValuesAfterLoad(string HR, string HRR1, string HRR2, string PRI, string PRIR1, string PRIR2, string QRS, string QRSR1, string QRSR2, string QT, string QTR1, string QTR2, string QTCB, string QTCBR1, string QTCBR2, string QTCF, string QTCFR1, string QTCFR2)
        {
            decimal _HR = default(decimal);
            decimal _HRR1 = default(decimal);
            decimal _HRR2 = default(decimal);
            decimal _PRI = default(decimal);
            decimal _PRIR1 = default(decimal);
            decimal _PRIR2 = default(decimal);
            decimal _QRS = default(decimal);
            decimal _QRSR1 = default(decimal);
            decimal _QRSR2 = default(decimal);
            decimal _QT = default(decimal);
            decimal _QTR1 = default(decimal);
            decimal _QTR2 = default(decimal);
            decimal _QTCB = default(decimal);
            decimal _QTCBR1 = default(decimal);
            decimal _QTCBR2 = default(decimal);
            decimal _QTCF = default(decimal);
            decimal _QTCFR1 = default(decimal);
            decimal _QTCFR2 = default(decimal);

            //HR
            txtHeartRate.TextChanged -= new System.EventHandler(txtHeartRate_TextChanged);
            if (decimal.TryParse(HR, out _HR))
            {
                txtHeartRate.Text = HR;
            }
            else
            {
                txtHeartRate.Clear();
                txtHeartRate.NullText = "N/A";
            }
            txtHeartRate.TextChanged += new System.EventHandler(txtHeartRate_TextChanged);
            txtHR1.TextChanged -= new System.EventHandler(txtHR1_TextChanged);
            if (decimal.TryParse(HRR1, out _HRR1))
            {
                txtHR1.Text = HRR1;
            }
            else
            {
                txtHR1.Clear();
                txtHR1.NullText = "N/A";
            }
            txtHR1.TextChanged += new System.EventHandler(txtHR1_TextChanged);
            txtHR2.TextChanged -= new System.EventHandler(txtHR2_TextChanged);
            if (decimal.TryParse(HRR2, out _HRR2))
            {
                txtHR2.Text = HRR2;
            }
            else
            {
                txtHR2.Clear();
                txtHR2.NullText = "N/A";
            }
            txtHR2.TextChanged += new System.EventHandler(txtHR2_TextChanged);

            //PRI            
            if (decimal.TryParse(PRI, out _PRI))
            {
                txtPRInterval.Text = PRI;
            }
            else
            {
                txtPRInterval.Clear();
                txtPRInterval.NullText = "N/A";
            }

            if (decimal.TryParse(PRIR1, out _PRIR1))
            {
                txtPRR1.Text = PRIR1;
            }
            else
            {
                txtPRR1.Clear();
                txtPRR1.NullText = "N/A";
            }
            if (decimal.TryParse(PRIR2, out _PRIR2))
            {
                txtPRR2.Text = PRIR2;
            }
            else
            {
                txtPRR2.Clear();
                txtPRR2.NullText = "N/A";
            }

            //QRS
            if (decimal.TryParse(QRS, out _QRS))
            {
                txtQRS.Text = QRS;
            }
            else
            {
                txtQRS.Clear();
                txtQRS.NullText = "N/A";
            }
            if (decimal.TryParse(QRSR1, out _QRSR1))
            {
                txtQRSR1.Text = QRSR1;
            }
            else
            {
                txtQRSR1.Clear();
                txtQRSR1.NullText = "N/A";
            }
            if (decimal.TryParse(QRSR2, out _QRSR2))
            {
                txtQRSR2.Text = QRSR2;
            }
            else
            {
                txtQRSR2.Clear();
                txtQRSR2.NullText = "N/A";
            }

            //QT
            txtQT.TextChanged -= new System.EventHandler(txtQT_TextChanged);
            if (decimal.TryParse(QT, out _QT))
            {
                txtQT.Text = QT;
            }
            else
            {
                txtQT.Clear();
                txtQT.NullText = "N/A";
            }
            txtQT.TextChanged += new System.EventHandler(txtQT_TextChanged);
            txtQTR1.TextChanged -= new System.EventHandler(txtQTR1_TextChanged);
            if (decimal.TryParse(QTR1, out _QTR1))
            {
                txtQTR1.Text = QTR1;
            }
            else
            {
                txtQTR1.Clear();
                txtQTR1.NullText = "N/A";
            }
            txtQTR1.TextChanged += new System.EventHandler(txtQTR1_TextChanged);
            txtQTR2.TextChanged -= new System.EventHandler(txtQTR2_TextChanged);
            if (decimal.TryParse(QTR2, out _QTR2))
            {
                txtQTR2.Text = QTR2;
            }
            else
            {
                txtQTR2.Clear();
                txtQTR2.NullText = "N/A";
            }
            txtQTR2.TextChanged += new System.EventHandler(txtQTR2_TextChanged);

            //QTCB
            if (decimal.TryParse(QTCB, out _QTCB))
            {
                txtQTcB.Text = QTCB;
            }
            else
            {
                txtQTcB.Clear();
                txtQTcB.NullText = "N/A";
            }
            if (decimal.TryParse(QTCBR1, out _QTCBR1))
            {
                txtQTCBR1.Text = QTCBR1;
            }
            else
            {
                txtQTCBR1.Clear();
                txtQTCBR1.NullText = "N/A";
            }
            if (decimal.TryParse(QTCBR2, out _QTCBR2))
            {
                txtQTCBR2.Text = QTCBR2;
            }
            else
            {
                txtQTCBR2.Clear();
                txtQTCBR2.NullText = "N/A";
            }

            //QTCF
            if (decimal.TryParse(QTCF, out _QTCF))
            {
                txtQTcF.Text = QTCF;
            }
            else
            {
                txtQTcF.Clear();
                txtQTcF.NullText = "N/A";
            }
            if (decimal.TryParse(QTCFR1, out _QTCFR1))
            {
                txtQTcFR1.Text = QTCFR1;
            }
            else
            {
                txtQTcFR1.Clear();
                txtQTcFR1.NullText = "N/A";
            }
            if (decimal.TryParse(QTCFR2, out _QTCFR2))
            {
                txtQTcFR2.Text = QTCFR2;
            }
            else
            {
                txtQTcFR2.Clear();
                txtQTcFR2.NullText = "N/A";
            }
        }
        // =================== Repeat Required (Invistigator)=================
        private bool IsECGFile1Exist()
        {

            string isEcgfile1exist = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT ECGFile1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    isEcgfile1exist = dr["ECGFile1"].ToString();
                }
            }
            if (!string.IsNullOrEmpty(isEcgfile1exist))
                return true;
            else
                return false;
        }
        private bool IsECGFile2Exist()
        {

            string isEcgfile2exist = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT ECGFile2 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    isEcgfile2exist = dr["ECGFile2"].ToString();
                }
            }
            if (!string.IsNullOrEmpty(isEcgfile2exist))
                return true;
            else
                return false;
        }
        private bool IsECGFile3Exist()
        {

            string isEcgfile3exist = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT ECGFile3 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    isEcgfile3exist = dr["ECGFile3"].ToString();
                }
            }
            if (!string.IsNullOrEmpty(isEcgfile3exist))
                return true;
            else
                return false;
        }
        private void FirstRepeatReasonAndInvetigator()
        {
            string reason = string.Empty;
            string investigator = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT InvestigatorEsign1,InvestigatorReason1,InvestigatorComment1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {

                    reason = (dr["InvestigatorReason1"].ToString());
                    var item = ddlECGReason1.Items.Where(i => i.Text.Trim().ToUpper().Equals(reason.ToUpper())).FirstOrDefault();
                    if (item != null)
                        ddlECGReason1.SelectedIndex = item.Index;
                    else
                        ddlECGReason1.SelectedIndex = -1;

                    txtECGPhysicianComment1.Text = dr["InvestigatorComment1"].ToString();
                    txtECGPhysician1.Text = dr["InvestigatorEsign1"].ToString();
                    ddlECGReason1.ReadOnly = true;
                    txtECGPhysician1.ReadOnly = true;
                    txtECGPhysicianComment1.ReadOnly = true;
                }
                else
                {
                    ddlECGReason1.ReadOnly = false;
                    txtECGPhysician1.ReadOnly = false;
                    txtECGPhysicianComment1.ReadOnly = false;
                }
            }

        }
        private void SecondRepeatReasonAndInvetigator()
        {
            string reason = string.Empty;
            string investigator = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT InvestigatorEsign2,InvestigatorReason2,InvestigatorComment2 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {

                    reason = (dr["InvestigatorReason2"].ToString());
                    var item = ddlECGReason2.Items.Where(i => i.Text.Trim().ToUpper().Equals(reason.ToUpper())).FirstOrDefault();
                    if (item != null)
                        ddlECGReason2.SelectedIndex = item.Index;
                    else
                        ddlECGReason2.SelectedIndex = -1;

                    txtECGPhysician2.Text = dr["InvestigatorEsign2"].ToString();
                    txtECGPhysicianComment2.Text = dr["InvestigatorComment2"].ToString();
                    ddlECGReason2.ReadOnly = true;
                    txtECGPhysician2.ReadOnly = true;
                    txtECGPhysicianComment2.ReadOnly = true;
                }
                else
                {
                    txtECGPhysicianComment2.ReadOnly = false;
                    ddlECGReason2.ReadOnly = false;
                    txtECGPhysician2.ReadOnly = false;
                }
            }

        }
        private void ThirdRepeatReasonAndInvetigator()
        {
            string reason = string.Empty;
            string investigator = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT InvestigatorEsign3,InvestigatorReason3,InvestigatorComment3 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {

                    reason = (dr["InvestigatorReason3"].ToString());
                    using (var item = ddlECGReason3.Items.Where(i => i.Text.Equals(reason)).FirstOrDefault())
                    {
                        if (item != null)
                            ddlECGReason3.SelectedIndex = item.Index;
                        else
                            ddlECGReason3.SelectedIndex = -1;
                    }

                    txtECGPhysician3.Text = dr["InvestigatorEsign3"].ToString();
                    txtECGPhysicianComment3.Text = dr["InvestigatorComment3"].ToString();
                    txtECGPhysicianComment3.ReadOnly = true;
                    ddlECGReason3.ReadOnly = true;
                    txtECGPhysician3.ReadOnly = true;
                }
                else
                {
                    txtECGPhysicianComment3.ReadOnly = false;
                    ddlECGReason3.ReadOnly = false;
                    txtECGPhysician3.ReadOnly = false;
                }
            }

        }
        private void FirstRepeatInvetigatorByEmail()
        {

            string investigator = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT EmailApprovedBy1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    txtECGRepeatGrantedBy.Text = dr["EmailApprovedBy1"].ToString();
                    if (!string.IsNullOrEmpty(txtECGRepeatGrantedBy.Text))
                        txtECGRepeatGrantedBy.ReadOnly = true;
                }
                else
                {

                    txtECGRepeatGrantedBy.ReadOnly = false;
                }
                connection.Close();
            }

        }
        private void SecondRepeatInvetigatorByEmail()
        {
            string investigator = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT EmailApprovedBy2 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {


                    txtECGRepeatGrantedBy.Text = dr["EmailApprovedBy2"].ToString();

                    if (!string.IsNullOrEmpty(txtECGRepeatGrantedBy.Text))
                        txtECGRepeatGrantedBy.ReadOnly = true;
                }
                else
                {

                    txtECGRepeatGrantedBy.ReadOnly = false;
                }
                connection.Close();
            }


        }
        /// <summary>
        /// Return True(if the value is 1 else false)
        /// </summary>
        /// <returns></returns>
        private bool CheckECGRepeatRequired()
        {
            string isRepearRequired = string.Empty;
            using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            {

                connection.Open();
                string query = string.Format(@"SELECT IsRepeatRequired FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + ValueOfKey + "'");
                SqlCommand cmd = new SqlCommand(query, connection);
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    isRepearRequired = dr["IsRepeatRequired"].ToString();
                }
            }
            if (isRepearRequired == "True")
                return true;
            else
                return false;
        }

        private void EnableECGCommonRepeatControls(bool enable)
        {
            btnRepeatECG.Enabled = enable;
            //if (enable)
            //    txtECGComments.ReadOnly = !enable;
            //else
            //    txtECGComments.ReadOnly = enable;
            lblTimeToRepeatECG.Visible = enable;
            lblrepeatECG.Visible = enable;
        }

        /// <summary>
        /// Repeat and reason for repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRepeatECG_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if(ddlECGReason1.SelectedItem==null)
                //{
                //    HelperFunctions.ShowMessageBox("Please select interpretation of.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                //    return;
                //}
                string _ecgRepeat = OnScreeningHelper.GetECGRepeat(studyId, ValueOfKey);
                string ECGReason = string.Empty;
                string byDoctor = string.Empty;
                var ECGtextBoxes = new RadTextBox[] { txtHeartRate, txtPRInterval, txtQRS, txtQT, txtQTcB, txtDateTimeNowECG };
                var ECGtextBoxesRepeat1 = new RadTextBox[] { txtHR1, txtPRR1, txtQRSR1, txtQTR1, txtQTCBR1, txtDateTimeNowECGR1 };
                var ECGtextBoxesRepeat2 = new RadTextBox[] { txtHR2, txtPRR2, txtQRSR2, txtQTR2, txtQTCBR2, txtDateTimeECGR2 };
                if (_ecgRepeat.Equals("NoRepeat"))
                {
                    HelperFunctions.ShowMessageBox("Repeat has not been requested yet.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                else if (_ecgRepeat.Equals("Repeat1"))
                {
                    if (ECGtextBoxes.Any(tb => string.IsNullOrEmpty(tb.Text.Trim()) && !tb.NullText.Trim().Equals("N/A")) && ECGtextBoxesRepeat1.Any(x => x.Visible != true))
                    {
                        HelperFunctions.ShowMessageBox("All fields are required", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        foreach (RadTextBox txtbox in ECGtextBoxes)
                        {
                            if (txtbox.Text == string.Empty)
                            {
                                ValidationError.SetError(txtbox, "Field can not be empty");
                            }
                            else
                            {
                                ValidationError.Clear();
                            }
                        }
                        return;
                    }

                    tabName = "ECG";
                    reason = "ECG repeat has been activated by " + App.EsignedUser.UserName;
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    CommonHelpers.ScrollPanelToTop(pnlSCECGBody);
                    GBECGR1.Visible = true;
                    txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
                    txtTimeECGR1.Focus();
                    txtTimeECGR1.ReadOnly = false;
                    //ddlECGReason1.Enabled = false;
                    //txtECGPhysician1.Enabled = false;
                    btnRepeatECG.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(gbECGPhysicianApprovalR1, true);
                    RepeatedValuesECG();
                    EnableECGCommonRepeatControls(false);
                    RemainingTimeToRepeatECG1.Enabled = false;
                }
                else if (_ecgRepeat.Equals("Repeat2"))
                {
                    if (ECGtextBoxesRepeat1.Any(tb => string.IsNullOrEmpty(tb.Text.Trim()) && !tb.NullText.Trim().Equals("N/A")) && ECGtextBoxesRepeat2.Any(x => x.Visible != true))
                    {
                        HelperFunctions.ShowMessageBox("All fields are required", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        foreach (RadTextBox txtbox in ECGtextBoxesRepeat1)
                        {
                            if (txtbox.Text == string.Empty)
                            {
                                ValidationError.SetError(txtbox, "Field can not be empty");
                            }
                            else
                            {
                                ValidationError.Clear();
                            }
                        }
                        return;
                    }
                    tabName = "ECG";
                    reason = "ECG repeat has been activated by " + App.EsignedUser.UserName;
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    CommonHelpers.ScrollPanelToTop(pnlSCECGBody);
                    GBECGR2.Visible = true;
                    txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
                    //ddlECGReason2.Enabled = false;
                    //txtECGPhysician1.Enabled = false;
                    btnRepeatECG.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(gbECGPhysicianApprovalR2, true);
                    SecondRepeatValuesECG();
                    EnableECGCommonRepeatControls(false);
                    RemainingTimeToRepeatECG2.Enabled = false;
                    txtTimeECGR2.Select();
                }
                #region OlderCode
                //if (OnScreeningHelper.IsECGESigned(studyId, _subjectKey.ToString()) && !OnScreeningHelper.IsECGRepeat1Signed(studyId, _subjectKey.ToString()))
                //{
                //    foreach (RadTextBox txtbox1 in ECGtextBoxes)
                //    {
                //        txtbox1.ReadOnly = true;
                //    }
                //    if (ECGtextBoxes.Any(tb => tb.Text == String.Empty) && ECGtextBoxesRepeat1.Any(x => x.Visible != true))
                //    {
                //        
                //       HelperFunctions.ShowMessageBox("All fields are required", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);

                //        foreach (RadTextBox txtbox in ECGtextBoxes)
                //        {
                //            if (txtbox.Text == string.Empty)
                //            {
                //                ValidationError.SetError(txtbox, "Field can not be empty");
                //            }
                //            else
                //            {
                //                ValidationError.Clear();
                //            }
                //        }
                //    }
                //    else
                //    {
                //        // if (ddlECGReason.SelectedIndex > -1 && ddlDoctor.SelectedIndex > -1)
                //        // {
                //        if (!_ecgRepeat.Equals("NoRepeat"))
                //        {
                //            moduleName = "Body Measurment - ECG";
                //            tabName = "E-Sign Body Measurment - ECG";
                //            reason = String.Format("The Reason is :" + "" + ddlECGReason1.SelectedItem.Text + "" + " Approval By :" + "" + txtECGPhysician1.Text);
                //            string actions = string.Format("Screening Body Measurment (ECG)-eSigned by :'" + App.EsignedUser.UserName + "'");
                //            if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
                //            {
                //                return;
                //            }
                //            GBECGR1.Visible = true;
                //            txtDateTimeNowECGR1.Text = DateTime.Now.ToString("MMM dd,yyyy");
                //            txtTimeECGR1.Focus();
                //            txtTimeECGR1.ReadOnly = false;
                //            ddlECGReason1.Enabled = false;
                //            txtECGPhysician1.Enabled = false;
                //            btnRepeatECG.Enabled = false;
                //            RepeatedValuesECG();
                //            EnableECGCommonRepeatControls(false);
                //            RemainingTimeToRepeatECG1.Enabled = false;
                //        }
                //        // }
                //        //else
                //        //{
                //        //    
                //        //   HelperFunctions.ShowMessageBox("Select Reason and Approval", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                //        //    
                //        //}
                //    }
                //}
                //else if (OnScreeningHelper.IsECGESigned(studyId, _subjectKey.ToString()) && OnScreeningHelper.IsECGRepeat1Signed(studyId, _subjectKey.ToString()) && !OnScreeningHelper.IsECGRepeat2Signed(studyId, _subjectKey.ToString()))
                //{
                //    foreach (RadTextBox txtbox1 in ECGtextBoxes)
                //    {
                //        // txtbox1.Enabled = false;
                //        txtbox1.ReadOnly = true;
                //    }
                //    foreach (RadTextBox txtbox1 in ECGtextBoxesRepeat1)
                //    {
                //        //txtbox1.Enabled = false;
                //        txtbox1.ReadOnly = true;
                //    }
                //    if (ECGtextBoxesRepeat1.Any(tb => tb.Text == String.Empty) && ECGtextBoxesRepeat2.Any(x => x.Visible != true))
                //    {
                //        
                //       HelperFunctions.ShowMessageBox("All fields are required", "Alert", MessageBoxButtons.OK, RadMessageIcon.Exclamation);

                //        foreach (RadTextBox txtbox in ECGtextBoxesRepeat1)
                //        {
                //            if (txtbox.Text == string.Empty)
                //            {
                //                ValidationError.SetError(txtbox, "Field can not be empty");
                //            }
                //            else
                //            {
                //                ValidationError.Clear();
                //            }
                //        }
                //    }
                //    else
                //    {
                //        // ************************ Check Repeat Required ****************
                //        if (_ecgRepeat.Equals("Repeat1"))
                //        {

                //            moduleName = "Body Measurment - ECG";
                //            tabName = "E-Sign Body Measurment - ECG";
                //            reason = String.Format("The Reason is :" + "" + ddlECGReason1.SelectedItem.Text + "" + " Approval By :" + "" + txtECGPhysician1.Text);
                //            string actions = string.Format("Screening Body Measurment (ECG)-eSigned by :'" + App.EsignedUser.UserName + "'");
                //            if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
                //            {
                //                return;
                //            }
                //            txtTimeECGR2.Focus();
                //            GBECGR2.Visible = true;
                //            txtDateTimeECGR2.Text = DateTime.Now.ToString("MMM dd,yyyy");
                //            ddlECGReason2.Enabled = false;
                //            txtECGPhysician1.Enabled = false;
                //            btnRepeatECG.Enabled = false;
                //            SecondRepeatValuesECG();
                //            EnableECGCommonRepeatControls(false);
                //            RemainingTimeToRepeatECG2.Enabled = false;
                //        }
                //    }
                //}
                #endregion
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        // ********************* Repeat By Email *****************

        private void ckECGPhysicalRepeat_CheckStateChanged(object sender, EventArgs e)
        {
            // CheckAllRepeatECGPhysical();
            FirstRepeatReasonAndInvetigator();
            SecondRepeatReasonAndInvetigator();
            ThirdRepeatReasonAndInvetigator();

        }

        private void ckECGEmailRepeat_CheckStateChanged(object sender, EventArgs e)
        {
            var item = ddPhysicianEmailInterpretation.Items.Where(i => i.Text.Equals("Repeat")).FirstOrDefault();
            if (item == null)
                return;
            if (ckECGEmailRepeat.Checked)
                item.Enabled = true;
            else
            {
                ddPhysicianEmailInterpretation.SelectedIndex = -1;
                item.Enabled = false;
            }

            //int isECGRepeatReq = 0;
            //if (ckECGEmailRepeat.Checked)
            //{
            //    isECGRepeatReq = 1;
            //    using (DbConnection dbCon = new DbConnection())
            //    {
            //        dbCon.OpenConnection();
            //        string updateQuery = string.Empty;
            //        string selectQuery = "select * from ScreeningECG where SubjectKey='" + ValueOfKey + "' and StudyID='" + studyId + "'";

            //        DataTable dt = dbCon.ExecuteSelectQuery(selectQuery, new SqlParameter[] { }, false);
            //        if (dt.Rows.Count > 0)
            //        {
            //            if (!string.IsNullOrEmpty(dt.Rows[0]["EmailApprovedBy1"].ToString()))
            //            {
            //                updateQuery = "Update ScreeningECG set IsRepeatRequired="
            //                    + isECGRepeatReq + " where StudyID='"
            //                    + dt.Rows[0]["StudyID"].ToString() + "' and SubjectKey='"
            //                    + dt.Rows[0]["SubjectKey"].ToString() + "'";
            //            }
            //        }
            //    }
            //}
            //else
            //{
            //    ResetIsRepeatRequired();
            //}

            //if (CheckRepeatRequired() == false)
            //{
            //    gbECGPhysicalApproval.Enabled = false;
            //    CheckAllRepeatECGEmail();

            //}

            //FirstRepeatReasonAndInvetigator();
            // SecondRepeatReasonAndInvetigator();
            //ThirdRepeatReasonAndInvetigator();

        }
        private void SaveECGPhysicianEmailApproval()
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if (!ckECGEmailRepeat.Checked)
                //{
                //    HelperFunctions.ShowMessageBox("Please check granted by check box.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                //    ckECGEmailRepeat.Focus();
                //    return;
                //}
                if (string.IsNullOrEmpty(txtECGRepeatGrantedBy.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter Granted By name.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtECGRepeatGrantedBy.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(ddPhysicianEmailInterpretation.Text.Trim()) || ddPhysicianEmailInterpretation.SelectedIndex < 0)
                {
                    HelperFunctions.ShowMessageBox("Please select interpretation of ECG.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    ddPhysicianEmailInterpretation.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(FilePathOfEmailedECG))
                {
                    HelperFunctions.ShowMessageBox("Please attach email.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    btnECGAttachEmail.Focus();
                    return;
                }
                string _physicianEmailComment = string.Empty;
                using (frmCommentDialogBox commentBox = new frmCommentDialogBox())
                {
                    if (commentBox.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    _physicianEmailComment = commentBox.txtComment.Text.Trim();
                }

                bool IsFirstECGReviewedByPhysician = OnScreeningHelper.IsFirstECGReviewedByPhysician(studyId, ValueOfKey);
                bool IsSecondECGReviewedByPhysician = OnScreeningHelper.IsSecondECGReviewedByPhysician(studyId, ValueOfKey);
                bool IsThirdECGReviewedByPhysician = OnScreeningHelper.IsThirdECGReviewedByPhysician(studyId, ValueOfKey);

                DateTime dateNow = DateTime.Now;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string _updateQuery = string.Empty;
                bool _repeatRequired = ckECGEmailRepeat.Checked;
                if (!IsFirstECGReviewedByPhysician)
                {
                    _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",RepeatGrantedEmailBy1=@RepeatGrantedEmailBy, EsignedEmail1By=@EsignedEmailBy,EsignedEmail1Date=@EsignedEmailDate,EmailEsignedByComment1=@EmailEsignedByComment,PhysicianEmailInterpretation1=@PhysicianEmailInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                }
                else if (IsFirstECGReviewedByPhysician && !IsSecondECGReviewedByPhysician)
                {
                    _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",RepeatGrantedEmailBy2=@RepeatGrantedEmailBy,EsigneEmail2By =@EsignedEmailBy,EsignedEmail2Date=@EsignedEmailDate,EmailEsignedByComment2=@EmailEsignedByComment,PhysicianEmailInterpretation2=@PhysicianEmailInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                }
                else if (IsFirstECGReviewedByPhysician && IsSecondECGReviewedByPhysician && !IsThirdECGReviewedByPhysician)
                {
                    _updateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET IsRepeatRequired=" + Convert.ToInt16(_repeatRequired) + ",RepeatGrantedEmailBy3=@RepeatGrantedEmailBy,EsignedEmail3By =@EsignedEmailBy,EsignedEmail3Date=@EsignedEmailDate,EmailEsignedByComment3=@EmailEsignedByComment,PhysicianEmailInterpretation3=@PhysicianEmailInterpretation WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                }
                if (!string.IsNullOrEmpty(_updateQuery))
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string exist = string.Format(@"SELECT 1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                        DataTable _dtExist = db.ExecuteSelectQuery(exist, null, false);
                        if (_dtExist.Rows.Count == 0)
                        {
                            HelperFunctions.ShowMessageBox("ECG has not done yet.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                            return;
                        }
                        tabName = "ECG";
                        string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                        if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                        {
                            return;
                        }
                        SqlParameter sp1 = new SqlParameter("@studyid", studyId);
                        SqlParameter sp2 = new SqlParameter("@subjectkey", _subjectKey);
                        SqlParameter sp3 = new SqlParameter("@EsignedEmailBy", App.EsignedUser.UserName);
                        SqlParameter sp4 = new SqlParameter("@EsignedEmailDate", DateTime.Now);
                        SqlParameter sp5 = new SqlParameter("@EmailEsignedByComment", _physicianEmailComment);
                        SqlParameter sp6 = new SqlParameter("@RepeatGrantedEmailBy", txtECGRepeatGrantedBy.Text.Trim());
                        SqlParameter sp7 = new SqlParameter("@PhysicianEmailInterpretation", ddPhysicianEmailInterpretation.Text.Trim());

                        FileStream fStream = System.IO.File.OpenRead(FilePathOfEmailedECG);
                        byte[] contents = new byte[fStream.Length];
                        fStream.Read(contents, 0, (int)fStream.Length);
                        fStream.Close();
                        SqlParameter sp8 = new SqlParameter("@AttachedEmail", contents);
                        SqlParameter sp9 = new SqlParameter("@EmailApprovedBy", App.EsignedUser.UserName);
                        SqlParameter[] _params = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9 };
                        db.ExecuteUpdateQuery(_updateQuery, _params, false);
                        FilePathOfEmailedECG = string.Empty;
                        HelperFunctions.ShowMessageBox("ECG email approval has been esigned successfully.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                        LoadDataBySelectedTab();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void CheckEmailAttached()
        {
            DateTime dateNow = DateTime.Now;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            bool email1eAttached = OnScreeningHelper.IsECGEmailAttached(studyId, ValueOfKey);

            if (email1eAttached)
            {

                try
                {
                    if (!string.IsNullOrEmpty(txtECGRepeatGrantedBy.Text))
                    {
                        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                        {
                            connection.Open();
                            if (OpenFile.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                            {
                                string exist = string.Format(@"SELECT Count(*) FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                                SqlCommand exists = new SqlCommand(exist, connection);
                                int found = (int)exists.ExecuteScalar();
                                if (found > 0)
                                {
                                    FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                                    byte[] contents = new byte[fStream.Length];
                                    fStream.Read(contents, 0, (int)fStream.Length);
                                    fStream.Close();
                                    string query = string.Format(@"UPDATE [dbo].[ScreeningECG] SET AttachedEmail2=@AttachedEmail2,EmailApprovedBy2=@EmailApprovedBy2 WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                                    SqlCommand cmd = new SqlCommand(query, connection);
                                    cmd.Parameters.AddWithValue("@studyid", studyId);
                                    cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                                    cmd.Parameters.AddWithValue("@AttachedEmail2", contents);
                                    cmd.Parameters.AddWithValue("@EmailApprovedBy2", dateNow);
                                    cmd.ExecuteNonQuery();
                                }
                                else
                                {
                                    FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                                    byte[] contents = new byte[fStream.Length];
                                    fStream.Read(contents, 0, (int)fStream.Length);
                                    fStream.Close();
                                    string query = string.Format(@"INSERT INTO [dbo].[ScreeningECG] (StudyID,SubjectKey,AttachedEmail2,EmailApprovedBy2) VALUES(@studyid,@subjectkey,@AttachedEmail2,@EmailApprovedBy2)");
                                    SqlCommand cmd = new SqlCommand(query, connection);
                                    cmd.Parameters.AddWithValue("@studyid", studyId);
                                    cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                                    cmd.Parameters.AddWithValue("@AttachedEmail2", contents);
                                    cmd.Parameters.AddWithValue("@EmailApprovedBy2", dateNow);
                                    cmd.ExecuteNonQuery();
                                }
                                HelperFunctions.ShowMessageBox("Email has been attached as PDF Document Successfully!", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                            }

                        }
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Please enter physician name.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    }

                }
                catch (SqlException ex)

                {

                    HelperFunctions.ShowMessageBox(ex.Message, "Attached Email(2)", MessageBoxButtons.OK, RadMessageIcon.Error);
                }


            }
            else
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtECGRepeatGrantedBy.Text))
                    {
                        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                        {
                            connection.Open();
                            if (OpenFile.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                            {
                                string exist = string.Format(@"SELECT Count(*) FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'  ");
                                SqlCommand exists = new SqlCommand(exist, connection);
                                int found = (int)exists.ExecuteScalar();
                                if (found > 0)
                                {
                                    FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                                    byte[] contents = new byte[fStream.Length];
                                    fStream.Read(contents, 0, (int)fStream.Length);
                                    fStream.Close();
                                    string query = string.Format(@"UPDATE [dbo].[ScreeningECG] SET AttachedEmail1=@AttachedEmail1,EmailApprovedBy1=@EmailApprovedBy1 WHERE StudyID=@studyid AND SubjectKey=@subjectkey");
                                    SqlCommand cmd = new SqlCommand(query, connection);
                                    cmd.Parameters.AddWithValue("@studyid", studyId);
                                    cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                                    cmd.Parameters.AddWithValue("@AttachedEmail1", contents);
                                    cmd.Parameters.AddWithValue("@EmailApprovedBy1", dateNow);
                                    cmd.ExecuteNonQuery();
                                }
                                else
                                {
                                    FileStream fStream = System.IO.File.OpenRead(OpenFile.FileName);
                                    byte[] contents = new byte[fStream.Length];
                                    fStream.Read(contents, 0, (int)fStream.Length);
                                    fStream.Close();
                                    string query = string.Format(@"INSERT INTO [dbo].[ScreeningECG] (StudyID,SubjectKey,AttachedEmail1,EmailApprovedBy1) VALUES(@studyid,@subjectkey,@AttachedEmail1,@EmailApprovedBy1)");
                                    SqlCommand cmd = new SqlCommand(query, connection);
                                    cmd.Parameters.AddWithValue("@studyid", studyId);
                                    cmd.Parameters.AddWithValue("@subjectkey", _subjectKey);
                                    cmd.Parameters.AddWithValue("@AttachedEmail1", contents);
                                    cmd.Parameters.AddWithValue("@EmailApprovedBy1", dateNow);
                                    cmd.ExecuteNonQuery();
                                }
                                HelperFunctions.ShowMessageBox("Email has been attached as PDF Document Successfully!", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                            }

                        }
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Please enter physician name.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }

                }
                catch (SqlException ex)
                {
                    HelperFunctions.ShowMessageBox(ex.Message, "Attached Email(1)", MessageBoxButtons.OK, RadMessageIcon.Error);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnECGAttachEmail_Click(object sender, EventArgs e)
        {
            //CheckEmailAttached();
            OpenFile.Filter = "Pdf Files|*.pdf";
            if (OpenFile.ShowDialog().Equals(DialogResult.OK))
            {
                FilePathOfEmailedECG = OpenFile.FileName;
            }
        }
        private void btnEmailSign_Click(object sender, EventArgs e)
        {
            SaveECGPhysicianEmailApproval();
            //  CheckECGRepeatAndEnableRepeat();
        }
        /// <summary>
        /// View Attached Email
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewEmail_Click(object sender, EventArgs e)
        {
            bool EmailAttached = OnScreeningHelper.IsECGEmailAttachedSecond(studyId, ValueOfKey);
            string _ecgField = string.Empty;
            if (EmailAttached)
                _ecgField = "AttachedEmail2";
            else
                _ecgField = "AttachedEmail1";
            LoadECGFile(_ecgField);
            //_subjectKey = Convert.ToInt32(SubjectKey.Text);
            //bool EmailAttached = OnScreeningHelper.IsECGEmailAttachedSecond(studyId, ValueOfKey);
            //if (EmailAttached)
            //{
            //    ViewECGEmail2 viewECGEmail2 = new ViewECGEmail2();
            //    viewECGEmail2._subjectKey = Convert.ToString(_subjectKey);
            //    viewECGEmail2._studyId = Convert.ToString(studyId);
            //    viewECGEmail2.ShowDialog();
            //}
            //else
            //{
            //    ViewECGEmail1 viewECGEmail1 = new ViewECGEmail1();
            //    viewECGEmail1._subjectKey = Convert.ToString(_subjectKey);
            //    viewECGEmail1._studyId = Convert.ToString(studyId);
            //    viewECGEmail1.ShowDialog();
            //}
        }
        // ********************************************** ***************
        /// <summary>
        /// Clear Validation Error if all text boxes are filled for
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GBECGNoRepeat_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            foreach (Control ctrl in GBECGNoRepeat.Controls)
            {
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtbox = (RadTextBox)ctrl;
                    if (!decimal.TryParse(txtbox.Text, out parsedValue))
                    {
                        txtbox.Text = "";
                        ValidationError.SetError(txtbox, "Field can not be empty");
                    }
                    else
                    {
                        if (txtbox.Text != string.Empty)
                        {
                            ValidationError.Clear();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Clear Validation Error if all text boxes are filled for Repeat(1)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GBECGR1_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            var ECGtextBoxesRepeat1 = new RadTextBox[] { txtHR1, txtPRR1, txtQRSR1, txtQTR1, txtQTCBR1 };
            if (ECGtextBoxesRepeat1.Any(tb => tb.Text == String.Empty))
            {
                foreach (RadTextBox txtbox1 in ECGtextBoxesRepeat1)
                {
                    if (!decimal.TryParse(txtbox1.Text, out parsedValue))
                    {
                        txtbox1.Text = "";
                    }
                    if (txtbox1.Text == string.Empty)
                    {
                        ValidateErrorRepeat1.SetError(txtbox1, "Field can not be empty");
                    }
                    else
                    {
                        ValidateErrorRepeat1.Clear();
                    }
                }
            }
            else
            {
                ValidateErrorRepeat1.Clear();
            }
        }

        /// <summary>
        /// Clear Validation Error if all text boxes are filled for Repeat(2)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private void GBECGR2_TextChanged(object sender, EventArgs e)
        {
            decimal parsedValue;
            var ECGtextBoxesRepeat2 = new RadTextBox[] { txtHR2, txtPRR2, txtQRSR2, txtQTR2, txtQTCBR2 };
            if (ECGtextBoxesRepeat2.Any(tb => tb.Text == String.Empty))
            {
                foreach (RadTextBox txtbox2 in ECGtextBoxesRepeat2)
                {
                    if (!decimal.TryParse(txtbox2.Text, out parsedValue))
                    {
                        txtbox2.Text = "";
                    }
                    if (txtbox2.Text == string.Empty)
                    {
                        ValidateErrorRepeat2.SetError(txtbox2, "Field can not be empty");
                    }
                    else
                    {
                        ValidateErrorRepeat2.Clear();
                    }
                }
            }
            else
            {
                ValidateErrorRepeat2.Clear();
            }
        }

        private void Enable_Load_Unload()
        {
            if (txtHeartRate.Text != string.Empty && txtPRInterval.Text != string.Empty && txtGenders.Text != string.Empty && txtQTcB.Text != string.Empty)
            {
                if ((Convert.ToInt32(txtHeartRate.Text) >= 50 && Convert.ToInt32(txtHeartRate.Text) <= 100) && (Convert.ToInt32(txtPRInterval.Text) >= 120 && Convert.ToInt32(txtPRInterval.Text) <= 200) && ((txtGenders.Text == "Male" && Convert.ToInt32(txtQTcB.Text) <= 450) || (txtGenders.Text == "Female" && Convert.ToInt32(txtQTcB.Text) <= 470)))
                {
                    foreach (Control ctrl in GBECGALL.Controls)
                    {
                        if (ctrl.Name == "GBECGNoRepeat")
                        {
                            foreach (Control c in GBECGNoRepeat.Controls)
                            {
                                if (ctrl.Name == " btnLoadECG")
                                {
                                    ctrl.Enabled = true;
                                }
                                if (ctrl.Name == " btnViewECG")
                                {
                                    ctrl.Enabled = true;
                                }
                            }

                        }

                        if (ctrl.Name == "GBECGR1")
                        {
                            foreach (Control c in GBECGR1.Controls)
                            {
                                if (c.Name == " btnLoadECGR1")
                                {
                                    c.Enabled = true;
                                }
                                if (c.Name == " btnViewECGR1")
                                {
                                    c.Enabled = true;
                                }

                            }
                        }
                        if (ctrl.Name == "GBECGR2")
                        {
                            foreach (Control c in GBECGR2.Controls)
                            {
                                if (ctrl.Name == " btnLoadECGR2")
                                {
                                    ctrl.Enabled = true;
                                }
                                if (ctrl.Name == " btnViewECGR2")
                                {
                                    ctrl.Enabled = true;
                                }
                            }
                        }
                    }
                    //  btnLoadECG.Enabled = true;
                    //btnViewECG.Enabled = true;
                    //btnLoadECGR1.Enabled = true;
                    //btnViewECGR1.Enabled = true;
                    //btnLoadECGR2.Enabled = true;
                    //btnViewECGR2.Enabled = true;
                }
                else
                {

                    // btnLoadECG.Enabled = false;
                    //btnViewECG.Enabled = false;
                    //btnLoadECGR1.Enabled = false;
                    //btnViewECGR1.Enabled = false;
                    //btnLoadECGR2.Enabled = false;
                    //btnViewECGR2.Enabled = false;
                    foreach (Control ctrl in GBECGALL.Controls)
                    {
                        if (ctrl.Name == "GBECGNoRepeat")
                        {
                            foreach (Control c in GBECGNoRepeat.Controls)
                            {
                                if (ctrl.Name == " btnLoadECG")
                                {
                                    ctrl.Enabled = false;
                                }
                                if (ctrl.Name == " btnViewECG")
                                {
                                    ctrl.Enabled = false;
                                }
                            }

                        }

                        if (ctrl.Name == "GBECGR1")
                        {
                            foreach (Control c in GBECGR1.Controls)
                            {
                                if (c.Name == " btnLoadECGR1")
                                {
                                    c.Enabled = false;
                                }
                                if (c.Name == " btnViewECGR1")
                                {
                                    c.Enabled = false;
                                }

                            }
                        }
                        if (ctrl.Name == "GBECGR2")
                        {
                            foreach (Control c in GBECGR2.Controls)
                            {
                                if (ctrl.Name == " btnLoadECGR2")
                                {
                                    ctrl.Enabled = false;
                                }
                                if (ctrl.Name == " btnViewECGR2")
                                {
                                    ctrl.Enabled = false;
                                }
                            }
                        }
                    }
                }
            }

        }

        /// <summary>
        /// Subject Failed ECG
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedECG_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                string _comment = string.Empty;
                using (frmCommentDialogBox commentBox = new frmCommentDialogBox())
                {
                    if (commentBox.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    _comment = commentBox.txtComment.Text.Trim();
                }
                tabName = "ECG";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                else
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningECG] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG] SET SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,ActionBy=@ActionBy,ActionDate=@ActionDate WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", _comment));
                            _params.Add(new SqlParameter("@ActionBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@ActionDate", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningECG]
                               (StudyID,SubjectKey,SubjectStatus,Comments,ActionBy,ActionDate) VALUES
                                (@studyid,@subjectkey,@SubjectStatus,@CordinatorComment,@ActionBy,@ActionDate)");
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyid", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", _comment));
                            _params.Add(new SqlParameter("@ActionBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@ActionDate", DateTime.Now));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }

                        // .... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningECG", pgvECGG.Name, "ECGFail", SubjectStatusCode.Status.Fail, _comment, App.EsignedUser.UserName);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningECG", SubjectStatusCode.Status.Fail, _comment);
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void txtHeartRate_TextChanged(object sender, EventArgs e)
        {
            LoadRRInterval(txtHeartRate, txtRRInterval);
            LoadQTCF(txtHeartRate, txtQT, txtQTcF);
        }
        private void LoadRRInterval(RadTextBox txtHR, RadTextBox txtRR)
        {
            txtRR.Clear();
            if (string.IsNullOrEmpty(txtHR.Text.Trim()))
                return;
            double _HR = default(double);
            if (double.TryParse(txtHR.Text.Trim(), out _HR))
            {
                txtRR.Text = CommonHelpers.RRInterval(_HR, "MS").ToString();
            }
        }

        private void txtQT_TextChanged(object sender, EventArgs e)
        {
            LoadQTCF(txtHeartRate, txtQT, txtQTcF);
        }
        private void LoadQTCF(RadTextBox txtHR, RadTextBox txtQT, RadTextBox txtQTcF)
        {
            if (!OnScreeningHelper.IsQTCFRequired(studyId))
                return;
            txtQTcF.Clear();
            if (string.IsNullOrEmpty(txtHR.Text.Trim()) && string.IsNullOrEmpty(txtQT.Text.Trim()))
                return;
            double _HR = default(double);
            double _QT = default(double);
            if (double.TryParse(txtHR.Text.Trim(), out _HR) && double.TryParse(txtQT.Text.Trim(), out _QT))
            {
                txtQTcF.Text = CommonHelpers.QTcF(_QT, _HR).ToString();
            }
        }

        private void txtHR1_TextChanged(object sender, EventArgs e)
        {
            LoadRRInterval(txtHR1, txtRRR1);
            LoadQTCF(txtHR1, txtQTR1, txtQTcFR1);
        }

        private void txtQTR1_TextChanged(object sender, EventArgs e)
        {
            LoadQTCF(txtHR1, txtQTR1, txtQTcFR1);
        }

        private void txtQTR2_TextChanged(object sender, EventArgs e)
        {
            LoadQTCF(txtHR2, txtQTR2, txtQTcFR2);
        }

        private void txtHR2_TextChanged(object sender, EventArgs e)
        {
            LoadRRInterval(txtHR2, txtRRR2);
            LoadQTCF(txtHR2, txtQTR2, txtQTcFR2);
        }

        private void txtTimeECGNoR_Leave(object sender, EventArgs e)
        {
            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeECGNoR.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeECGNoR.Focus();
            //}
        }

        private void txtTimeECGR1_Leave(object sender, EventArgs e)
        {
            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeECGR1.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeECGR1.Focus();
            //}
        }

        private void txtTimeECGR2_Leave(object sender, EventArgs e)
        {
            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeECGR2.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeECGR2.Focus();
            //}
        }

        private void txtTimeNoRepeat_Leave(object sender, EventArgs e)
        {
            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeNoRepeat.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeNoRepeat.Focus();
            //}
        }

        private void txtTimeR1_Leave(object sender, EventArgs e)
        {

            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeR1.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeR1.Focus();
            //}
        }

        private void txtTimeR2_Leave(object sender, EventArgs e)
        {
            //DateTime _time = new DateTime();
            //if (!CommonHelpers.IsTimeFormatValid(txtTimeR2.Text.Trim(), out _time))
            //{
            //    HelperFunctions.ShowMessageBox("Please enter correct time format.", "ECG", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //    txtTimeR2.Focus();
            //}
        }
        private void txtRRInterval_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtRRR1_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        private void txtRRR2_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar);
        }

        /// <summary>
        /// Subject Dropped / Failed ECG
        /// </summary>
        /// <param name="subjectkey"></param>
        private void SubjectDroppedFailedECG(string subjectkey)
        {
            bool subjectDropped = DroppedHelper.IsSubjectDroppedECG(studyId, subjectkey);
            bool subjectFailed = FailedHelper.IsSubjectFailedECG(studyId, subjectkey);
            // ======================== Dropped==============================
            if (subjectDropped == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {


                    if (ctrl.Name == "pgvECG")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        ctrl.Enabled = true;

                        pgvInfluenza.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Dropped;
                        pgvVitals.Image = null;
                        pgvECGG.Image = Dropped;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropECG();

                        foreach (Control c in pgvECGG.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        // pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvECGG;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }

                }
            }

            // ======================== Failed==============================
            else if (subjectFailed == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {


                    if (ctrl.Name == "pgvECG")
                    {

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Failed;
                        pgvVitals.Image = null;
                        pgvECGG.Image = Failed;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropECG();

                        foreach (Control c in pgvECGG.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        // pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvECGG;
                    }
                    else
                    {

                        ctrl.Enabled = false;

                    }

                }
            }
            else
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {

                    ctrl.Enabled = true;

                }
                //foreach (Control ctrl in pgvMeasurement.Controls)
                //{

                //    ctrl.Enabled = true;

                //}
                lblSubjectStatus.ForeColor = System.Drawing.Color.Black;
                lblSubjectStatus.Text = "None";
                ddlDocumentTypeInf.Enabled = true;
            }
        }
        #endregion ....................................... ECG ........................

        //****************************** Safety Labs ******************************
        #region Safety Labs
        private void pgvSafetyLabTests_SelectedPageChanged(object sender, EventArgs e)
        {
            if (!IsStudyIDSelected() || string.IsNullOrEmpty(txtSubjectIDs.Text.Trim()))
                return;
            pgvOnScreeningPages_SelectedPageChanged(null, null);
        }
        //================================Blood==========================
        #region ========================== Blood Sample==========================
        //============================= Drop==============================
        private void DisableAllControlsAfterSubjectDropBlood()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvECG")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvSafetyLabTests.Controls)
            {
                if (c.Name == "  pgvLabBlood")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }
        /// <summary>
        ///  Check if Dropped
        /// </summary>
        /// <param name="subjectkey"></param>
        private void CheckDroppedBlood(string subjectkey)
        {
            bool subjectDroppedBlood = DroppedHelper.IsSubjectDroppedBlood(studyId, subjectkey);
            bool subjectFailedBlood = FailedHelper.IsSubjectFailedBlood(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedBlood == true)
            {
                // foreach (Control ctrl in pgvOnScreeningPages.Controls)
                //  {
                //  if (ctrl.Name == "pgvECG")
                //  {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        //pgvECG.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvSCSafetyLabs.Image = Dropped;
                        //  pgvECG.Image = Dropped;
                        pgvLabBlood.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        pgvLabUrine.Image = Locked;
                        foreach (Control c in pgvLabBlood.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvSafetyLabTests.Controls)
                        {
                            if (c.Name == "pgvLabBlood")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
                // }



                // }
            }
            //======================== END Drop=======================
            //======================== Failed================================

            if (subjectFailedBlood == true)
            {
                // foreach (Control ctrl in pgvOnScreeningPages.Controls)
                // {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        // if (ctrl.Name == "pgvECG")
                        // {

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        //pgvECG.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvSCSafetyLabs.Image = Failed;
                        //   pgvECG.Image = Failed;
                        pgvLabBlood.Image = Failed;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        pgvLabUrine.Image = Locked;
                        foreach (Control c in pgvLabBlood.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvSafetyLabTests.Controls)
                        {
                            if (c.Name == "pgvLabBlood")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
        }
        /// <summary>
        /// Subject Dropped / Failed Blood
        /// </summary>
        /// <param name="subjectkey"></param>
        private void SubjectDroppedFailedBlood(string subjectkey)
        {
            bool subjectDropped = DroppedHelper.IsSubjectDroppedBlood(studyId, subjectkey);
            bool subjectFailed = FailedHelper.IsSubjectFailedBlood(studyId, subjectkey);
            // ======================== Dropped==============================
            if (subjectDropped == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Dropped;
                        pgvLabBlood.Image = Dropped;
                        pgvSCSafetyLabs.Image = Dropped;
                        pgvLabUrine.Image = null;
                        pgvVitals.Image = null;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        pgvLabUrine.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropBlood();

                        foreach (Control c in pgvLabBlood.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        // pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvSCSafetyLabs;
                        pgvSafetyLabTests.SelectedPage = pgvLabBlood;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }

            // ======================== Failed==============================
            else if (subjectFailed == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Failed";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Failed;
                        pgvLabBlood.Image = Failed;
                        pgvSCSafetyLabs.Image = Failed;
                        pgvLabUrine.Image = null;
                        pgvVitals.Image = null;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        pgvLabUrine.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropBlood();

                        foreach (Control c in pgvLabBlood.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        //   pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvSCSafetyLabs;
                        pgvSafetyLabTests.SelectedPage = pgvLabBlood;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }
            else
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {

                    ctrl.Enabled = true;

                }
                //foreach (Control ctrl in pgvMeasurement.Controls)
                //{

                //    ctrl.Enabled = true;

                //}
                lblSubjectStatus.ForeColor = System.Drawing.Color.Black;
                lblSubjectStatus.Text = "None";
                ddlDocumentTypeInf.Enabled = true;
            }
        }
        //.....
        private void txtBloodSubjectScanID_TextChanged(object sender, EventArgs e)
        {
            BloodSampleTimer.Interval = (700);
            BloodSampleTimer.Enabled = true;
            BloodSampleTimer.Start();
        }

        /// <summary>
        /// reads subject key from barcode and sets subject key and study which triggers other functions and events to load data
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BloodSampleTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                BloodSampleTimer.Stop();
                if (string.IsNullOrEmpty(txtBloodSubjectScanID.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtBloodSubjectScanID.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", pgvSafetyLabTests.SelectedPage.Text, MessageBoxButtons.OK, RadMessageIcon.Info);
                }
                if (pgvSafetyLabTests.SelectedPage.Equals(pgvLabUrine))
                    UrineCollectedTime.Value = DateTime.Now;
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, pgvSafetyLabTests.SelectedPage.Text, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtBloodSubjectScanID.ResetText();
            }
        }
        /// <summary>
        /// toggle , if screening repeat (Yes,No)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbScreening_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbScreening.Checked)
            {
                cbScreening.Checked = true;
                cbScreeningRepeat.Checked = false;
            }
        }
        /// <summary>
        /// toggle , if screening repeat (Yes,No)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbScreeningRepeat_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbScreeningRepeat.Checked)
            {
                cbScreening.Checked = false;
                cbScreeningRepeat.Checked = true;
            }
        }
        /// <summary>
        /// toggle , if Fasting is required (Yes,No)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesFastRequired_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbYesFastRequired.Checked)
            {
                cbNoFastRequired.Checked = false;
                gbFastingScreeningDateTime.Enabled = true;
            }
            else
            {
                cbNoFastRequired.Checked = true;
            }
        }

        /// <summary>
        /// eSign Clinet information
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSCBloodEsign_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            bool FastingRequired = default(bool);
            if (cbYesFastRequired.Checked)
            {
                FastingRequired = true;
                if (string.IsNullOrEmpty(dtpFastingStartDate.Text.Trim()) || dtpFastingStartDate.Text.Length == 0)
                {
                    HelperFunctions.ShowMessageBox("Please select fasting start date.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    dtpFastingStartDate.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(txtSCBloodFastingStartTime.Text.Trim()) || txtSCBloodFastingStartTime.Text.Trim().Equals("__:__"))
                {
                    HelperFunctions.ShowMessageBox("Please enter fasting start time.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtSCBloodFastingStartTime.Focus();
                    return;
                }
                DateTime _fastTime = default(DateTime);
                if (!CommonHelpers.IsTimeFormatValid(txtSCBloodFastingStartTime.Text.Trim(), out _fastTime))
                {
                    HelperFunctions.ShowMessageBox("Please enter correct format of fasting start time.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtSCBloodFastingStartTime.Focus();
                    return;
                }
                if (!IsTimeValid(dtpFastingStartDate.Text.Trim() + " " + txtSCBloodFastingStartTime.Text.Trim(), false))
                {
                    txtSCBloodFastingStartTime.Focus();
                    return;
                }
            }
            else if (cbNoFastRequired.Checked)
            {
                FastingRequired = false;
            }
            if (string.IsNullOrEmpty(txtSCBloodCollectionTime.Text.Trim()) || txtSCBloodCollectionTime.Text.Trim().Equals("__:__"))
            {
                HelperFunctions.ShowMessageBox("Please enter collection time.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtSCBloodCollectionTime.Focus();
                return;
            }
            DateTime _collectionTime = default(DateTime);
            if (!CommonHelpers.IsTimeFormatValid(txtSCBloodCollectionTime.Text.Trim(), out _collectionTime))
            {
                HelperFunctions.ShowMessageBox("Please enter correct format of collection time.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                txtSCBloodCollectionTime.Focus();
                return;
            }
            if (string.IsNullOrEmpty(dtSCBloodCollectionDate.Text.Trim()) || dtSCBloodCollectionDate.Text.Length == 0)
            {
                HelperFunctions.ShowMessageBox("Please select collection date.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                dtSCBloodCollectionDate.Focus();
                return;
            }
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            string StartBloodDate = string.Empty;
            string FastingStartDate = string.Empty;
            bool ScreeningRepeat = default(bool);

            string ClinetHoursMinuts = txtSCBloodCollectionTime.Text.Trim();
            string FastingStartTime = txtSCBloodFastingStartTime.Text.Trim();

            // Start blood Date
            if (dtSCBloodCollectionDate.Text.Length > 0)
            {
                StartBloodDate = dtSCBloodCollectionDate.Value.ToString();
            }
            else
            {
                StartBloodDate = "";
            }
            // Start fasting Date
            if (dtpFastingStartDate.Text.Length > 0)
            {
                FastingStartDate = dtpFastingStartDate.Value.ToString();
            }
            else
            {
                FastingStartDate = "";
            }
            if (!IsTimeValid(dtSCBloodCollectionDate.Text.Trim() + " " + txtSCBloodCollectionTime.Text.Trim()))
            {
                txtSCBloodCollectionTime.Focus();
                return;
            }
            //// Screening / Screening Repeat
            //if (cbScreening.Checked)
            //{
            //    ScreeningRepeat = true;
            //}
            //else if (cbScreeningRepeat.Checked)
            //{
            //    ScreeningRepeat = false;
            //}
            ScreeningRepeat = false;
            try
            {
                string tabName = "Safety Lab-Blood Collection";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningBloodSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                    DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                    db.BeginTransaction();
                    if (_dtExist.Rows.Count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningBloodSample] SET Screening='" + ScreeningRepeat + "',FastingRequired='" + FastingRequired + "',FastingStartTime='" + FastingStartTime + "',FastingStartDate='" + FastingStartDate + "',StartDate='" + StartBloodDate + "',StartTime='" + ClinetHoursMinuts + "',SampleBy='" + App.EsignedUser.UserName + "',SampleAt='" + DateTime.Now + "' where StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                    }
                    else
                    {
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningBloodSample]
                                 (StudyID,SubjectKey,Visit,Screening,FastingRequired,FastingStartTime,FastingStartDate,StartDate,StartTime,SampleBy,SampleAt) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + ",'" + Convert.ToInt32(ScreeningRepeat) + "','" + Convert.ToInt32(FastingRequired) + "','" + FastingStartTime + "','" + FastingStartDate + "','" + StartBloodDate + "','" + ClinetHoursMinuts + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "')");
                        db.ExecuteInsertQuery(InsertQuery, null, false);
                    }
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningBloodSample", pgvLabBlood.Name, "BloodSampleProceed", SubjectStatusCode.Status.Proceed, txtBloodCordinatorComment.Text, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "", SubjectStatusCode.Status.Fail, txtBloodCordinatorComment.Text.Trim());
                    db.CommitTransaction();
                    db.CloseConnection();
                    LoadDataBySelectedTab();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Blood", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        /// <summary>
        /// eSign Blood Sample
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnBloodSample_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                if (!OnScreeningHelper.IsBloodSigned(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Please sign blood collection record first.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (string.IsNullOrEmpty(txtRequesitionNumber.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter requisition number.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtRequesitionNumber.Select();
                    return;
                }
                string tabName = "Safety Lab-Blood Collection";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningBloodSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                    string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningBloodSample]
                                 (StudyID,SubjectKey,Visit,SubjectStatus,Comments,eSignedBy,eSignedAt,RequesitionNumber,CollectedBy,CollectedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + ",'" + (int)SubjectStatusCode.Status.Proceed + "','" + txtBloodCordinatorComment.Text.Trim() + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "','" + txtRequesitionNumber.Text + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "')");

                    SqlCommand command = new SqlCommand(InsertQuery, connection);
                    SqlCommand cmd = new SqlCommand(checkExist, connection);
                    int count = (int)cmd.ExecuteScalar();
                    if (count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningBloodSample] SET SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',Comments='" + txtBloodCordinatorComment.Text + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedAt='" + DateTime.Now + "', RequesitionNumber='" + txtRequesitionNumber.Text + "', CollectedBy='" + App.EsignedUser.UserName + "',CollectedDate='" + DateTime.Now + "' where StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                        SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
                        cmdUpdate.ExecuteNonQuery();
                    }
                    else
                    {
                        command.ExecuteNonQuery();
                    }
                    connection.Close();
                    //.... Subject Status..........................
                    using (DbConnection con = new DbConnection())
                    {
                        con.OpenConnection();
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(con, studyId, _subjectKey, "OnScreeningBloodSample", SubjectStatusCode.Status.Proceed, txtBloodCordinatorComment.Text.Trim());
                        con.CloseConnection();
                    }
                    HelperFunctions.ShowMessageBox("Requisition number saved successfully.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Blood", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Get Blood from on Screening Study Design form based on study ID
        /// </summary>
        /// 
        private void GetBloodSample(string subjectKey)
        {
            int ScreeningRepeat = default(int);
            int FastingRequired = default(int);
            string eSignedBy = string.Empty;
            string SampleBy = string.Empty;
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningBloodSample] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "'");
                        SqlCommand cmd = new SqlCommand(query, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {

                            //.... Screening Repeat
                            if (dr["Screening"] != DBNull.Value)
                            {
                                ScreeningRepeat = Convert.ToInt32(dr["Screening"]);
                                if (ScreeningRepeat == 1)
                                {
                                    cbScreening.Checked = true;
                                    cbScreeningRepeat.Checked = false;
                                }
                                else if (ScreeningRepeat == 0)
                                {
                                    cbScreening.Checked = false;
                                    cbScreeningRepeat.Checked = true;
                                }
                            }
                            //.... FastingRequired Repeat
                            if (dr["FastingRequired"] != DBNull.Value)
                            {
                                FastingRequired = Convert.ToInt32(dr["FastingRequired"]);
                                if (FastingRequired == 1)
                                {
                                    //cbYesFastRequired.Checked = true;
                                    //gbFastingScreeningDateTime.Visible = true;
                                    txtSCBloodFastingStartTime.Text = dr["FastingStartTime"].ToString();
                                    //***************** DateTimePicker From Database**************
                                    string startFastingDate = dr["FastingStartDate"].ToString();
                                    if (!string.IsNullOrEmpty(startFastingDate))
                                    {
                                        dtpFastingStartDate.Value = Convert.ToDateTime(dr["FastingStartDate"].ToString());
                                    }
                                    else
                                    {
                                        dtSCBloodCollectionDate.NullableValue = null;
                                        dtSCBloodCollectionDate.SetToNullValue();
                                        dtSCBloodCollectionDate.NullText = "No date selected";
                                    }
                                    cbYesFastRequired.Checked = true;
                                }
                                else if (FastingRequired == 0)
                                {
                                    //gbFastingScreeningDateTime.Visible = false;
                                    //cbYesFastRequired.Checked = false;
                                    cbNoFastRequired.Checked = true;
                                }
                            }



                            //***************** DateTimePicker From Database**************
                            string startDate = dr["StartDate"].ToString();
                            if (!string.IsNullOrEmpty(startDate))
                            {
                                dtSCBloodCollectionDate.Value = Convert.ToDateTime(dr["StartDate"].ToString());
                            }
                            else
                            {
                                dtSCBloodCollectionDate.NullableValue = null;
                                dtSCBloodCollectionDate.SetToNullValue();
                                dtSCBloodCollectionDate.NullText = "No date selected";
                            }

                            //***************** Time from DataBase**************
                            string clientTime = dr["StartTime"].ToString();
                            txtSCBloodCollectionTime.Text = clientTime;


                            // eSigned By
                            eSignedBy = dr["SampleBy"].ToString();

                            lblSCLabBloodEsignedBy.Text = eSignedBy;
                            if (!string.IsNullOrEmpty(dr["SampleAt"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["SampleAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCLabBloodEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }

                            }
                            txtLabBloodBarCodedBy.Text = dr["CollectedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["CollectedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["CollectedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    txtSCLabBloodBarCodedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }

                            }
                            txtBloodCordinatorComment.Text = dr["Comments"].ToString();
                            txtRequesitionNumber.Text = dr["RequesitionNumber"].ToString();

                        }

                        connection.Close();
                        ////  Lock after populate
                        //if (eSignedBy != "" && SampleBy != "")
                        //{
                        //    CommonHelpers.SetReadOnlyProperties(gbBloodSampleAll, true);
                        //    CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, true);
                        //    CommonHelpers.SetReadOnlyProperties(GBBloodSample, true);
                        //    CommonHelpers.SetReadOnlyProperties(gbBloodSampleAll, true);

                        //}
                        //else
                        //{
                        //    CommonHelpers.SetReadOnlyProperties(gbBloodSampleAll, false);
                        //    CommonHelpers.SetReadOnlyProperties(GBLabBloodCollection, false);
                        //    CommonHelpers.SetReadOnlyProperties(GBBloodSample, false);
                        //    CommonHelpers.SetReadOnlyProperties(gbBloodSampleAll, false);

                        //}
                    }
                    //........Subject Drop..............
                    //SubjectDroppedFailedBlood(subjectKey);
                    //CheckDroppedBlood(subjectKey);
                }
                //.......... Lock/Unlock...........
                // ToggleLockUnlockButtonText();
                //  LockUnlockControls();
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Body Measurement - Safety Labs(Blood)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// populate Screening tests 
        /// </summary>
        /// <param name="Studyid"></param>
        private void GetScreeningCheckedItemsBlood()
        {
            lvSCSafetyBloodTests.Items.Clear();
            lvSCSafetyBloodOtherTests.Items.Clear();
            int _group = 0;
            if (IsStudyIDSelected())
            {
                List<string> _femaleTests = new List<string>();
                _femaleTests.Add("LH && FSH");
                _femaleTests.Add("Serum hCG");
                _femaleTests.Add("Estradiol");
                string query = string.Empty;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    query = string.Format("SELECT * FROM [dbo].[ScreeningTests] WHERE StudyID='" + studyId + "' AND Treatment='SC' and [Group] in(" + (int)LabTestsGroup.BloodChemistryTest + "," + (int)LabTestsGroup.OtherTests + ")");
                    DataTable dt = db.ExecuteSelectQuery(query, null, false);
                    db.CloseConnection();
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            if (txtGenders.Text.Trim().ToUpper().Equals("FEMALE") && row["Name"].ToString().Equals("Testosterone"))
                                continue;
                            if (txtGenders.Text.Trim().ToUpper().Equals("MALE") && _femaleTests.Contains(row["Name"].ToString()))
                                continue;
                            ListViewDataItem listitem = new ListViewDataItem(row["Name"].ToString());
                            listitem.Tag = row["Group"].ToString();
                            int.TryParse(row["Group"].ToString(), out _group);
                            if (_group.Equals((int)LabTestsGroup.OtherTests))
                                lvSCSafetyBloodOtherTests.Items.Add(listitem);
                            else
                                lvSCSafetyBloodTests.Items.Add(listitem);
                        }
                    }
                }
            }

        }

        /// <summary>
        /// Subject Failed Blood
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedBlood_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (string.IsNullOrEmpty(txtBloodCordinatorComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter comment.", "Blood", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "Safety Lab-Blood Collection";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                else
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningBloodSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningBloodSample] SET  SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,eSignedBy=@eSignedBy,eSignedAt=@eSignedDate WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtBloodCordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedDate", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningBloodSample]
                                  (StudyID,SubjectKey,Visit,SubjectStatus,Comments,eSignedBy,eSignedAt VALUES
                                (@studyId,@subjectkey,@Visit,@SubjectStatus,@CordinatorComment,@eSignedBy,@eSignedDate)");

                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyId", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@SubjectStatus", SubjectStatusCode.Status.Fail));
                            _params.Add(new SqlParameter("@CordinatorComment", txtBloodCordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedDate", DateTime.Now));
                            _params.Add(new SqlParameter("@Visit", Visit));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }
                        //.... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningBlood", SubjectStatusCode.Status.Fail, txtBloodCordinatorComment.Text.Trim());
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningBloodSample", pgvLabBlood.Name, "LabBloodFail", SubjectStatusCode.Status.Fail, txtBloodCordinatorComment.Text, App.EsignedUser.UserName);
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Blood", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        #endregion  ====================== End Blood======================

        //================================Urine==========================
        #region ============================Urine Sample=========================

        //============================= Drop==============================
        private void DisableAllControlsAfterSubjectDropUrineSample()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvECG")
                {
                    ctrl.Enabled = true;
                    ddSubjects.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                    ddSubjects.Enabled = true;
                }
            }
            foreach (Control c in pgvSafetyLabTests.Controls)
            {
                if (c.Name == "  pgvLabUrine")
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = true;
                }
                else
                {
                    ddSubjects.Enabled = true;
                    c.Enabled = false;
                }

            }
        }
        /// <summary>
        ///  Check if Dropped
        /// </summary>
        /// <param name="subjectkey"></param>
        private void CheckDroppedUrineSample(string subjectkey)
        {
            bool subjectDroppedBlood = DroppedHelper.IsSubjectDroppedUrine(studyId, subjectkey);
            bool subjectFailedBlood = FailedHelper.IsSubjectFailedUrineSample(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedBlood == true)
            {
                // foreach (Control ctrl in pgvOnScreeningPages.Controls)
                //  {
                //  if (ctrl.Name == "pgvECG")
                //  {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        //pgvECG.Image = null;
                        pgvLabBlood.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvSCSafetyLabs.Image = Dropped;
                        //  pgvECG.Image = Dropped;
                        pgvLabUrine.Image = Dropped;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        foreach (Control c in pgvLabUrine.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvSafetyLabTests.Controls)
                        {
                            if (c.Name == "pgvLabUrine")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
                // }



                // }
            }
            //======================== END Drop=======================
            //======================== Failed================================

            if (subjectFailedBlood == true)
            {
                // foreach (Control ctrl in pgvOnScreeningPages.Controls)
                // {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        // if (ctrl.Name == "pgvECG")
                        // {

                        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        lblSubjectStatus.Text = "Failed";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        //pgvECG.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvSCSafetyLabs.Image = Failed;
                        //  pgvECG.Image = Failed;
                        pgvLabUrine.Image = Failed;
                        pgvLabBlood.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        foreach (Control c in pgvLabUrine.Controls)
                        {
                            c.Enabled = false;
                        }

                        foreach (Control c in pgvSafetyLabTests.Controls)
                        {
                            if (c.Name == "pgvLabUrine")
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = true;
                            }
                            else
                            {
                                ddSubjects.Enabled = true;
                                c.Enabled = false;
                            }

                        }
                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
            }
            //======================== END Failed=======================
        }
        /// <summary>
        /// Subject Dropped / Failed Blood
        /// </summary>
        /// <param name="subjectkey"></param>
        private void SubjectDroppedFailedUrineSample(string subjectkey)
        {
            bool subjectDropped = DroppedHelper.IsSubjectDroppedUrineSample(studyId, subjectkey);
            bool subjectFailed = FailedHelper.IsSubjectFailedUrineSample(studyId, subjectkey);
            // ======================== Dropped==============================
            if (subjectDropped == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Dropped;
                        pgvLabBlood.Image = null;
                        pgvSCSafetyLabs.Image = Dropped;
                        pgvLabUrine.Image = Dropped;
                        pgvVitals.Image = null;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropUrineSample();

                        foreach (Control c in pgvLabUrine.Controls)
                        {
                            c.Enabled = false;
                        }
                        //...... selected page will be current .......
                        //  pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvSCSafetyLabs;
                        pgvSafetyLabTests.SelectedPage = pgvLabUrine;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }

            // ======================== Failed==============================
            else if (subjectFailed == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvSCSafetyLabs")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Failed";
                        ctrl.Enabled = true;
                        pgvInfluenza.Image = null;
                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        pgvHeightWeight.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvConsent.Image = null;
                        pgvICF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        //pgvECG.Image = Failed;
                        pgvLabBlood.Image = null;
                        pgvSCSafetyLabs.Image = Failed;
                        pgvLabUrine.Image = Failed;
                        pgvVitals.Image = null;
                        pgvECGG.Image = null;
                        pgvSCSafetyLabs.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvUrineTests.Image = null;
                        pgvDemographics.Image = null;
                        pgvIECC.Image = null;
                        pgvMedicalHistory.Image = null;
                        Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        pgvInfluenza.Image = Locked;
                        pgvIDVerfication.Image = Locked;
                        pgvPCF.Image = Locked;
                        pgvVCF.Image = Locked;
                        pgvConsent.Image = Locked;
                        pgvDemographics.Image = Locked;
                        pgvICF.Image = Locked;
                        pgvScreeningEvaluations.Image = Locked;
                        pgvMedicalInterview.Image = Locked;
                        pgvHeightWeight.Image = Locked;
                        pgvVitals.Image = Locked;
                        pgvECGG.Image = Locked;
                        // .............. Disable Controls...............
                        btneSignHW.Enabled = false;

                        DisableAllControlsAfterSubjectDropUrineSample();

                        foreach (Control c in pgvLabUrine.Controls)
                        {
                            c.Enabled = false;
                        }

                        //...... selected page will be current .......
                        // pgvOnScreeningPages.SelectedPage = pgvECG;
                        pgvOnScreeningPages.SelectedPage = pgvSCSafetyLabs;
                        pgvSafetyLabTests.SelectedPage = pgvLabUrine;
                    }
                    else
                    {
                        ctrl.Enabled = false;

                    }
                }
            }
            else
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {

                    ctrl.Enabled = true;

                }
                //foreach (Control ctrl in pgvMeasurement.Controls)
                //{

                //    ctrl.Enabled = true;

                //}
                lblSubjectStatus.ForeColor = System.Drawing.Color.Black;
                lblSubjectStatus.Text = "None";
                ddlDocumentTypeInf.Enabled = true;
            }
        }
        //.....
        /// <summary>
        /// Toggle between Screening and Screening repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbScreeningUrine_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbScreeningUrine.Checked)
            {
                cbScreeningUrine.Checked = true;
                cbScreeningRepeatUrine.Checked = false;
            }
        }

        /// <summary>
        /// Toggle between Screening and Screening repeat
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbScreeningRepeatUrine_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbScreeningRepeatUrine.Checked)
            {
                cbScreeningUrine.Checked = false;
                cbScreeningRepeatUrine.Checked = true;
            }
        }

        /// <summary>
        /// Toggle to check and temp
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbNoTempUrine_CheckStateChanged(object sender, EventArgs e)
        {
            txtUrineTempComment.Enabled = true;
        }
        /// <summary>
        /// Toggle to check and temp
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbYesUrineTemp_CheckStateChanged(object sender, EventArgs e)
        {
            txtUrineTempComment.Enabled = false;
        }
        /// <summary>
        /// eSign Urine Sample Collection
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btneSignUrineCollection_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            string sampleTakenDate = string.Empty;
            bool sampleTempBetween = default(bool);
            bool ScreeningRepeat = default(bool);
            string sampleTakenTime = UrineCollectedTime.Value.ToString();
            string tempNoComment = string.Empty;
            if (cbNoTempUrine.IsChecked)
            {
                tempNoComment = txtUrineTempComment.Text.Trim();
            }
            // Start blood Date
            if (dtUrineCollectedDate.Text.Length > 0)
            {
                sampleTakenDate = Convert.ToDateTime(dtUrineCollectedDate.Text.Trim() + " " + Convert.ToDateTime(UrineCollectedTime.Value.ToString()).TimeOfDay.ToString()).ToString();
            }
            else
            {
                sampleTakenDate = "";
            }
            // Required / Not Required
            if (cbYesUrineTemp.IsChecked)
            {
                sampleTempBetween = true;
            }
            else if (cbNoTempUrine.IsChecked)
            {
                sampleTempBetween = false;
            }
            // Screening / Screening Repeat
            //if (cbScreeningUrine.Checked)
            //{
            //    ScreeningRepeat = true;
            //}
            //else if (cbScreeningRepeatUrine.Checked)
            //{
            //    ScreeningRepeat = false;
            //}
            ScreeningRepeat = false;
            //new logic 20180223
            try
            {
                if (!ValidateScreeningUrineSample())
                    return;
                if (!IsTimeValid(sampleTakenDate))
                {
                    UrineCollectedTime.Focus();
                    return;
                }
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    #region Saving Urine Sample to ScreeningLabUrineSample for lab test                                        
                    string tabName = "Safety Lab-Urine Sample";
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlConnection connection = db.GetConnection();
                    string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningLabUrineSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                    SqlCommand cmd = new SqlCommand(checkExist, connection);
                    int count = (int)cmd.ExecuteScalar();
                    db.BeginTransaction();
                    if (count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningLabUrineSample] SET Screening='" + ScreeningRepeat + "',TempBetween='" + sampleTempBetween + "',TempComment='" + txtUrineTempComment.Text + "',StartDate='" + sampleTakenDate + "',StartTime='" + sampleTakenTime + "',SampleBy='" + App.EsignedUser.UserName + "',SampleAt='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                        db.ExecuteUpdateQuery(UpdateQuery, null, false);
                    }
                    else
                    {
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningLabUrineSample]
                                 (StudyID,SubjectKey,Visit,Screening,TempBetween,TempComment,StartDate,StartTime,SampleBy,SampleAt) VALUES
                                 ('" + studyId + "','" + _subjectKey + "'," + Visit + ",'" + Convert.ToInt32(ScreeningRepeat) + "','" + Convert.ToInt32(sampleTempBetween) + "','" + txtUrineTempComment.Text + "','" + sampleTakenDate + "','" + sampleTakenTime + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "')");

                        SqlCommand command = new SqlCommand(InsertQuery, connection);
                        db.ExecuteInsertQuery(InsertQuery, null, false);
                    }
                    #endregion

                    #region Saving Urine Sample to ScreeningUrineSample for urine test                    
                    SaveUrineSampleCollection(db, sampleTakenTime, sampleTakenDate, tempNoComment, sampleTempBetween);
                    #endregion

                    //subject status
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningLabUrineSample", pgvLabUrine.Name, "LabUrineSampleProceed", SubjectStatusCode.Status.Proceed, txtUrineSampleCordinatorComment.Text, App.EsignedUser.UserName);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningSafetyLabs(Urine)", SubjectStatusCode.Status.Proceed, txtUrineSampleCordinatorComment.Text.Trim());
                    string detail = "Urine sample data of subject-" + ValueOfKey + " have been added for urine test.";
                    App.EsignedUser.AddAudit(db, "Screening-Drug Test", EnumModules.AuditAction.Insert.ToString(), detail, DateTime.Now, "", "");
                    db.CommitTransaction();
                    db.CloseConnection();
                    HelperFunctions.ShowMessageBox("Urine Sample Collection Completed Successfully", "Screening Urine-Test(Sample Collection)", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test (Urine Sample Collection) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void SaveUrineSampleCollection(DbConnection db, string sampleTakenTime, string sampleTakenDate, string tempNoComment, bool sampleTempBetween)
        {
            try
            {
                SqlConnection conn = db.GetConnection();
                string checkExist = string.Format(@"(SELECT * FROM [dbo].[ScreeningUrineTest] WHERE StudyId='" + studyId + "' and SubjectKey='" + _subjectKey + "')");
                DataTable dt = db.ExecuteSelectQuery(checkExist, null, false);
                if (dt.Rows.Count == 0)
                {
                    int _parentId = 0;
                    SqlParameter p1 = new SqlParameter("@SubjectKey", _subjectKey);
                    SqlParameter p2 = new SqlParameter("@StudyId", studyId);
                    SqlParameter p3 = new SqlParameter("@EsignedBy", App.EsignedUser.UserName);
                    SqlParameter p4 = new SqlParameter("@EsignedDate", DateTime.Now);
                    SqlParameter p5 = new SqlParameter("@Id", SqlDbType.Int) { Direction = ParameterDirection.Output };
                    SqlParameter[] sps = new SqlParameter[] { p1, p2, p3, p4, p5 };
                    // db.BeginTransaction();
                    _parentId = db.ExecuteInsertQueryIdentity("spInsertScreeningUrineTest", sps, true);
                    string _insertSampleQuery = "insert into ScreeningUrineSample(SampledTime,SampleTempBetween,SampleTempComment,SampleTakenBy,SampleTakenDate,ScreeningUrineTestId)"
                        + "Values('" + sampleTakenTime + "','" + sampleTempBetween + "','" + tempNoComment + "','" + App.EsignedUser.UserName + "','" + sampleTakenDate + "'," + _parentId + ")";
                    db.ExecuteInsertQuery(_insertSampleQuery, null, false);
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// Proceed Urine Sample
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnProceedUrineSample_Click(object sender, EventArgs e)
        {
            if (!ValidateCommonScreeningRequiredFields())
                return;
            _subjectKey = Convert.ToInt32(SubjectKey.Text);
            try
            {
                if (string.IsNullOrEmpty(txtRequesitionUrineNo.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter requisition number.", "Urine Collection", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    txtRequesitionUrineNo.Select();
                    return;
                }
                string tabName = "Safety Lab-Urine Sample";
                string reason = string.Format("Screening Safety Labs(Urine) eSigned by :'" + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {

                    connection.Open();
                    string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningLabUrineSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                    SqlCommand cmd = new SqlCommand(checkExist, connection);
                    int count = (int)cmd.ExecuteScalar();
                    if (count > 0)
                    {
                        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningLabUrineSample] SET SubjectStatus='" + (int)SubjectStatusCode.Status.Proceed + "',Comments='" + txtUrineSampleCordinatorComment.Text + "',eSignedBy='" + App.EsignedUser.UserName + "',eSignedAt='" + DateTime.Now + "', RequesitionNumber='" + txtRequesitionUrineNo.Text + "', CollectedBy='" + App.EsignedUser.UserName + "',CollectedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);
                        SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
                        cmdUpdate.ExecuteNonQuery();
                    }
                    else
                    {
                        string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningLabUrineSample]
                                 (StudyID,SubjectKey,Visit,SubjectStatus,Comments,eSignedBy,eSignedAt,RequesitionNumber,CollectedBy,CollectedDate) VALUES
                                 ('" + studyId + "','" + _subjectKey + "','" + Visit + "','" + (int)SubjectStatusCode.Status.Proceed + "','" + txtUrineSampleCordinatorComment.Text + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "','" + txtRequesitionUrineNo.Text + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "')");
                        SqlCommand command = new SqlCommand(InsertQuery, connection);
                        command.ExecuteNonQuery();
                    }
                    connection.Close();
                    //.... Subject Status..........................
                    using (DbConnection conDb = new DbConnection())
                    {
                        conDb.OpenConnection();
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(conDb, studyId, _subjectKey, "OnScreeningSafetyLabs(Urine)", SubjectStatusCode.Status.Proceed, txtUrineSampleCordinatorComment.Text);
                        conDb.CloseConnection();
                    }
                    HelperFunctions.ShowMessageBox("Urine Sample Requisition saved succcesfully.", "Lab Urine Sample", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Body Measurement (Height & Width) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Subject Failed Urine Sample
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedUrineSample_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (string.IsNullOrEmpty(txtUrineSampleCordinatorComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter Comment.", "Lab Urine Sample Collection.", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                tabName = "Urine Sample";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                else
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string checkExist = string.Format(@"(SELECT 1 FROM [dbo].[ScreeningLabUrineSample] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit + ")");
                        DataTable _dtExist = db.ExecuteSelectQuery(checkExist, null, false);
                        db.BeginTransaction();
                        if (_dtExist.Rows.Count > 0)
                        {
                            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningLabUrineSample] SET  SubjectStatus=@SubjectStatus,Comments=@CordinatorComment,eSignedBy=@eSignedBy,eSignedAt=@eSignedDate WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "' and Visit=" + Visit);

                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@SubjectStatus", (int)SubjectStatusCode.Status.Dropped));
                            _params.Add(new SqlParameter("@CordinatorComment", txtUrineSampleCordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedDate", DateTime.Now));
                            db.ExecuteUpdateQuery(UpdateQuery, _params.ToArray(), false);
                        }
                        else
                        {
                            string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningLabUrineSample]
                                  (StudyID,SubjectKey,Visit,SubjectStatus,Comments,eSignedBy,eSignedAt VALUES
                                (@studyId,@subjectkey,@Visit,@SubjectStatus,@CordinatorComment,@eSignedBy,@eSignedDate)");

                            List<SqlParameter> _params = new List<SqlParameter>();
                            _params.Add(new SqlParameter("@studyId", studyId));
                            _params.Add(new SqlParameter("@subjectkey", _subjectKey));
                            _params.Add(new SqlParameter("@SubjectStatus", (int)SubjectStatusCode.Status.Dropped));
                            _params.Add(new SqlParameter("@CordinatorComment", txtBloodCordinatorComment.Text));
                            _params.Add(new SqlParameter("@eSignedBy", App.EsignedUser.UserName));
                            _params.Add(new SqlParameter("@eSignedDate", DateTime.Now));
                            _params.Add(new SqlParameter("@Visit", Visit));
                            db.ExecuteInsertQuery(InsertQuery, _params.ToArray(), false);
                        }

                        //.... Subject Status..........................
                        OnScreeningStatusHelper.SaveScreeningSubjectStatus(db, studyId, _subjectKey, "OnScreeningUrineSample", SubjectStatusCode.Status.Dropped, txtUrineSampleCordinatorComment.Text);
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, _subjectKey.ToString(), "ScreeningLabUrineSample", pgvLabUrine.Name, "UrineSampleFail", SubjectStatusCode.Status.Fail, txtUrineSampleCordinatorComment.Text, App.EsignedUser.UserName);
                        db.CommitTransaction();
                        db.CloseConnection();
                        LoadDataBySelectedTab();
                        //lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
                        //lblSubjectStatus.Text = "Failed";
                        ////................ Disable Controls..............
                        //btnBloodSample.Enabled = false;
                        //btnClinetInfo.Enabled = false;
                        //DisableAllControlsAfterSubjectDropUrineSample();
                        //pgvConsent.Image = null;
                        //pgvPCF.Image = null;
                        //pgvVCF.Image = null;
                        //pgvICF.Image = null;
                        //pgvInfluenza.Image = null;
                        //pgvIDVerfication.Image = null;
                        //pgvMedicalInterview.Image = null;
                        //pgvDemographics.Image = null;
                        //pgvMedicalHistory.Image = null;
                        //pgvScreeningEvaluations.Image = null;
                        //pgvHeightWeight.Image = null;
                        //pgvVitals.Image = null;
                        ////pgvECG.Image = null;
                        //Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        //pgvSCSafetyLabs.Image = Failed;
                        //pgvLabUrine.Image = Failed;
                        ////  pgvECG.Image = Failed;
                        //Image Locked = new Bitmap(Properties.Resources.lock_closed);
                        //pgvInfluenza.Image = Locked;
                        //pgvIDVerfication.Image = Locked;
                        //pgvPCF.Image = Locked;
                        //pgvVCF.Image = Locked;
                        //pgvConsent.Image = Locked;
                        //pgvDemographics.Image = Locked;
                        //pgvICF.Image = Locked;
                        //pgvScreeningEvaluations.Image = Locked;
                        //pgvMedicalInterview.Image = Locked;
                        //pgvHeightWeight.Image = Locked;
                        //pgvVitals.Image = Locked;
                        //pgvECGG.Image = Locked;
                        //pgvLabBlood.Image = null;
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening ECG Dropped", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Populate Urine Sample
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetUrineSample(string subjectKey)
        {
            int ScreeningRepeat = default(int);
            int TempBetween = default(int);
            string eSignedBy = string.Empty;
            string SampleBy = string.Empty;
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        string query = string.Format(@"SELECT * FROM [dbo].[ScreeningLabUrineSample] WHERE StudyID='" + studyId + "' AND SubjectKey = '" + subjectKey + "' and Visit=" + Visit);
                        DataTable _dt = db.ExecuteSelectQuery(query, null, false);
                        if (_dt.Rows.Count > 0)
                        {
                            DataRow dr = _dt.Rows[0];
                            //.... Screening Repeat
                            if (dr["Screening"] != DBNull.Value)
                            {
                                ScreeningRepeat = Convert.ToInt32(dr["Screening"]);
                                if (ScreeningRepeat == 1)
                                {
                                    cbScreeningUrine.Checked = true;
                                    cbScreeningRepeatUrine.Checked = false;
                                }
                                else if (ScreeningRepeat == 0)
                                {
                                    cbScreeningUrine.Checked = false;
                                    cbScreeningRepeatUrine.Checked = true;
                                }
                            }
                            //.... FastingRequired Repeat
                            if (dr["TempBetween"] != DBNull.Value)
                            {
                                TempBetween = Convert.ToInt32(dr["TempBetween"]);
                                if (TempBetween == 1)
                                {
                                    cbYesUrineTemp.IsChecked = true;
                                    //gbFastingScreeningDateTime.Visible = true;
                                    //txtFastingScreeningStartTime.Text = dr["FastingStartTime"].ToString();
                                    ////***************** DateTimePicker From Database**************
                                    //string startFastingDate = dr["FastingStartDate"].ToString();
                                    //if (!string.IsNullOrEmpty(startFastingDate))
                                    //{
                                    //    dtpFastingStartDate.Value = Convert.ToDateTime(dr["FastingStartDate"].ToString());
                                    //}
                                    //else
                                    //{
                                    //    this.dtStartBlood.NullableValue = null;
                                    //    this.dtStartBlood.SetToNullValue();
                                    //    this.dtStartBlood.NullText = "No date selected";
                                    //}
                                    cbNoTempUrine.IsChecked = false;
                                }
                                else if (TempBetween == 0)
                                {
                                    //gbFastingScreeningDateTime.Visible = false;
                                    //cbYesFastRequired.Checked = false;
                                    //cbNoFastRequired.Checked = true;
                                    txtUrineTempComment.Text = dr["TempComment"].ToString();

                                }
                            }



                            //***************** DateTimePicker From Database**************
                            string startDate = dr["StartDate"].ToString();
                            if (!string.IsNullOrEmpty(startDate))
                            {
                                dtUrineCollectedDate.Value = Convert.ToDateTime(dr["StartDate"].ToString());
                            }
                            else
                            {
                                dtSCBloodCollectionDate.NullableValue = null;
                                dtSCBloodCollectionDate.SetToNullValue();
                                dtSCBloodCollectionDate.NullText = "No date selected";
                            }

                            //***************** Time from DataBase**************
                            string clientTime = dr["StartTime"].ToString();
                            UrineCollectedTime.Value = Convert.ToDateTime(clientTime);
                            // eSigned By
                            eSignedBy = dr["SampleBy"].ToString();
                            lblSCLabUrineEsignedBy.Text = eSignedBy;
                            if (!string.IsNullOrEmpty(dr["SampleAt"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["SampleAt"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCLabUrineEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                            txtUrineCodedBy.Text = dr["CollectedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["CollectedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["CollectedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    txtSCLabUrineBarCodedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                            txtUrineSampleCordinatorComment.Text = dr["Comments"].ToString();
                            txtRequesitionUrineNo.Text = dr["RequesitionNumber"].ToString();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Body Measurement - Safety Labs(Urine)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// populate Screening Data
        /// </summary>
        /// <param name="Studyid"></param>
        private void GetScreeningCheckedItemsUrine()
        {
            string query = string.Empty;
            int _group = 0;
            lvSafetyUrinalysis.Items.Clear();
            lvSafetyUrineOtherTests.Items.Clear();
            if (studyId != "Select a Project")
            {
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    query = string.Format("SELECT * FROM [dbo].[ScreeningTests] WHERE StudyID='" + studyId + "' AND Treatment='SC' AND [Group] in(" + (int)LabTestsGroup.UrinalysisTest + "," + (int)LabTestsGroup.OtherTests + ")");//[Group]='" + Group + "'");
                    DataTable dt = db.ExecuteSelectQuery(query, null, false);
                    db.CloseConnection();

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            ListViewDataItem listitem = new ListViewDataItem(row["Name"].ToString());
                            listitem.Tag = row["Group"].ToString();
                            int.TryParse(row["Group"].ToString(), out _group);
                            if (_group.Equals((int)LabTestsGroup.OtherTests))
                                lvSafetyUrineOtherTests.Items.Add(listitem);
                            else
                                lvSafetyUrinalysis.Items.Add(listitem);

                        }
                    }
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnUrineSampleTimeNow_Click(object sender, EventArgs e)
        {
            string onlyTime = DateTime.Now.ToString("HH:mm");
            UrineCollectedTime.Value = Convert.ToDateTime(onlyTime);
        }
        #endregion ======================== END Urine=======================

        #endregion

        //******************************Urine ******************************
        #region  Urine

        ///*************************  Urine Test ****************************************
        #region Urine Test 
        private void LoadLastUrineSampleCollectionDateTime()
        {
            try
            {
                lblSCLastUrineSampledTime.Text = string.Empty;
                using (DbConnection DbConn = new DbConnection())
                {
                    DbConn.OpenConnection();
                    SqlParameter p1 = new SqlParameter("@studyId", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", ValueOfKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtUrine = DbConn.ExecuteSelectQuery("spGetMostRecentSCUrineSampleCollection", sps, true);
                    if (dtUrine.Rows.Count > 0)
                    {
                        DateTime _sampledTime = new DateTime();
                        if (!string.IsNullOrEmpty(dtUrine.Rows[0]["SampledTime"].ToString()))
                        {
                            if (DateTime.TryParse(dtUrine.Rows[0]["SampledTime"].ToString(), out _sampledTime))
                            {
                                lblSCLastUrineSampledTime.Text = CommonHelpers.PCMSDateTimeFormat(_sampledTime);
                            }
                        }
                    }
                    DbConn.CloseConnection();
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }
        private void btnUrineTestsResultFile_CommonClick(object sender, EventArgs e)
        {
            string _uploadedFile = string.Empty;
            RadButton _button = sender as RadButton;
            if (_button != null)
            {
                ofdSCUrineResultScan.Reset();
                ofdSCUrineResultScan.Filter = "Pdf Files|*.pdf";
                if (ofdSCUrineResultScan.ShowDialog() == DialogResult.OK)
                {
                    _uploadedFile = Path.GetFileName(ofdSCUrineResultScan.FileName);
                    _button.Tag = ofdSCUrineResultScan.FileName;
                }
                else
                {
                    ofdSCUrineResultScan.Reset();
                }
            }
        }

        private void btnUrineTestRepeat_Click(object sender, EventArgs e)
        {
            frmUrineTestRepeatDialog _objDialog = null;
            frmScreeningUrineSampleRepeat _objSCUrineSample = null;
            try
            {
                bool _isCotinineNeedRepeat = false;
                bool _isDrugAbuseNeedRepeat = false;
                bool _isHCGNeedRepeat = false;

                bool _isAllValueAvailable = true;
                bool _isAnyResultPositive = false;
                bool _isAllRsultsReadInTime = true;
                if ((hcgRequired && txtGenders.Text.Trim().Equals("Female")))
                {
                    if (!((rbHCGNeg.IsChecked || rbHCGPos.IsChecked) && (!string.IsNullOrEmpty(tpHCGStartTime.Value.ToString()) && !string.IsNullOrEmpty(tpHCGReadingTime.Value.ToString()))))
                    {
                        _isAllValueAvailable = false;
                        _isHCGNeedRepeat = true;
                    }
                    if (rbHCGPos.IsChecked)
                    {
                        _isHCGNeedRepeat = true;
                        _isAnyResultPositive = true;
                    }
                    if (!IsHCGResultReadingTimeCorrect(tpHCGReadingTime.Value))
                    {
                        _isHCGNeedRepeat = true;
                        _isAllRsultsReadInTime = false;
                    }
                }
                if (cotinineRequired)
                {
                    if (!((rbConP.IsChecked || rbConN.IsChecked) && (!string.IsNullOrEmpty(tpCotStartTime.Value.ToString()) && !string.IsNullOrEmpty(tpCotReadingTime.Value.ToString()))))
                    {
                        _isCotinineNeedRepeat = true;
                        _isAllValueAvailable = false;
                    }
                    if (rbConP.IsChecked)
                    {
                        _isCotinineNeedRepeat = true;
                        _isAnyResultPositive = true;
                    }
                    if (!IsCotinineResultReadingTimeCorrect(tpCotReadingTime.Value))
                    {
                        _isCotinineNeedRepeat = true;
                        _isAllRsultsReadInTime = false;
                    }
                }
                if (drugRequired)
                {
                    if (!(isAllDrugAbuseTestsResultSelected() && (!string.IsNullOrEmpty(tpDrugStartTime.Value.ToString()) && !string.IsNullOrEmpty(tpDrugReadingTime.Value.ToString()))))
                    {
                        _isAllValueAvailable = false;
                        _isDrugAbuseNeedRepeat = true;
                    }

                    Control[] _radioGroups = new Control[] {gbAmphetamines,
gbBarbiturates,
gbBenzodiazepines,
gbCannabinoids,
gbCocaine,
gbOpiates,
gbPhencyclidine,
gbTrycyclicAntidepressant,
gbMethadone};
                    if (!CommonHelpers.IsAllDrugAbuseTestsResultNegative(_radioGroups.ToList()))
                    {
                        _isDrugAbuseNeedRepeat = true;
                        _isAnyResultPositive = true;
                    }
                    if (!IsDrugAbuseResultReadingTimeCorrect(tpDrugReadingTime.Value))
                    {
                        _isAllRsultsReadInTime = false;
                        _isDrugAbuseNeedRepeat = true;
                    }
                }
                if (_isAllValueAvailable && !_isAnyResultPositive && _isAllRsultsReadInTime)
                {
                    if (HelperFunctions.ShowMessageBox("Everything looks fine. Do you still want to repeat(Y/N)?", "Drug Test", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return;
                }
                if (OnScreeningHelper.CheckIfUrineSampleRepeatRequired(studyId, ValueOfKey))
                {
                    _objSCUrineSample = new frmScreeningUrineSampleRepeat();
                    _objSCUrineSample.StudyID = studyId;
                    _objSCUrineSample.SubjectKey = int.Parse(ValueOfKey);
                    _objSCUrineSample.ShowDialog();
                }
                else
                {
                    if (!OnScreeningHelper.IsUrineTestsSigned(ValueOfKey, studyId))
                    {
                        HelperFunctions.ShowMessageBox("Current urine tests have not been e-signed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    if (!OnScreeningHelper.IsUrineTestResultsVerified(ValueOfKey, studyId))
                    {
                        HelperFunctions.ShowMessageBox("Current urine tests have not been verified.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    //if (!OnScreeningHelper.IsUrineTestResultsInvestigated(ValueOfKey, studyId))
                    //{
                    //    HelperFunctions.ShowMessageBox("Current urine tests have not been reviewed by investigator.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    //    return;
                    //}
                    _objDialog = new frmUrineTestRepeatDialog();
                    _objDialog.HCGAbnormal = _isHCGNeedRepeat;
                    _objDialog.CotinineAbnormal = _isCotinineNeedRepeat;
                    _objDialog.DrugAbuseAbnormal = _isDrugAbuseNeedRepeat;
                    _objDialog.StudyID = studyId;
                    _objDialog.SubjectKey = int.Parse(ValueOfKey);
                    _objDialog.ParentFormName = Name;
                    if (_objDialog.ShowDialog().Equals(DialogResult.OK) && OnScreeningHelper.CheckIfUrineSampleRepeatRequired(studyId, ValueOfKey))
                    {
                        _objSCUrineSample = new frmScreeningUrineSampleRepeat();
                        _objSCUrineSample.StudyID = studyId;
                        _objSCUrineSample.SubjectKey = int.Parse(ValueOfKey);
                        _objSCUrineSample.ShowDialog();
                    }
                }
                LoadLastUrineSampleCollectionDateTime();
                GetUrine(ValueOfKey);
                CheckUrineTestEsign(ValueOfKey);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                if (_objDialog != null)
                    _objDialog.Dispose();
                if (_objSCUrineSample != null)
                    _objSCUrineSample.Dispose();
            }
        }
        private void ddhcgProduct_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddhcgProduct.SelectedIndex == -1 || ddhcgProduct.SelectedItem == null)
                return;
            txtExpirhCG.Text = ddhcgProduct.SelectedItem.Tag.ToString();
            txtLotNumberhCG.Text = ddhcgProduct.SelectedItem.Value.ToString();
        }

        private void ddCotinineProduct_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddCotinineProduct.SelectedIndex == -1 || ddCotinineProduct.SelectedItem == null)
                return;
            txtExpirDateCotinine.Text = ddCotinineProduct.SelectedItem.Tag.ToString();
            txtLotNumberCotinine.Text = ddCotinineProduct.SelectedItem.Value.ToString();
        }

        private void ddDrugProduct_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddDrugProduct.SelectedIndex == -1 || ddDrugProduct.SelectedItem == null)
                return;
            txtExpirDateDrug.Text = ddDrugProduct.SelectedItem.Tag.ToString();
            txtLotNumberDrug.Text = ddDrugProduct.SelectedItem.Value.ToString();
        }

        private void cbHCGVerifyProduct_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked))
            {
                if (CommonHelpers.CheckIfExpireDateIsPassed(txtExpirhCG.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Selected product has already been expired.", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    args.Cancel = true;
                }
            }
        }

        private void cbCotinineVerifyProduct_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked))
            {
                if (CommonHelpers.CheckIfExpireDateIsPassed(txtExpirDateCotinine.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Selected product has already been expired.", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    args.Cancel = true;
                }
            }
        }

        private void cbDrugVerifyProduct_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked))
            {
                if (CommonHelpers.CheckIfExpireDateIsPassed(txtExpirDateDrug.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Selected product has already been expired.", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    args.Cancel = true;
                }
            }
        }
        private void EnableDisableCommonRadioCheckStateChanging(bool enable, RadRadioButton btn)
        {
            if (enable)
                btn.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(PositiveUrineResult_CommonCheckStateChanging);
            else
                btn.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(PositiveUrineResult_CommonCheckStateChanging);
        }
        private void PositiveUrineResult_CommonCheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked))
            {
                if (HelperFunctions.ShowMessageBox("Result is positive.Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Exclamation).Equals(DialogResult.No))
                    args.Cancel = true;
            }
        }
        private void LoadUrineRepeatReason()
        {
            try
            {
                string _reason = OnScreeningHelper.GetUrineTestRepeatReason(ValueOfKey, studyId);
                if (!string.IsNullOrEmpty(_reason))
                {
                    lblSCUrineRepeatCommentBar.Visible = true;
                    //lblSCUrineRepeatComment.Visible = true;
                    //lblSCReasonForUrineRepeat.Visible = true;
                    lblSCUrineRepeatComment.Text = _reason;//"Reason for repeat: " + 
                }
                else
                {
                    lblSCUrineRepeatCommentBar.Visible = false;
                    lblSCUrineRepeatComment.Text = string.Empty;
                    //lblSCReasonForUrineRepeat.Visible = false;                    
                    //lblSCUrineRepeatComment.Visible = false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void LoadUrineTestProducts()
        {
            ddDrugProduct.Items.Clear();
            ddCotinineProduct.Items.Clear();
            ddhcgProduct.Items.Clear();
            drugRequired = OnScreeningHelper.IsUrineDrugAbuseTestRequired(studyId);
            cotinineRequired = OnScreeningHelper.IsUrineCotinineTestRequired(studyId);
            hcgRequired = OnScreeningHelper.IsUrineHCGPregnancyTestRequired(studyId);
            if (!drugRequired && !cotinineRequired && !hcgRequired)
            {
                //GBDrugAbuse.Enabled = false;
                //gbDrugAbuseResult.Enabled = false;
                //GBCotinineTest.Enabled = false;
                //gbCotinineResult.Enabled = false;
                //GBhCGPregnancy.Enabled = false;
                //gbHCGResult.Enabled = false;

                GBDrugAbuse.Visible = false;
                gbDrugAbuseResult.Visible = false;
                GBCotinineTest.Visible = false;
                gbCotinineResult.Visible = false;
                GBhCGPregnancy.Visible = false;
                gbHCGResult.Visible = false;
                gbUrineTests.Visible = false;
                rpnlUrineTestFooter.Visible = false;
                return;
            }
            else
            {
                gbUrineTests.Visible = true;
                rpnlUrineTestFooter.Visible = true;
            }
            using (DbConnection db = new DbConnection())
            {
                db.OpenConnection();
                string _query = "select * from UrineTestProducts where StudyID='" + studyId + "' and Module='Screening' order by eSignedDate desc, ModifiedDate desc";
                DataTable dt = db.ExecuteSelectQuery(_query, null, false);
                if (dt.Rows.Count == 0)
                    return;
                if (drugRequired)
                {
                    //GBDrugAbuse.Enabled = true;
                    //gbDrugAbuseResult.Enabled = true;
                    GBDrugAbuse.Visible = true;
                    gbDrugAbuseResult.Visible = true;
                    DataRow[] _drugRows = dt.Select("TestName='DrugAbuse'");
                    foreach (DataRow row in _drugRows)
                    {
                        RadListDataItem _item = new RadListDataItem();
                        _item.Text = row["Product"].ToString();
                        _item.Value = row["LotNumber"].ToString();
                        if (!string.IsNullOrEmpty(row["ExpirationDate"].ToString()))
                            _item.Tag = Convert.ToDateTime(row["ExpirationDate"].ToString()).ToString("MMM dd, yyyy");
                        ddDrugProduct.Items.Add(_item);
                    }
                }
                else
                {
                    //GBDrugAbuse.Enabled = false;
                    //gbDrugAbuseResult.Enabled = false;
                    GBDrugAbuse.Visible = false;
                    gbDrugAbuseResult.Visible = false;
                }
                if (cotinineRequired)
                {
                    //GBCotinineTest.Enabled = true;
                    //gbCotinineResult.Enabled = true;
                    GBCotinineTest.Visible = true;
                    gbCotinineResult.Visible = true;
                    DataRow[] _cotinineRows = dt.Select("TestName='Cotinine'");
                    foreach (DataRow row in _cotinineRows)
                    {
                        RadListDataItem _item = new RadListDataItem();
                        _item.Text = row["Product"].ToString();
                        _item.Value = row["LotNumber"].ToString();
                        if (!string.IsNullOrEmpty(row["ExpirationDate"].ToString()))
                            _item.Tag = Convert.ToDateTime(row["ExpirationDate"].ToString()).ToString("MMM yyyy");
                        ddCotinineProduct.Items.Add(_item);
                    }
                }
                else
                {
                    //GBCotinineTest.Enabled = false;
                    //gbCotinineResult.Enabled = false;
                    GBCotinineTest.Visible = false;
                    gbCotinineResult.Visible = false;
                }
                if (hcgRequired && txtGenders.Text.Trim().Equals("Female"))
                {
                    //GBhCGPregnancy.Enabled = true;
                    //gbHCGResult.Enabled = true;
                    GBhCGPregnancy.Visible = true;
                    gbHCGResult.Visible = true;
                    DataRow[] _hcgRows = dt.Select("TestName='HCGPregnancy'");
                    foreach (DataRow row in _hcgRows)
                    {
                        RadListDataItem _item = new RadListDataItem();
                        _item.Text = row["Product"].ToString();
                        _item.Value = row["LotNumber"].ToString();
                        if (!string.IsNullOrEmpty(row["ExpirationDate"].ToString()))
                            _item.Tag = Convert.ToDateTime(row["ExpirationDate"].ToString()).ToString("MMM dd, yyyy");
                        ddhcgProduct.Items.Add(_item);
                    }
                }
                else
                {
                    GBhCGPregnancy.Visible = false;
                    gbHCGResult.Visible = false;
                    //GBhCGPregnancy.Enabled = false;
                    //gbHCGResult.Enabled = false;
                }
            }
        }

        /// <summary>
        /// Scan Urine To Retrieve Info
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanUrine_TextChanged(object sender, EventArgs e)
        {
            TestsTimer.Interval = (700);
            TestsTimer.Enabled = true;
            TestsTimer.Start();
        }

        /// <summary>
        /// Timer to managed Scaned Urine before Retrieve Info
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TestsTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                TestsTimer.Stop();
                //sunil20180108
                if (string.IsNullOrEmpty(txtScanUrine.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanUrine.Text.Trim());
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
                if (!OnScreeningHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, pgvUrineTests.Name).Equals(SubjectStatusCode.Status.Proceed))
                {
                    if (!string.IsNullOrEmpty(txtScanUrine.Text.Trim()))
                    {
                        if (ddSubjects.SelectedIndex > -1)
                        {
                            if (ValueOfKey.Equals(OnScreeningHelper.SubjectKeybyID(txtScanUrine.Text.Trim())))
                            {
                                if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
                                    return;
                                if (!IsScreeningUrineTestsProductVerified())
                                {
                                    HelperFunctions.ShowMessageBox("Please verify all test products first.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                                    return;
                                }
                                bool _firstTimeStartTimeReading = false;
                                LoadAndSaveUrineTestsStartTime(out _firstTimeStartTimeReading);
                                if (!_firstTimeStartTimeReading)
                                    LoadUrineTestsResultReadingTime();
                                // CheckeSign(ValueOfKey);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanUrine.ResetText();
            }
        }
        private void LoadAndSaveUrineTestsStartTime(out bool _firstTimeStartTimeReading)
        {
            _firstTimeStartTimeReading = false;
            string testStartTime = default(string);
            bool isDrugRepeatRequired = default(bool);
            bool isCotinineRepeatRequired = default(bool);
            bool isHCGRepeatRequired = default(bool);
            bool isAnyTestHasStarted = default(bool);
            try
            {
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    string _message = string.Empty;

                    //if (_dtDrug.Rows.Count == 0 && _dtCot.Rows.Count == 0 && _dtHCG.Rows.Count == 0)
                    //{
                    //    HelperFunctions.ShowMessageBox("Urine test kits have not been verified yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    //    return;
                    //}
                    db.BeginTransaction();
                    testStartTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm:ss");
                    #region Drug Abuse  
                    if (drugRequired)
                    {
                        DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                        if (_dtDrug.Rows.Count > 0)
                        {
                            isAnyTestHasStarted = true;
                            isDrugRepeatRequired = OnScreeningHelper.CheckIfUrineDrugRepeatRequired(studyId, ValueOfKey);
                            if (isDrugRepeatRequired || string.IsNullOrEmpty(_dtDrug.Rows[0]["DrugAbuseTestStartTime"].ToString()))
                            {
                                SqlParameter _p1 = new SqlParameter("@DrugAbuseTestStartTime", null);
                                int id = int.Parse(_dtDrug.Rows[0]["Id"].ToString());
                                _p1.Value = testStartTime;
                                SqlParameter _p2 = new SqlParameter("@Id", id);
                                SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2 };
                                db.ExecuteUpdateQuery("spUpdateScreeningDrugAbuseTestResult", _updateParams, true);
                                _firstTimeStartTimeReading = true;
                                _message = "Urine Test(s) Start Time has been saved successfully.";
                            }
                        }

                    }
                    #endregion

                    #region Cotinine                    
                    if (cotinineRequired)
                    {
                        DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                        if (_dtCot.Rows.Count > 0)
                        {
                            isAnyTestHasStarted = true;
                            isCotinineRepeatRequired = OnScreeningHelper.CheckIfUrineCotinineRepeatRequired(studyId, ValueOfKey);
                            if (isCotinineRepeatRequired || string.IsNullOrEmpty(_dtCot.Rows[0]["CotinineStartTime"].ToString()))
                            {
                                int id = int.Parse(_dtCot.Rows[0]["Id"].ToString());
                                SqlParameter _p1 = new SqlParameter("@CotinineStartTime", null);
                                _p1.Value = testStartTime;
                                SqlParameter _p2 = new SqlParameter("@Id", id);
                                SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2 };
                                db.ExecuteUpdateQuery("spUpdateScreeningCotinineTestResult", _updateParams, true);
                                _firstTimeStartTimeReading = true;
                                _message = "Urine Test(s) Start Time has been saved successfully.";
                            }
                        }

                    }

                    #endregion

                    #region HCG       
                    if (hcgRequired && txtGenders.Text.Trim().ToUpper().Equals("FEMALE"))
                    {
                        DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                        if (_dtHCG.Rows.Count > 0)
                        {
                            isAnyTestHasStarted = true;
                            isHCGRepeatRequired = OnScreeningHelper.CheckIfUrineHCGRepeatRequired(studyId, ValueOfKey);
                            if (isHCGRepeatRequired || string.IsNullOrEmpty(_dtHCG.Rows[0]["hCGStartTime"].ToString()))
                            {
                                int id = int.Parse(_dtHCG.Rows[0]["Id"].ToString());
                                SqlParameter _p1 = new SqlParameter("@hCGStartTime", null);
                                _p1.Value = testStartTime;
                                SqlParameter _p2 = new SqlParameter("@Id", id);
                                SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2 };
                                db.ExecuteUpdateQuery("spUpdateScreeningHCGTestResult", _updateParams, true);
                                _firstTimeStartTimeReading = true;
                                _message = "Urine Test(s) Start Time has been saved successfully.";
                            }
                        }
                    }
                    #endregion
                    db.CommitTransaction();
                    db.CloseConnection();
                    if (isAnyTestHasStarted)
                    {
                        if (!string.IsNullOrEmpty(_message))
                        {
                            HelperFunctions.ShowMessageBox(_message, "Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            GetUrine(ValueOfKey);
                        }
                    }
                    else
                        HelperFunctions.ShowMessageBox("Urine test kits have not been verified yet.", "Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadUrineTestsResultReadingTime()
        {
            try
            {
                string _items = string.Empty;
                if (hcgRequired && txtGenders.Text.Trim().ToUpper().Equals("FEMALE"))
                {
                    if (string.IsNullOrEmpty(tpHCGReadingTime.Value.ToString()))
                    {
                        DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                        if (!IsHCGResultReadingTimeCorrect())
                        {
                            _items += "hCG Pregnancy\n";
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_dtHCG.Rows[0]["hCGStartTime"].ToString()) && string.IsNullOrEmpty(_dtHCG.Rows[0]["hCGReadingTime"].ToString()))
                            {
                                tpHCGReadingTime.Value = DateTime.Now;
                            }
                        }
                    }
                }
                if (cotinineRequired)
                {
                    if (string.IsNullOrEmpty(tpCotReadingTime.Value.ToString()))
                    {
                        DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                        if (!IsCotinineResultReadingTimeCorrect())
                            _items += "Cotinine\n";
                        else
                        {
                            if (!string.IsNullOrEmpty(_dtCot.Rows[0]["CotinineStartTime"].ToString()) && string.IsNullOrEmpty(_dtCot.Rows[0]["CotinineReadingTime"].ToString()))
                            {
                                tpCotReadingTime.Value = DateTime.Now;
                            }
                        }
                    }
                }
                if (drugRequired)
                {
                    if (string.IsNullOrEmpty(tpDrugReadingTime.Value.ToString()))
                    {
                        DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                        if (!IsDrugAbuseResultReadingTimeCorrect())
                            _items += "Drug Abuse";
                        else
                        {
                            if (!string.IsNullOrEmpty(_dtDrug.Rows[0]["DrugAbuseTestStartTime"].ToString()) && string.IsNullOrEmpty(_dtDrug.Rows[0]["DrugAbuseReadingTime"].ToString()))
                            {
                                tpDrugReadingTime.Value = DateTime.Now;
                            }
                        }
                    }
                }
                if (!string.IsNullOrEmpty(_items))
                    HelperFunctions.ShowMessageBox("Result reading time is not in range for: \n" + _items, "Screening-Urine", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening-Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private bool IsHCGResultReadingTimeCorrect(DateTime? readingTime = null)
        {
            bool output = default(bool);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    //SqlConnection con = dbCon.GetConnection();
                    if (readingTime == null)
                        readingTime = DateTime.Now;
                    string selectQuery = "select dbo.fnIsScreeningHCGResultReadingTimeCorrect('" + studyId + "','" + ValueOfKey + "','" + readingTime + "')";
                    output = dbCon.ExecuteScalarFunction(selectQuery, null, output);
                    //SqlCommand com = new SqlCommand(selectQuery, con);
                    //output = (Boolean)com.ExecuteScalar();
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }
        private bool IsDrugAbuseResultReadingTimeCorrect(DateTime? readingTime = null)
        {
            bool output = default(bool);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    // SqlConnection con = dbCon.GetConnection();
                    if (readingTime == null)
                        readingTime = DateTime.Now;
                    string selectQuery = "select dbo.fnIsScreeningDrugAbuseResultReadingTimeCorrect('" + studyId + "','" + ValueOfKey + "','" + readingTime + "')";
                    //SqlCommand com = new SqlCommand(selectQuery, con);
                    //output = (Boolean)com.ExecuteScalar();                    
                    output = dbCon.ExecuteScalarFunction(selectQuery, null, output);
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }
        private bool IsCotinineResultReadingTimeCorrect(DateTime? readingTime = null)
        {
            bool output = default(bool);
            try
            {
                using (DbConnection dbCon = new DbConnection())
                {
                    dbCon.OpenConnection();
                    //SqlConnection con = dbCon.GetConnection();
                    if (readingTime == null)
                        readingTime = DateTime.Now;
                    string selectQuery = "select dbo.fnIsScreeningCotinineResultReadingTimeCorrect('" + studyId + "','" + ValueOfKey + "','" + readingTime + "')";
                    //SqlCommand com = new SqlCommand(selectQuery, con);
                    //output = (Boolean)com.ExecuteScalar();
                    output = dbCon.ExecuteScalarFunction(selectQuery, null, output);
                    dbCon.CloseConnection();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return output;
        }
        private bool isAllDrugAbuseTestsResultSelected()
        {
            int countChecked = 0;
            int countTotal = 0;
            try
            {
                Control[] _radioGroups = new Control[] {gbAmphetamines,
gbBarbiturates,
gbBenzodiazepines,
gbCannabinoids,
gbCocaine,
gbOpiates,
gbPhencyclidine,
gbTrycyclicAntidepressant,
gbMethadone};
                foreach (Control ctrl in _radioGroups)
                {
                    foreach (Control ctrl1 in ctrl.Controls)
                    {
                        if (ctrl1.GetType() == typeof(RadRadioButton))
                        {
                            countTotal++;
                            RadRadioButton b = (RadRadioButton)ctrl1;
                            if (b.IsChecked)
                                countChecked++;
                        }
                    }

                }
                if (countTotal / 2 != countChecked)
                    return false;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }
        private void ResetDrugAbuseTestsResultSelected()
        {
            try
            {
                foreach (Control ctrl in gbDrugAbuseResult.Controls)
                {
                    foreach (Control ctrl1 in ctrl.Controls)
                    {
                        if (ctrl1.GetType() == typeof(RadRadioButton))
                        {
                            RadRadioButton b = (RadRadioButton)ctrl1;
                            b.IsChecked = false;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// eSign Drug Abuse Test-Urine (Audit Trail)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSignDrugAbuse_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (OnScreeningHelper.IsUrineDrugAbuseTestDone(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Drug Abuse Test has already been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!IsScreeningUrineTestsProductVerified())
                {
                    HelperFunctions.ShowMessageBox("Please verify all test products first.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!isAllDrugAbuseTestsResultSelected())
                {
                    if (HelperFunctions.ShowMessageBox("All Drug Abuse Test results are not selected. Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }
                if (string.IsNullOrEmpty(tpDrugReadingTime.Value.ToString().Trim()))
                {
                    if (HelperFunctions.ShowMessageBox("Result reading time is missing.  Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }
                byte[] scannedDrugResult = null;
                bool? amphetamines = null;//default(bool);
                bool? barbiturates = null;
                bool? benzodiazepines = null;
                bool? cannabinoids = null; ;
                bool? cocaine = null;
                bool? methadone = null;
                bool? opiates = null;
                bool? phencyclidine = null;
                bool? trycyclic = null;

                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string eSignedBy = App.EsignedUser.UserName;
                if (rbAmN.IsChecked)
                {
                    amphetamines = false;
                }
                else if (rbAmP.IsChecked)
                {
                    amphetamines = true;
                }
                //
                if (rbBaN.IsChecked)
                {
                    barbiturates = false;
                }
                else if (rbBaP.IsChecked)
                {
                    barbiturates = true;
                }
                //
                if (rbBeN.IsChecked)
                {
                    benzodiazepines = false;
                }
                else if (rbBeP.IsChecked)
                {
                    benzodiazepines = true;
                }
                //
                if (rbCaN.IsChecked)
                {
                    cannabinoids = false;
                }
                else if (rbCaP.IsChecked)
                {
                    cannabinoids = true;
                }
                //
                if (rbCocN.IsChecked)
                {
                    cocaine = false;
                }
                else if (rbCocP.IsChecked)
                {
                    cocaine = true;
                }
                //
                if (rbMeN.IsChecked)
                {
                    methadone = false;
                }
                else if (rbMeP.IsChecked)
                {
                    methadone = true;
                }
                //
                if (rbOpN.IsChecked)
                {
                    opiates = false;
                }
                else if (rbPoP.IsChecked)
                {
                    opiates = true;
                }
                //
                if (rbPhN.IsChecked)
                {
                    phencyclidine = false;
                }
                else if (rbPhP.IsChecked)
                {
                    phencyclidine = true;
                }
                //
                if (rbTrN.IsChecked)
                {
                    trycyclic = false;
                }
                else if (rbTrP.IsChecked)
                {
                    trycyclic = true;
                }
                if (btnDrugResultFile.Tag != null)
                    scannedDrugResult = HelperFunctions.ConvertDocToBytes(btnDrugResultFile.Tag.ToString()); //ofdUploadedDoc.FileName                    

                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable dt = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                    if (dt.Rows.Count > 0)
                    {
                        if (string.IsNullOrEmpty(dt.Rows[0]["DrugAbuseTestStartTime"].ToString()))
                        {
                            HelperFunctions.ShowMessageBox("Tests start time has not been recorded yet. Please scan for start time.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            tpDrugReadingTime.ResetText();
                            tpDrugReadingTime.Value = null;
                            tpDrugStartTime.Value = null;
                            txtScanUrine.Focus();
                            ResetDrugAbuseTestsResultSelected();
                            return;
                        }
                        if (string.IsNullOrEmpty(dt.Rows[0]["DrugAbuseReadingTime"].ToString()) && !IsDrugAbuseResultReadingTimeCorrect())
                        {
                            if (HelperFunctions.ShowMessageBox("Reading time for Drug Abuse Test result is out of range.  Do you still want to cotinue(Y/N)?", "Screening Urine Test", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                            {
                                tpDrugReadingTime.ResetText();
                                tpDrugReadingTime.Value = null;
                                ResetDrugAbuseTestsResultSelected();
                                return;
                            }
                        }
                        List<SqlParameter> _updateParams = new List<SqlParameter>();
                        if (tpDrugReadingTime.Value != null)
                        {
                            DateTime _readingTime = Convert.ToDateTime(tpDrugReadingTime.Value); //tpDrugReadingTime.Value == null ? DateTime.Now.Date :
                            SqlParameter _p9 = new SqlParameter("@DrugAbuseReadingTime", _readingTime.ToString());
                            _updateParams.Add(_p9);
                        }
                        int id = int.Parse(dt.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@Amphetamines", amphetamines);
                        SqlParameter _p2 = new SqlParameter("@Barbiturates", barbiturates);
                        SqlParameter _p3 = new SqlParameter("@Benzodiazepines", benzodiazepines);
                        SqlParameter _p4 = new SqlParameter("@Cocaine", cocaine);
                        SqlParameter _p5 = new SqlParameter("@Methadone", methadone);
                        SqlParameter _p6 = new SqlParameter("@Opiates", opiates);
                        SqlParameter _p7 = new SqlParameter("@Phencyclidine", phencyclidine);
                        SqlParameter _p8 = new SqlParameter("@Trycyclic", trycyclic);
                        SqlParameter _p10 = new SqlParameter("@ScannedDrugResult", scannedDrugResult);
                        SqlParameter _p11 = new SqlParameter("@Id", id);
                        SqlParameter _p12 = new SqlParameter("@ResultSavedBy", App.EsignedUser.UserName);
                        SqlParameter _p13 = new SqlParameter("@ResultSavedDate", DateTime.Now);
                        SqlParameter _p14 = new SqlParameter("@Cannabinoids", cannabinoids);
                        _updateParams.AddRange(new SqlParameter[] { _p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p10, _p11, _p12, _p13, _p14 });
                        // SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p9, _p10, _p11, _p12, _p13, _p14 };
                        db.ExecuteUpdateQuery("spUpdateScreeningDrugAbuseTestResult", _updateParams.ToArray(), true);
                        HelperFunctions.ShowMessageBox("Drug Abuse Result has been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Test kits have not been verified yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    db.CloseConnection();
                }
                GetUrine(ValueOfKey);
                CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private bool IsScreeningUrineTestsProductVerified()
        {
            try
            {
                if (drugRequired && !cbDrugVerifyProduct.Checked)
                {
                    // HelperFunctions.ShowMessageBox("Please verify drug product info.", "Screening Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
                if (cotinineRequired && !cbCotinineVerifyProduct.Checked)
                {
                    // HelperFunctions.ShowMessageBox("Please verify cotinine product info.", "Screening Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
                if (txtGenders.Text.Trim().ToUpper() == "FEMALE" && hcgRequired && !cbHCGVerifyProduct.Checked)
                {
                    // HelperFunctions.ShowMessageBox("Please verify hCG product info.", "Screening Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }

        /// <summary>
        /// eSign Cotinine Test-Urine (Audit Trail)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSignCotinine_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (OnScreeningHelper.IsUrineCotinineTestDone(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Cotinine Test has already been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!IsScreeningUrineTestsProductVerified())
                {
                    HelperFunctions.ShowMessageBox("Please verify all test products first.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!rbConN.IsChecked && !rbConP.IsChecked)
                {
                    if (HelperFunctions.ShowMessageBox("Test result is not selected.Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }
                if (string.IsNullOrEmpty(tpCotReadingTime.Value.ToString().Trim()))
                {
                    if (HelperFunctions.ShowMessageBox("Result reading time is missing. Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }

                bool? cotinine = null; //    default(bool);
                byte[] scannedCotinineResult = null;
                if (rbConN.IsChecked)
                {
                    cotinine = false;
                }
                else if (rbConP.IsChecked)
                {
                    cotinine = true;
                }
                if (btnCotinineResultFile.Tag != null)
                    scannedCotinineResult = HelperFunctions.ConvertDocToBytes(btnCotinineResultFile.Tag.ToString()); //ofdUploadedDoc.FileName                    
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string eSignedBy = App.EsignedUser.UserName;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable dt = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                    if (dt.Rows.Count > 0)
                    {
                        if (string.IsNullOrEmpty(dt.Rows[0]["CotinineStartTime"].ToString()))
                        {
                            HelperFunctions.ShowMessageBox("Tests start time has not been recorded yet. Please scan for start time.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            tpCotReadingTime.ResetText();
                            tpCotReadingTime.Value = null;
                            tpCotStartTime.Value = null;
                            rbConN.IsChecked = false;
                            rbConP.IsChecked = false;
                            txtScanUrine.Focus();
                            return;
                        }
                        if (string.IsNullOrEmpty(dt.Rows[0]["CotinineReadingTime"].ToString()) && !IsCotinineResultReadingTimeCorrect())
                        {
                            if (HelperFunctions.ShowMessageBox("This is not a correct time for reading cotinine result. Do you still want to cotinue(Y/N)?", "Screening Urine Test", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                            {
                                tpCotReadingTime.ResetText();
                                tpCotReadingTime.Value = null;
                                rbConN.IsChecked = false;
                                rbConP.IsChecked = false;
                                return;
                            }
                        }
                        int id = int.Parse(dt.Rows[0]["Id"].ToString());
                        List<SqlParameter> _updateParams = new List<SqlParameter>();
                        SqlParameter _p1 = new SqlParameter("@Cotinine", cotinine);
                        _updateParams.Add(_p1);
                        if (tpCotReadingTime.Value != null)
                        {
                            DateTime _readingTime = Convert.ToDateTime(tpCotReadingTime.Value); //tpCotReadingTime.Value == null ? DateTime.Now.Date :
                            SqlParameter _p2 = new SqlParameter("@CotinineReadingTime", _readingTime.ToString());
                            _updateParams.Add(_p2);
                        }
                        SqlParameter _p3 = new SqlParameter("@ScannedCotinineResult", scannedCotinineResult);
                        _updateParams.Add(_p3);
                        SqlParameter _p4 = new SqlParameter("@Id", id);
                        _updateParams.Add(_p4);
                        SqlParameter _p5 = new SqlParameter("@ResultSavedBy", App.EsignedUser.UserName);
                        _updateParams.Add(_p5);
                        SqlParameter _p6 = new SqlParameter("@ResultSavedDate", DateTime.Now);
                        _updateParams.Add(_p6);
                        //SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4, _p5, _p6 };
                        db.ExecuteUpdateQuery("spUpdateScreeningCotinineTestResult", _updateParams.ToArray(), true);
                        HelperFunctions.ShowMessageBox("Cotinine Result has been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Test kits have not been verified yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    db.CloseConnection();
                }
                GetUrine(ValueOfKey);
                CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// eSign hCG Pregnancy Test-Urine (Audit Trail)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSignhCGPregnancy_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (OnScreeningHelper.IsUrinehCGPregnancyTestDone(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("HCG Pregnancy Test has already been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!IsScreeningUrineTestsProductVerified())
                {
                    HelperFunctions.ShowMessageBox("Please verify all test products first.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!rbHCGNeg.IsChecked && !rbHCGPos.IsChecked)
                {
                    if (HelperFunctions.ShowMessageBox("Test result is not selected. Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }
                if (string.IsNullOrEmpty(tpHCGReadingTime.Value.ToString().Trim()))
                {
                    if (HelperFunctions.ShowMessageBox("Result reading time is missing (scan bar code for time). Do you still want to cotinue(Y/N)?", "Check In Urine", MessageBoxButtons.OK, RadMessageIcon.Info).Equals(DialogResult.No))
                        return;
                }

                bool? hCG = null; // default(bool);
                byte[] scannedHCGResult = null;
                if (rbHCGNeg.IsChecked)
                {
                    hCG = false;
                }
                else if (rbHCGPos.IsChecked)
                {
                    hCG = true;
                }
                if (btnHCGResultFile.Tag != null)
                    scannedHCGResult = HelperFunctions.ConvertDocToBytes(btnHCGResultFile.Tag.ToString()); //ofdUploadedDoc.FileName                    

                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable dt = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                    if (dt.Rows.Count > 0)
                    {
                        if (string.IsNullOrEmpty(dt.Rows[0]["hCGStartTime"].ToString()))
                        {
                            HelperFunctions.ShowMessageBox("Tests start time has not been recorded yet. Please scan for start time.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            tpHCGReadingTime.ResetText();
                            tpHCGReadingTime.Value = null;
                            tpHCGStartTime.Value = null;
                            rbHCGNeg.IsChecked = false;
                            rbHCGPos.IsChecked = false;
                            txtScanUrine.Focus();
                            return;
                        }
                        if (string.IsNullOrEmpty(dt.Rows[0]["hCGReadingTime"].ToString()) && !IsHCGResultReadingTimeCorrect())
                        {
                            if (HelperFunctions.ShowMessageBox("Reading time for hCG result is out of range. Do you still want to cotinue(Y/N)?", "Screening Urine Test", MessageBoxButtons.YesNo, RadMessageIcon.Info).Equals(DialogResult.No))
                            {
                                tpHCGReadingTime.ResetText();
                                tpHCGReadingTime.Value = null;
                                rbHCGNeg.IsChecked = false;
                                rbHCGPos.IsChecked = false;
                                return;
                            }
                        }

                        int id = int.Parse(dt.Rows[0]["Id"].ToString());
                        List<SqlParameter> _updateParams = new List<SqlParameter>();
                        SqlParameter _p1 = new SqlParameter("@HCG", hCG);
                        _updateParams.Add(_p1);
                        if (tpHCGReadingTime.Value != null)
                        {
                            DateTime _readingTime = Convert.ToDateTime(tpHCGReadingTime.Value); //tpHCGReadingTime.Value == null ? DateTime.Now.Date : 
                            SqlParameter _p2 = new SqlParameter("@hCGReadingTime", _readingTime.ToString());
                            _updateParams.Add(_p2);
                        }
                        SqlParameter _p3 = new SqlParameter("@ScannedHCGResult", scannedHCGResult);
                        SqlParameter _p4 = new SqlParameter("@Id", id);
                        SqlParameter _p5 = new SqlParameter("@ResultSavedBy", App.EsignedUser.UserName);
                        SqlParameter _p6 = new SqlParameter("@ResultSavedDate", DateTime.Now);
                        _updateParams.Add(_p3); _updateParams.Add(_p4); _updateParams.Add(_p5); _updateParams.Add(_p6);
                        //SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4, _p5, _p6 };
                        db.ExecuteUpdateQuery("spUpdateScreeningHCGTestResult", _updateParams.ToArray(), true);
                        HelperFunctions.ShowMessageBox("HCG Result has been saved.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    }
                    else
                    {
                        HelperFunctions.ShowMessageBox("Test kits have not been verified yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    db.CloseConnection();
                }
                GetUrine(ValueOfKey);
                CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Retrieve Urine by SubjectKey
        /// </summary>
        /// <param name="subjectKey"></param>
        private void GetUrine(string subjectKey)
        {
            if (ddSubjects.SelectedIndex < 0)
            {
                return;
            }
            bool amphetamines = default(bool);
            bool barbiturates = default(bool);
            bool benzodiazepines = default(bool);
            bool cannabinoids = default(bool); ;
            bool cocaine = default(bool);
            bool methadone = default(bool);

            bool opiates = default(bool);
            bool phencyclidine = default(bool);
            bool trycyclic = default(bool);
            bool continine = default(bool);
            bool hCG = default(bool);
            bool isDrugRepeatRequired = default(bool);
            bool isCotinineRepeatRequired = default(bool);
            bool isHCGRepeatRequired = default(bool);
            string _performedBy = string.Empty;
            string _verifiedBy = string.Empty;
            try
            {
                ResetAllControls();
                ddCotinineProduct.SelectedIndex = 0;
                ddDrugProduct.SelectedIndex = 0;
                ddhcgProduct.SelectedIndex = 0;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    //***************** Drug Abuse Test **************
                    #region Drug Abuse Test 
                    if (drugRequired)
                    {
                        DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                        if (_dtDrug.Rows.Count > 0)
                        {
                            //***************** Urine Sample Collection **************
                            //new logic 20180203
                            DataRow dr = _dtDrug.Rows[0];
                            //repeat required fields
                            isDrugRepeatRequired = Convert.ToBoolean(dr["IsDrugAbuseRepeatRequired"].ToString());

                            if (!isDrugRepeatRequired)
                            {
                                if (!string.IsNullOrEmpty(dr["DrugAbuseTestStartTime"].ToString()))
                                {
                                    tpDrugStartTime.Value = Convert.ToDateTime(dr["DrugAbuseTestStartTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["DrugAbuseReadingTime"].ToString()))
                                {
                                    tpDrugReadingTime.Value = Convert.ToDateTime(dr["DrugAbuseReadingTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["IsDrugProductVerified"].ToString()))
                                {
                                    if (Convert.ToBoolean(dr["IsDrugProductVerified"].ToString()))
                                    {
                                        cbDrugVerifyProduct.CheckStateChanged -= new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                                        cbDrugVerifyProduct.Checked = true;
                                        ddDrugProduct.ReadOnly = true;
                                        cbDrugVerifyProduct.ReadOnly = true;
                                        cbDrugVerifyProduct.CheckStateChanged += new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                                    }
                                    else
                                    {
                                        cbDrugVerifyProduct.CheckStateChanged -= new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                                        cbDrugVerifyProduct.Checked = false;
                                        cbDrugVerifyProduct.ReadOnly = false;
                                        ddDrugProduct.ReadOnly = false;
                                        cbDrugVerifyProduct.CheckStateChanged += new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                                    }
                                }
                                var itemDrug = ddDrugProduct.Items.Where(i => i.Text.Equals(dr["TestProduct"].ToString())).FirstOrDefault();
                                if (itemDrug != null)
                                {
                                    ddDrugProduct.SelectedIndex = itemDrug.Index;
                                    txtLotNumberDrug.Text = itemDrug.Value.ToString();
                                    txtExpirDateDrug.Text = itemDrug.Tag.ToString();
                                }
                                lblSCUrineDrugPerformedBy.Text = dr["PerformedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["PerformedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["PerformedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineDrugPerformedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }
                                lblSCUrineDrugVerifiedBy.Text = dr["VerifiedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["VerifiedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["VerifiedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineDrugVerifiedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }

                                #region Results
                                if (!string.IsNullOrEmpty(dr["Amphetamines"].ToString()))
                                {
                                    amphetamines = Convert.ToBoolean(dr["Amphetamines"].ToString());
                                    if (amphetamines == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbAmN);
                                        rbAmN.IsChecked = true;
                                        //  EnableDisableCommonRadioCheckStateChanging(true, rbAmN);
                                    }
                                    else if (amphetamines == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbAmP);
                                        rbAmP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbAmP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Barbiturates"].ToString()))
                                {
                                    barbiturates = Convert.ToBoolean(dr["Barbiturates"].ToString());
                                    if (barbiturates == false)
                                    {
                                        //EnableDisableCommonRadioCheckStateChanging(false, rbBaN);
                                        rbBaN.IsChecked = true;
                                        // EnableDisableCommonRadioCheckStateChanging(true, rbBaN);
                                    }
                                    else if (barbiturates == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbBaP);
                                        rbBaP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbBaP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Benzodiazepines"].ToString()))
                                {
                                    benzodiazepines = Convert.ToBoolean(dr["Benzodiazepines"].ToString());
                                    if (benzodiazepines == false)
                                    {
                                        //EnableDisableCommonRadioCheckStateChanging(false, rbBeN);
                                        rbBeN.IsChecked = true;
                                        //  EnableDisableCommonRadioCheckStateChanging(true, rbBeN);
                                    }
                                    else if (benzodiazepines == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbBeP);
                                        rbBeP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbBeP);
                                    }
                                }

                                if (!string.IsNullOrEmpty(dr["Cannabinoids"].ToString()))
                                {
                                    cannabinoids = Convert.ToBoolean(dr["Cannabinoids"].ToString());
                                    if (cannabinoids == false)
                                    {
                                        //EnableDisableCommonRadioCheckStateChanging(false, rbCaN);
                                        rbCaN.IsChecked = true;
                                        //EnableDisableCommonRadioCheckStateChanging(true, rbCaN);
                                    }
                                    else if (cannabinoids == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbCaP);
                                        rbCaP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbCaP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Cocaine"].ToString()))
                                {
                                    cocaine = Convert.ToBoolean(dr["Cocaine"].ToString());
                                    if (cocaine == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbCocN);
                                        rbCocN.IsChecked = true;
                                        // EnableDisableCommonRadioCheckStateChanging(true, rbCocN);
                                    }
                                    else if (cocaine == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbCocP);
                                        rbCocP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbCocP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Methadone"].ToString()))
                                {
                                    methadone = Convert.ToBoolean(dr["Methadone"].ToString());
                                    if (methadone == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbMeN);
                                        rbMeN.IsChecked = true;
                                        // EnableDisableCommonRadioCheckStateChanging(true, rbMeN);
                                    }
                                    else if (methadone == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbMeP);
                                        rbMeP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbMeP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Opiates"].ToString()))
                                {
                                    opiates = Convert.ToBoolean(dr["Opiates"].ToString());
                                    if (opiates == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbOpN);
                                        rbOpN.IsChecked = true;
                                        // EnableDisableCommonRadioCheckStateChanging(true, rbOpN);
                                    }
                                    else if (opiates == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbPoP);
                                        rbPoP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbPoP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Phencyclidine"].ToString()))
                                {
                                    phencyclidine = Convert.ToBoolean(dr["Phencyclidine"].ToString());
                                    if (phencyclidine == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbPhN);
                                        rbPhN.IsChecked = true;
                                        // EnableDisableCommonRadioCheckStateChanging(true, rbPhN);
                                    }
                                    else if (phencyclidine == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbPhP);
                                        rbPhP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbPhP);
                                    }
                                }
                                if (!string.IsNullOrEmpty(dr["Trycyclic"].ToString()))
                                {
                                    trycyclic = Convert.ToBoolean(dr["Trycyclic"].ToString());
                                    if (trycyclic == false)
                                    {
                                        // EnableDisableCommonRadioCheckStateChanging(false, rbTrN);
                                        rbTrN.IsChecked = true;
                                        //  EnableDisableCommonRadioCheckStateChanging(true, rbTrN);
                                    }
                                    else if (trycyclic == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbTrP);
                                        rbTrP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbTrP);
                                    }
                                }
                                #endregion

                            }
                            else
                            {
                                cbDrugVerifyProduct.ReadOnly = false;
                            }
                        }
                    }

                    #endregion
                    //***************** Cotinine Test **************
                    #region Cotinine Test
                    if (cotinineRequired)
                    {
                        DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                        if (_dtCot.Rows.Count > 0)
                        {
                            DataRow dr = _dtCot.Rows[0];
                            isCotinineRepeatRequired = Convert.ToBoolean(dr["IsCotinineRepeatRequired"].ToString());
                            if (!isCotinineRepeatRequired)
                            {
                                if (!string.IsNullOrEmpty(dr["CotinineStartTime"].ToString()))
                                {
                                    tpCotStartTime.Value = Convert.ToDateTime(dr["CotinineStartTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["CotinineReadingTime"].ToString()))
                                {
                                    tpCotReadingTime.Value = Convert.ToDateTime(dr["CotinineReadingTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["IsCotinineProductVerified"].ToString()))
                                {
                                    if (Convert.ToBoolean(dr["IsCotinineProductVerified"].ToString()))
                                    {
                                        cbCotinineVerifyProduct.CheckStateChanged -= new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                                        cbCotinineVerifyProduct.Checked = true;
                                        cbCotinineVerifyProduct.ReadOnly = true;
                                        ddCotinineProduct.ReadOnly = true;
                                        cbCotinineVerifyProduct.CheckStateChanged += new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                                    }
                                    else
                                    {
                                        cbCotinineVerifyProduct.CheckStateChanged -= new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                                        cbCotinineVerifyProduct.Checked = false;
                                        cbCotinineVerifyProduct.ReadOnly = false;
                                        ddCotinineProduct.ReadOnly = false;
                                        cbCotinineVerifyProduct.CheckStateChanged += new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                                    }
                                }
                                var itemCotinine = ddCotinineProduct.Items.Where(i => i.Text.Equals(dr["TestProduct"].ToString())).FirstOrDefault();
                                if (itemCotinine != null)
                                {
                                    ddCotinineProduct.SelectedIndex = itemCotinine.Index;
                                    txtLotNumberCotinine.Text = itemCotinine.Value.ToString();
                                    txtExpirDateCotinine.Text = itemCotinine.Tag.ToString();
                                }
                                if (!string.IsNullOrEmpty(dr["Cotinine"].ToString()))
                                {
                                    continine = Convert.ToBoolean(dr["Cotinine"].ToString());
                                    if (continine == false)
                                    {
                                        rbConN.IsChecked = true;
                                    }
                                    else if (continine == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbConP);
                                        rbConP.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbConP);
                                    }

                                }
                                lblSCUrineCotPerformedBy.Text = dr["PerformedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["PerformedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["PerformedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineCotPerformedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }
                                lblSCUrineCotVerifiedBy.Text = dr["VerifiedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["VerifiedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["VerifiedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineCotVerifiedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }
                                #region Review
                                txtUrineReviewComments.Text = dr["ReviewComments"].ToString();
                                #endregion
                            }
                            else
                                cbCotinineVerifyProduct.ReadOnly = false;
                        }
                    }



                    #endregion
                    //***************** hCG Pregnancy Test **************
                    #region hCG Pregnancy Test
                    if (hcgRequired)
                    {
                        DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                        if (_dtHCG.Rows.Count > 0)
                        {
                            DataRow dr = _dtHCG.Rows[0];
                            isHCGRepeatRequired = Convert.ToBoolean(dr["IsHCGRepeatRequired"].ToString());
                            if (!isHCGRepeatRequired)
                            {
                                if (!string.IsNullOrEmpty(dr["hCGStartTime"].ToString()))
                                {
                                    tpHCGStartTime.Value = Convert.ToDateTime(dr["hCGStartTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["hCGReadingTime"].ToString()))
                                {
                                    tpHCGReadingTime.Value = Convert.ToDateTime(dr["hCGReadingTime"].ToString());
                                }
                                if (!string.IsNullOrEmpty(dr["IsHCGProductVerified"].ToString()))
                                {
                                    if (Convert.ToBoolean(dr["IsHCGProductVerified"].ToString()))
                                    {
                                        cbHCGVerifyProduct.CheckStateChanged -= new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                                        cbHCGVerifyProduct.Checked = true;
                                        cbHCGVerifyProduct.ReadOnly = true;
                                        ddhcgProduct.ReadOnly = true;
                                        cbHCGVerifyProduct.CheckStateChanged += new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                                    }
                                    else
                                    {
                                        cbHCGVerifyProduct.CheckStateChanged -= new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                                        cbHCGVerifyProduct.Checked = false;
                                        cbHCGVerifyProduct.ReadOnly = false;
                                        ddhcgProduct.ReadOnly = false;
                                        cbHCGVerifyProduct.CheckStateChanged += new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                                    }
                                }
                                var itemHCG = ddhcgProduct.Items.Where(i => i.Text.Equals(dr["TestProduct"].ToString())).FirstOrDefault();
                                if (itemHCG != null)
                                {
                                    ddhcgProduct.SelectedIndex = itemHCG.Index;
                                    txtLotNumberhCG.Text = itemHCG.Value.ToString();
                                    txtExpirhCG.Text = itemHCG.Tag.ToString();
                                }
                                if (!string.IsNullOrEmpty(dr["HCG"].ToString()))
                                {
                                    hCG = Convert.ToBoolean(dr["HCG"].ToString());

                                    if (hCG == false)
                                    {
                                        rbHCGNeg.IsChecked = true;
                                    }
                                    else if (hCG == true)
                                    {
                                        EnableDisableCommonRadioCheckStateChanging(false, rbHCGPos);
                                        rbHCGPos.IsChecked = true;
                                        EnableDisableCommonRadioCheckStateChanging(true, rbHCGPos);
                                    }
                                }
                                lblSCUrineHCGPerformedBy.Text = dr["PerformedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["PerformedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["PerformedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineHCGPerformedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }
                                lblSCUrineHCGVerifiedBy.Text = dr["VerifiedBy"].ToString();
                                if (!string.IsNullOrEmpty(dr["VerifiedDate"].ToString()))
                                {
                                    DateTime _esignedDate = default(DateTime);
                                    if (DateTime.TryParse(dr["VerifiedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                    {
                                        lblSCUrineHCGVerifiedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                    }
                                }
                                #region Review
                                txtUrineReviewComments.Text = dr["ReviewComments"].ToString();
                                #endregion
                            }
                            else
                                cbHCGVerifyProduct.ReadOnly = false;
                        }
                    }

                    #endregion

                    LoadUrineProceedFailInfo();
                    db.CloseConnection();
                    string InvestigatorComment = InvestigatorScreeningHelper.UrineInvestigatorComment(studyId, subjectKey);
                    if (!string.IsNullOrEmpty(InvestigatorComment))
                    {
                        lblSCDrugPIComment.Visible = true;
                        txtUrineInvestigatorComment.Visible = true;
                        txtUrineInvestigatorComment.Text = InvestigatorComment;
                    }
                    else
                    {
                        lblSCDrugPIComment.Visible = false;
                        txtUrineInvestigatorComment.Visible = false;
                    }
                }
                if (isDrugRepeatRequired || isCotinineRepeatRequired || isHCGRepeatRequired)
                    LoadUrineRepeatReason();
                else
                {
                    lblSCUrineRepeatCommentBar.Visible = false;
                    //lblSCReasonForUrineRepeat.Visible = false;
                    //lblSCUrineRepeatComment.Visible = false;
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadUrineProceedFailInfo()
        {
            var _pfInfo = OnScreeningStatusHelper.GetSubjectProceedFailPerformedInfoByTab(studyId, ValueOfKey, "pgvUrineTests");
            DateTime _performedDate = new DateTime();
            if (_pfInfo.Count > 0)
            {
                lblSCDrugTestPFBy.Text = _pfInfo["PerformedBy"];
                if (DateTime.TryParse(_pfInfo["PerformedDate"], out _performedDate))
                {
                    lblSCDrugTestPFDate.Text = _performedDate.ToString("MMM dd, yyyy HH:mm");
                }
            }
        }

        /// <summary>
        /// Checks if urine test has been esigned
        /// </summary>
        /// <param name="subjectKey"></param>
        private void CheckUrineTestEsign(string subjectKey, SubjectStatusCode.Status _status = SubjectStatusCode.Status.None)
        {
            if (!IsStudyIDSelected() || string.IsNullOrEmpty(subjectKey))
                return;
            if (_SelectedPage.Equals(pgvUrineTests))
                GetUrine(ValueOfKey);
            SubjectStatusCode.Status urineTestStatus = OnScreeningHelper.GetScreeningSubjectStatusByTab(studyId, ValueOfKey, pgvUrineTests.Name);
            gbUrineTestParent.Visible = true;
            bool UrineESigned = OnScreeningHelper.IsUrineSigned(subjectKey, studyId);
            DisableDrugAbuseTestControls();
            DisableCotinineTestControls();
            DisablehCGPregnancyTestControls();
            if (UrineESigned == true)
            {
                if (_SelectedPage.Equals(pgvUrineTests))
                {
                    CommonHelpers.SetReadOnlyProperties(gbUrineTestEsigns, true);
                    CommonHelpers.SetReadOnlyProperties(GBDrugAbuse, true);
                    CommonHelpers.SetReadOnlyProperties(GBCotinineTest, true);
                    CommonHelpers.SetReadOnlyProperties(GBhCGPregnancy, true);
                    CommonHelpers.SetReadOnlyProperties(gbDrugAbuseResult, true);
                    CommonHelpers.SetReadOnlyProperties(gbCotinineResult, true);
                    CommonHelpers.SetReadOnlyProperties(gbHCGResult, true);
                }
            }
            else
            {
                IsAllTasksBeforeIECCEsigned = false;
                if (_SelectedPage.Equals(pgvUrineTests))
                {
                    if (urineTestStatus != SubjectStatusCode.Status.Proceed)
                        CommonHelpers.SetReadOnlyProperties(gbUrineTestEsigns, false);
                    else
                        CommonHelpers.SetReadOnlyProperties(gbUrineTestEsigns, true);
                    //CommonHelpers.SetReadOnlyProperties(gbDrugAbuseResult, false);
                    //CommonHelpers.SetReadOnlyProperties(gbCotinineResult, false);
                    //CommonHelpers.SetReadOnlyProperties(gbHCGResult, false);
                    if (drugRequired && !OnScreeningHelper.IsUrineDrugAbuseTestDone(subjectKey, studyId) && urineTestStatus != SubjectStatusCode.Status.Proceed)
                    {
                        EnableDrugAbuseTestControls();
                        List<Control> _exceptionControls = new List<Control>();
                        _exceptionControls.Add(tpDrugStartTime);
                        _exceptionControls.Add(tpDrugReadingTime);
                        CommonHelpers.SetReadOnlyWithException(gbDrugAbuseResult, _exceptionControls, false);
                        btnDrugResultFile.Enabled = true;
                        btnSignDrugAbuse.Enabled = true;
                    }
                    else
                    {
                        btnDrugResultFile.Enabled = false;
                        btnSignDrugAbuse.Enabled = false;
                        CommonHelpers.SetReadOnlyProperties(gbDrugAbuseResult, true);
                        CommonHelpers.SetReadOnlyProperties(GBDrugAbuse, true);
                    }
                    if (cotinineRequired && !OnScreeningHelper.IsUrineCotinineTestDone(subjectKey, studyId) && urineTestStatus != SubjectStatusCode.Status.Proceed)
                    {
                        EnableCotinineTestControls();
                        btnCotinineResultFile.Enabled = true;
                        btnSignCotinine.Enabled = true;
                        List<Control> _exceptionControls = new List<Control>();
                        _exceptionControls.Add(tpCotStartTime);
                        _exceptionControls.Add(tpCotReadingTime);
                        CommonHelpers.SetReadOnlyWithException(gbCotinineResult, _exceptionControls, false);

                    }
                    else
                    {
                        btnCotinineResultFile.Enabled = false;
                        btnSignCotinine.Enabled = false;
                        CommonHelpers.SetReadOnlyProperties(gbCotinineResult, true);
                        CommonHelpers.SetReadOnlyProperties(GBCotinineTest, true);
                    }
                    if (hcgRequired && txtGenders.Text.Trim().ToUpper().Equals("FEMALE") && !OnScreeningHelper.IsUrinehCGPregnancyTestDone(subjectKey, studyId) && urineTestStatus != SubjectStatusCode.Status.Proceed)
                    {
                        EnablehCGPregnancyTestControls();
                        cbHCGVerifyProduct.ReadOnly = false;
                        btnHCGResultFile.Enabled = true;
                        btnSignhCGPregnancy.Enabled = true;
                        List<Control> _exceptionControls = new List<Control>();
                        _exceptionControls.Add(tpHCGStartTime);
                        _exceptionControls.Add(tpHCGReadingTime);
                        CommonHelpers.SetReadOnlyWithException(gbHCGResult, _exceptionControls, false);
                    }
                    else
                    {
                        btnHCGResultFile.Enabled = false;
                        btnSignhCGPregnancy.Enabled = false;
                        CommonHelpers.SetReadOnlyProperties(gbHCGResult, true);
                        CommonHelpers.SetReadOnlyProperties(GBhCGPregnancy, true);
                    }
                }
            }
            if (urineTestStatus == SubjectStatusCode.Status.Proceed)
            {
                //txtUrinePFComment.ReadOnly = true;
                //btnUrineProceed.Enabled = false;
                //btnUrineFail.Enabled = false;
                CommonHelpers.SetCompleteIncompleteImage(pgvUrineTests, true);
                CommonHelpers.SetReadOnlyProperties(rpnlUrineTestFooter, true);
            }
            else
            {
                //txtUrinePFComment.ReadOnly = false;
                //btnUrineProceed.Enabled = true;
                //btnUrineFail.Enabled = true;  
                CommonHelpers.SetCompleteIncompleteImage(pgvUrineTests, false);
                CommonHelpers.SetReadOnlyProperties(rpnlUrineTestFooter, false);
            }
            GC.Collect();
            //}
        }

        /// <summary>
        /// Hides Urine Test controls
        /// </summary>
        private void HideUrineTestControls()
        {
            GBDrugAbuse.Visible = false;
            GBCotinineTest.Visible = false;
            rpnlUrineTestFooter.Visible = false;
            GBhCGPregnancy.Visible = false;
        }

        /// <summary>
        /// show urine test controls
        /// </summary>
        private void ShowUrineTestControls()
        {
            GBDrugAbuse.Visible = true;
            GBCotinineTest.Visible = true;
            rpnlUrineTestFooter.Visible = true;
            GBhCGPregnancy.Visible = true;
        }
        /// <summary>
        /// Disables drug abuse test controls
        /// </summary>
        private void DisableDrugAbuseTestControls()
        {
            List<Control> _noLock = new List<Control>();
            if (!OnScreeningHelper.IsUrineDrugAbuseProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(cbDrugVerifyProduct);
                _noLock.Add(ddDrugProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBDrugAbuse, _noLock, true);
        }

        /// <summary>
        /// Enables drug abuse test controls
        /// </summary>
        private void EnableDrugAbuseTestControls()
        {
            List<Control> _noLock = new List<Control>();
            _noLock.Add(txtLotNumberDrug);
            _noLock.Add(txtExpirDateDrug);
            if (OnScreeningHelper.IsUrineDrugAbuseProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(ddDrugProduct);
                _noLock.Add(cbDrugVerifyProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBDrugAbuse, _noLock, false);
        }

        /// <summary>
        /// Disables cotnine test controls
        /// </summary>
        private void DisableCotinineTestControls()
        {
            List<Control> _noLock = new List<Control>();
            if (!OnScreeningHelper.IsUrineCotinineProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(cbCotinineVerifyProduct);
                _noLock.Add(ddCotinineProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBCotinineTest, _noLock, true);
        }

        /// <summary>
        /// Enables continine test controls
        /// </summary>
        private void EnableCotinineTestControls()
        {
            List<Control> _noLock = new List<Control>();
            _noLock.Add(txtLotNumberCotinine);
            _noLock.Add(txtExpirDateCotinine);
            if (OnScreeningHelper.IsUrineCotinineProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(ddCotinineProduct);
                _noLock.Add(cbCotinineVerifyProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBCotinineTest, _noLock, false);
        }

        /// <summary>
        /// Disables hCGPregnancy Test Controls
        /// </summary>
        private void DisablehCGPregnancyTestControls()
        {
            List<Control> _noLock = new List<Control>();
            if (!OnScreeningHelper.IsUrineHCGProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(cbHCGVerifyProduct);
                _noLock.Add(ddhcgProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBhCGPregnancy, _noLock, true);
        }

        /// <summary>
        /// Enables hCGPregnancy Test Controls
        /// </summary>
        private void EnablehCGPregnancyTestControls()
        {
            List<Control> _noLock = new List<Control>();
            _noLock.Add(txtLotNumberhCG);
            _noLock.Add(txtExpirhCG);
            if (OnScreeningHelper.IsUrineHCGProductVerified(ValueOfKey, studyId))
            {
                _noLock.Add(ddhcgProduct);
                _noLock.Add(cbHCGVerifyProduct);
            }
            CommonHelpers.SetReadOnlyWithException(GBhCGPregnancy, _noLock, false);
        }


        /// <summary>
        /// Disables Urine Review Controls
        /// </summary>
        private void DisableUrineReviewControls()
        {
            foreach (Control ctr in rpnlUrineTestFooter.Controls)
            {
                ctr.Enabled = false;
            }
        }

        /// <summary>
        /// Enables Urine Review Controls
        /// </summary>
        private void EnableUrineReviewControls()
        {
            rpnlUrineTestFooter.Enabled = true;
            foreach (Control ctr in rpnlUrineTestFooter.Controls)
            {
                ctr.Enabled = true;
            }
        }

        /// <summary>
        /// Durg Abuse Test required/not required toggle (Required checkbox)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbRequiredDrug_CheckStateChanged(object sender, EventArgs e)
        {

        }

        /// <summary>
        /// Durg Abuse Test required/not required toggle (Not Required checkbox)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbDrugVerifyProduct_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (cbDrugVerifyProduct.Checked)
                {
                    if (!ValidateCommonScreeningRequiredFields())
                    {
                        cbDrugVerifyProduct.CheckStateChanged -= new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                        cbDrugVerifyProduct.Checked = false;
                        cbDrugVerifyProduct.CheckStateChanged += new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                        return;
                    }
                    if (ddDrugProduct.SelectedIndex < 0 || ddDrugProduct.SelectedItem == null || string.IsNullOrEmpty(txtLotNumberDrug.Text.Trim()) || string.IsNullOrEmpty(txtExpirDateDrug.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please verify and select product", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        SqlParameter _sp1 = new SqlParameter("@studyId", studyId);
                        SqlParameter _sp2 = new SqlParameter("@subjectKey", ValueOfKey);
                        SqlParameter[] _spsSelect = new SqlParameter[] { _sp1, _sp2 };
                        DataTable dt = db.ExecuteSelectQuery("spGetMostRecentSCUrineSampleCollection", _spsSelect, true);

                        if (dt.Rows.Count > 0)
                        {
                            int _testId = int.Parse(dt.Rows[0]["ScreeningUrineTestId"].ToString());
                            int _sampleId = int.Parse(dt.Rows[0]["Id"].ToString());
                            bool _drugRepeatRequired = default(bool);
                            if (!string.IsNullOrEmpty(dt.Rows[0]["IsDrugAbuseRepeatRequired"].ToString()))
                            {
                                _drugRepeatRequired = Convert.ToBoolean(dt.Rows[0]["IsDrugAbuseRepeatRequired"].ToString());
                            }
                            string checkExistResult = "select * from ScreeningUrineDrugAbuseTestResult where ScreeningUrineSampleId=" + _sampleId + " and ScreeningUrineTestId=" + _testId;
                            DataTable _dtResult = db.ExecuteSelectQuery(checkExistResult, null, false);
                            db.BeginTransaction();
                            if (_dtResult.Rows.Count > 0 && !_drugRepeatRequired)
                            {
                                int id = int.Parse(_dtResult.Rows[0]["Id"].ToString());
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrineDrugAbuseTestResult] SET IsDrugProductVerified=1,TestProduct='" + ddDrugProduct.Text.Trim() + "',LotNumber='" + txtLotNumberDrug.Text.Trim() + "',ExpireDate='" + txtExpirDateDrug.Text.Trim() + "' WHERE Id=" + id);
                                db.ExecuteUpdateQuery(UpdateQuery, null, false);
                            }
                            else
                            {
                                string _insertQuery = string.Format(@"Insert into [dbo].[ScreeningUrineDrugAbuseTestResult](IsDrugProductVerified,TestProduct,LotNumber,ExpireDate,CreatedBy,CreatedDate,ScreeningUrineTestId,ScreeningUrineSampleId) values(1,'" + ddDrugProduct.Text.Trim() + "','" + txtLotNumberDrug.Text.Trim() + "','" + txtExpirDateDrug.Text.Trim() + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "'," + _testId + "," + _sampleId + ")");
                                db.ExecuteInsertQuery(_insertQuery, null, false);
                            }
                            string _updateUrineTest = string.Format(@"UPDATE [dbo].[ScreeningUrineTest] SET IsDrugAbuseRepeatRequired=0, ModifiedBy='" + App.EsignedUser.UserName + "',ModifiedDate='" + DateTime.Now + "' WHERE Id=" + _testId);
                            db.ExecuteUpdateQuery(_updateUrineTest, null, false);
                            db.CommitTransaction();
                            db.CloseConnection();
                            GetUrine(ValueOfKey);
                        }
                        else
                        {
                            HelperFunctions.ShowMessageBox("Urine sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            cbDrugVerifyProduct.CheckStateChanged -= new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                            cbDrugVerifyProduct.Checked = false;
                            cbDrugVerifyProduct.CheckStateChanged += new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                cbDrugVerifyProduct.CheckStateChanged -= new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                cbDrugVerifyProduct.Checked = false;
                cbDrugVerifyProduct.CheckStateChanged += new System.EventHandler(cbDrugVerifyProduct_CheckStateChanged);
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }
        /// <summary>
        /// Urine Tests Review esign button. Updates data.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbtnReviewedByESign_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (!ValidateCommonScreeningRequiredFields())
            //        return;

            //    _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //    bool isSampleTaken = OnScreeningHelper.IsUrineSampleCollectionSigned(_subjectKey.ToString(), studyId);
            //    bool isCotinineTestDone = OnScreeningHelper.IsUrineCotinineTestDone(_subjectKey.ToString(), studyId);
            //    bool isDrugAbuseTestDone = OnScreeningHelper.IsUrineDrugAbuseTestDone(_subjectKey.ToString(), studyId);
            //    bool isHCGTestDone = OnScreeningHelper.IsUrinehCGPregnancyTestDone(_subjectKey.ToString(), studyId);
            //    bool isUrineTestPerformedBySigned = OnScreeningHelper.IsUrineTestsSigned(_subjectKey.ToString(), studyId);
            //    bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
            //    bool isUrineTestResultsReviewed = OnScreeningHelper.IsUrineTestResultsReviewed(_subjectKey.ToString(), studyId);
            //    if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
            //    {
            //        HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //        return;
            //    }
            //    if (!isSampleTaken || (drugRequired == 1 && !isDrugAbuseTestDone) || (cotinineRequired == 1 && !isCotinineTestDone) || (hcgRequired == 1 && txtGenders.Text.Trim().ToUpper() == "FEMALE" && !isHCGTestDone) || !isUrineTestPerformedBySigned || !isUrineTestResultsVerified)
            //    {
            //        HelperFunctions.ShowMessageBox("Please complete tests, e-sign and verify.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        return;
            //    }
            //    if (isUrineTestResultsReviewed)
            //    {
            //        HelperFunctions.ShowMessageBox("Urine tests have already been reviewed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        return;
            //    }
            //    string _successMessage = string.Empty;
            //    string reviewedComments = txtUrineReviewComments.Text.Trim();
            //    moduleName = "Urine Tests";
            //    tabName = "E-Sign Urine Test";
            //    reason = String.Format("Review Urine Test eSign");
            //    string actions = string.Format("Screening Urine (Review)-eSigned by :'" + App.EsignedUser.UserName + "'");

            //    using (DbConnection db = new DbConnection())
            //    {
            //        db.OpenConnection();
            //        DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
            //        DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
            //        DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
            //        if (_dtDrug.Rows.Count == 0 && _dtCot.Rows.Count == 0 && _dtHCG.Rows.Count == 0)
            //        {
            //            HelperFunctions.ShowMessageBox("Urine test results have not been saved yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            return;
            //        }
            //        if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
            //        {
            //            return;
            //        }
            //        #region Drug Abuse  
            //        db.BeginTransaction();
            //        if (_dtDrug.Rows.Count > 0)
            //        {
            //            int id = int.Parse(_dtDrug.Rows[0]["Id"].ToString());
            //            SqlParameter _p1 = new SqlParameter("@ReviewedBy", App.EsignedUser.UserName);
            //            SqlParameter _p2 = new SqlParameter("@ReviewedDate", DateTime.Now);
            //            SqlParameter _p3 = new SqlParameter("@Id", id);
            //            SqlParameter _p4 = new SqlParameter("@ReviewComments", txtUrineReviewComments.Text.Trim());
            //            SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4 };
            //            db.ExecuteUpdateQuery("spUpdateScreeningDrugAbuseTestResult", _updateParams, true);
            //            //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            _successMessage = "Urine Test(s) have been performed and e-signed successfully.";
            //        }
            //        #endregion

            //        #region Cotinine                    
            //        if (_dtCot.Rows.Count > 0)
            //        {
            //            int id = int.Parse(_dtCot.Rows[0]["Id"].ToString());
            //            SqlParameter _p1 = new SqlParameter("@ReviewedBy", App.EsignedUser.UserName);
            //            SqlParameter _p2 = new SqlParameter("@ReviewedDate", DateTime.Now);
            //            SqlParameter _p3 = new SqlParameter("@Id", id);
            //            SqlParameter _p4 = new SqlParameter("@ReviewComments", txtUrineReviewComments.Text.Trim());
            //            SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4 };
            //            db.ExecuteUpdateQuery("spUpdateScreeningCotinineTestResult", _updateParams, true);
            //            // HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            _successMessage = "Urine Test(s) have been performed and e-signed successfully.";
            //        }
            //        #endregion

            //        #region HCG                    
            //        if (_dtHCG.Rows.Count > 0)
            //        {
            //            int id = int.Parse(_dtHCG.Rows[0]["Id"].ToString());
            //            SqlParameter _p1 = new SqlParameter("@ReviewedBy", App.EsignedUser.UserName);
            //            SqlParameter _p2 = new SqlParameter("@ReviewedDate", DateTime.Now);
            //            SqlParameter _p3 = new SqlParameter("@Id", id);
            //            SqlParameter _p4 = new SqlParameter("@ReviewComments", txtUrineReviewComments.Text.Trim());
            //            SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3, _p4 };
            //            db.ExecuteUpdateQuery("spUpdateScreeningHCGTestResult", _updateParams, true);
            //            //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            _successMessage = "Urine Test(s) have been performed and e-signed successfully.";
            //        }
            //        db.CommitTransaction();
            //        #endregion                   
            //        db.CloseConnection();
            //        if (!string.IsNullOrEmpty(_successMessage))
            //            HelperFunctions.ShowMessageBox(_successMessage, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //        GetUrine(_subjectKey.ToString());
            //        CheckeSign(_subjectKey.ToString());
            //    }
            //}
            //catch (SqlException ex)
            //{
            //    
            //    HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test (Review) eSign", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}

        }

        private void btnUrineProceed_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (hcgRequired && txtGenders.Text.Trim().Equals("Female") && rbHCGPos.IsChecked)
                {
                    if (HelperFunctions.ShowMessageBox("hCG pregnancy result is positive. Would you like to proceed? (Y/N)", "Drug Test", MessageBoxButtons.YesNo, RadMessageIcon.Exclamation).Equals(DialogResult.No))
                        return;
                }
                if (cotinineRequired && rbConP.IsChecked)
                {
                    if (HelperFunctions.ShowMessageBox("Cotinine result is positive. Would you like to proceed? (Y/N)", "Drug Test", MessageBoxButtons.YesNo, RadMessageIcon.Exclamation).Equals(DialogResult.No))
                        return;
                }
                Control[] _radioGroups = new Control[] {gbAmphetamines,
gbBarbiturates,
gbBenzodiazepines,
gbCannabinoids,
gbCocaine,
gbOpiates,
gbPhencyclidine,
gbTrycyclicAntidepressant,
gbMethadone};
                if (drugRequired && !CommonHelpers.IsAllDrugAbuseTestsResultNegative(_radioGroups.ToList()))
                {
                    if (HelperFunctions.ShowMessageBox("There is/are positive drug abuse test result(s). Would you still like to proceed? (Y/N)", "Drug Test", MessageBoxButtons.YesNo, RadMessageIcon.Exclamation).Equals(DialogResult.No))
                        return;
                }
                bool isUrineTestPerformedBySigned = OnScreeningHelper.IsUrineTestsSigned(_subjectKey.ToString(), studyId);
                bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
                // bool isUrineTestResultsReviewed = OnScreeningHelper.IsUrineTestResultsReviewed(_subjectKey.ToString(), studyId);
                bool isUrineTestResultsInvestigated = OnScreeningHelper.IsUrineTestResultsInvestigated(_subjectKey.ToString(), studyId);
                if (!isUrineTestPerformedBySigned || !isUrineTestResultsVerified)
                {
                    HelperFunctions.ShowMessageBox("Urine tests are either not performed, not verified or not reviewed yet.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                //if (!isUrineTestResultsInvestigated)
                //{
                //    HelperFunctions.ShowMessageBox("Urine tests results are not reviewed by investigator yet.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                //    return;
                //}
                //if (string.IsNullOrEmpty(txtUrinePFComment.Text.Trim()))
                //{
                //    HelperFunctions.ShowMessageBox("Please enter comment for proceed.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                //    return;
                //}                
                tabName = "Urine Test";
                reason = String.Format("Urine Proceed eSign");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }

                using (DbConnection dbConn = new DbConnection())
                {
                    //saves the subject status
                    dbConn.OpenConnection();
                    dbConn.BeginTransaction();
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(dbConn, studyId, _subjectKey, "pgvUrineTests", SubjectStatusCode.Status.Proceed, txtUrinePFComment.Text.Trim());
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(dbConn, studyId, _subjectKey.ToString(), "ScreeningUrineTest", pgvUrineTests.Name, "UrineTestProceed", SubjectStatusCode.Status.Proceed, txtUrinePFComment.Text, App.EsignedUser.UserName);
                    dbConn.CommitTransaction();
                    HelperFunctions.ShowMessageBox("Subject can proceed.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    dbConn.CloseConnection();
                }
                LoadDataBySelectedTab();
                //GetUrine(ValueOfKey);
                //CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnUrineFail_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (string.IsNullOrEmpty(txtUrinePFComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter Comment.", "Urine Tests", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                bool isUrineTestPerformedBySigned = OnScreeningHelper.IsUrineTestsSigned(_subjectKey.ToString(), studyId);
                bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
                //   bool isUrineTestResultsReviewed = OnScreeningHelper.IsUrineTestResultsReviewed(_subjectKey.ToString(), studyId);
                bool isUrineTestResultsInvestigated = OnScreeningHelper.IsUrineTestResultsInvestigated(_subjectKey.ToString(), studyId);
                if (!isUrineTestPerformedBySigned || !isUrineTestResultsVerified)
                {
                    HelperFunctions.ShowMessageBox("Urine tests are either not performed, not verified or not reviewed yet.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                //if (!isUrineTestResultsInvestigated)
                //{
                //    HelperFunctions.ShowMessageBox("Urine tests results are not reviewed by investigator yet.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                //    return;
                //}
                if (string.IsNullOrEmpty(txtUrinePFComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter comment.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                tabName = "Urine Test";
                string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    //saves the subject status
                    dbConn.OpenConnection();
                    dbConn.BeginTransaction();
                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(dbConn, studyId, _subjectKey, "pgvUrineTests", SubjectStatusCode.Status.Fail, txtUrinePFComment.Text.Trim());
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(dbConn, studyId, _subjectKey.ToString(), "ScreeningUrineTest", pgvUrineTests.Name, "UrineTestFail", SubjectStatusCode.Status.Fail, txtUrinePFComment.Text, App.EsignedUser.UserName);
                    dbConn.CommitTransaction();
                    HelperFunctions.ShowMessageBox("Subject is failed successfully.", "Urine", MessageBoxButtons.OK, RadMessageIcon.Info);
                    dbConn.CloseConnection();
                }
                LoadDataBySelectedTab();
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private bool CheckIfUrineSampleRepeatHasDone()
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                {
                    connection.Open();
                    string checkExist = string.Format(@"(SELECT COUNT(1) FROM [dbo].[ScreeningUrine] WHERE StudyId='" + studyId + "' and SubjectKey='" + _subjectKey + "' and SampleTakenByR is not null and SampleTakenDateR is not null)");
                    SqlCommand cmd = new SqlCommand(checkExist, connection);
                    int count = (int)cmd.ExecuteScalar();
                    if (count > 0)
                    {
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return false;
        }
        private bool ValidateScreeningUrineSample()
        {
            try
            {
                if ((!cbNoTempUrine.IsChecked && !cbYesUrineTemp.IsChecked) || UrineCollectedTime.Value == null)
                {
                    HelperFunctions.ShowMessageBox("Please enter value in required fields.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }
        private void cbCotinineVerifyProduct_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (cbCotinineVerifyProduct.Checked)
                {
                    if (!ValidateCommonScreeningRequiredFields())
                    {
                        cbCotinineVerifyProduct.CheckStateChanged -= new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                        cbCotinineVerifyProduct.Checked = false;
                        cbCotinineVerifyProduct.CheckStateChanged += new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                        return;
                    }
                    if (ddCotinineProduct.SelectedIndex < 0 || ddCotinineProduct.SelectedItem == null || string.IsNullOrEmpty(txtLotNumberCotinine.Text.Trim()) || string.IsNullOrEmpty(txtExpirDateCotinine.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please select and verify product", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }

                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        SqlParameter _sp1 = new SqlParameter("@studyId", studyId);
                        SqlParameter _sp2 = new SqlParameter("@subjectKey", ValueOfKey);
                        SqlParameter[] _spsSelect = new SqlParameter[] { _sp1, _sp2 };
                        DataTable dt = db.ExecuteSelectQuery("spGetMostRecentSCUrineSampleCollection", _spsSelect, true);
                        if (dt.Rows.Count > 0)
                        {
                            int _testId = int.Parse(dt.Rows[0]["ScreeningUrineTestId"].ToString());
                            int _sampleId = int.Parse(dt.Rows[0]["Id"].ToString());
                            bool _cotinineRepeatRequired = default(bool);
                            if (!string.IsNullOrEmpty(dt.Rows[0]["IsCotinineRepeatRequired"].ToString()))
                            {
                                _cotinineRepeatRequired = Convert.ToBoolean(dt.Rows[0]["IsCotinineRepeatRequired"].ToString());
                            }
                            string checkExistResult = "select * from ScreeningUrineCotinineTestResult where ScreeningUrineSampleId=" + _sampleId + " and ScreeningUrineTestId=" + _testId;
                            DataTable _dtResult = db.ExecuteSelectQuery(checkExistResult, null, false);
                            db.BeginTransaction();
                            if (_dtResult.Rows.Count > 0 && !_cotinineRepeatRequired)
                            {
                                int id = int.Parse(_dtResult.Rows[0]["Id"].ToString());
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrineCotinineTestResult] SET IsCotinineProductVerified=1,TestProduct='" + ddCotinineProduct.Text.Trim() + "',LotNumber='" + txtLotNumberCotinine.Text.Trim() + "',ExpireDate='" + txtExpirDateCotinine.Text.Trim() + "' WHERE Id=" + id);
                                db.ExecuteUpdateQuery(UpdateQuery, null, false);
                            }
                            else
                            {
                                string _insertQuery = string.Format(@"Insert into [dbo].[ScreeningUrineCotinineTestResult](IsCotinineProductVerified,TestProduct,LotNumber,ExpireDate,CreatedBy,CreatedDate,ScreeningUrineTestId,ScreeningUrineSampleId) values(1,'" + ddCotinineProduct.Text.Trim() + "','" + txtLotNumberCotinine.Text.Trim() + "','" + txtExpirDateCotinine.Text.Trim() + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "'," + _testId + "," + _sampleId + ")");
                                db.ExecuteInsertQuery(_insertQuery, null, false);
                            }
                            string _updateUrineTest = string.Format(@"UPDATE [dbo].[ScreeningUrineTest] SET IsCotinineRepeatRequired=0, ModifiedBy='" + App.EsignedUser.UserName + "',ModifiedDate='" + DateTime.Now + "' WHERE Id=" + _testId);
                            db.ExecuteUpdateQuery(_updateUrineTest, null, false);
                            db.CommitTransaction();
                            db.CloseConnection();
                            GetUrine(ValueOfKey);
                        }
                        else
                        {
                            HelperFunctions.ShowMessageBox("Urine sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            cbCotinineVerifyProduct.CheckStateChanged -= new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                            cbCotinineVerifyProduct.Checked = false;
                            cbCotinineVerifyProduct.CheckStateChanged += new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                cbCotinineVerifyProduct.CheckStateChanged -= new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                cbCotinineVerifyProduct.Checked = false;
                cbCotinineVerifyProduct.CheckStateChanged += new System.EventHandler(cbCotinineVerifyProduct_CheckStateChanged);
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
        }

        private void cbHCGVerifyProduct_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (cbHCGVerifyProduct.Checked)
                {
                    if (!ValidateCommonScreeningRequiredFields())
                    {
                        cbHCGVerifyProduct.CheckStateChanged -= new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                        cbHCGVerifyProduct.Checked = false;
                        cbHCGVerifyProduct.CheckStateChanged += new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                        return;
                    }
                    if (ddhcgProduct.SelectedIndex < 0 || ddhcgProduct.SelectedItem == null || string.IsNullOrEmpty(txtLotNumberhCG.Text.Trim()) || string.IsNullOrEmpty(txtExpirhCG.Text.Trim()))
                    {
                        HelperFunctions.ShowMessageBox("Please verify and select product", "Drug Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                        return;
                    }
                    _subjectKey = Convert.ToInt32(SubjectKey.Text);
                    string eSignedBy = App.EsignedUser.UserName;
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        SqlParameter _sp1 = new SqlParameter("@studyId", studyId);
                        SqlParameter _sp2 = new SqlParameter("@subjectKey", ValueOfKey);
                        SqlParameter[] _spsSelect = new SqlParameter[] { _sp1, _sp2 };
                        DataTable dt = db.ExecuteSelectQuery("spGetMostRecentSCUrineSampleCollection", _spsSelect, true);
                        bool _hCGRepeatRequired = default(bool);
                        if (dt.Rows.Count > 0)
                        {
                            int _testId = int.Parse(dt.Rows[0]["ScreeningUrineTestId"].ToString());
                            int _sampleId = int.Parse(dt.Rows[0]["Id"].ToString());
                            if (!string.IsNullOrEmpty(dt.Rows[0]["IsHCGRepeatRequired"].ToString()))
                            {
                                _hCGRepeatRequired = Convert.ToBoolean(dt.Rows[0]["IsHCGRepeatRequired"].ToString());
                            }
                            string checkExistResult = "select * from ScreeningUrineHCGTestResult where ScreeningUrineSampleId=" + _sampleId + " and ScreeningUrineTestId=" + _testId;
                            DataTable _dtResult = db.ExecuteSelectQuery(checkExistResult, null, false);
                            db.BeginTransaction();
                            if (_dtResult.Rows.Count > 0 && !_hCGRepeatRequired)
                            {
                                int id = int.Parse(_dtResult.Rows[0]["Id"].ToString());
                                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrineHCGTestResult] SET IsHCGProductVerified=1,TestProduct='" + ddhcgProduct.Text.Trim() + "',LotNumber='" + txtLotNumberhCG.Text.Trim() + "',ExpireDate='" + txtExpirhCG.Text.Trim() + "' WHERE Id=" + id);
                                db.ExecuteUpdateQuery(UpdateQuery, null, false);
                            }
                            else
                            {
                                string _insertQuery = "Insert into [dbo].[ScreeningUrineHCGTestResult](IsHCGProductVerified,TestProduct,LotNumber,ExpireDate,CreatedBy,CreatedDate,ScreeningUrineTestId,ScreeningUrineSampleId) values(1,'" + ddhcgProduct.Text.Trim() + "','" + txtLotNumberhCG.Text.Trim() + "','" + txtExpirhCG.Text.Trim() + "','" + App.EsignedUser.UserName + "','" + DateTime.Now + "'," + _testId + "," + _sampleId + ")";
                                db.ExecuteInsertQuery(_insertQuery, null, false);
                            }
                            string _updateUrineTest = string.Format(@"UPDATE [dbo].[ScreeningUrineTest] SET IsHCGRepeatRequired=0, ModifiedBy='" + App.EsignedUser.UserName + "',ModifiedDate='" + DateTime.Now + "' WHERE Id=" + _testId);
                            db.ExecuteUpdateQuery(_updateUrineTest, null, false);
                            db.CommitTransaction();
                            db.CloseConnection();
                            GetUrine(ValueOfKey);
                        }
                        else
                        {
                            HelperFunctions.ShowMessageBox("Urine sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                            cbHCGVerifyProduct.CheckStateChanged -= new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                            cbHCGVerifyProduct.Checked = false;
                            cbHCGVerifyProduct.CheckStateChanged += new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                cbHCGVerifyProduct.CheckStateChanged -= new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                cbHCGVerifyProduct.Checked = false;
                cbHCGVerifyProduct.CheckStateChanged += new System.EventHandler(cbHCGVerifyProduct_CheckStateChanged);
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {

            }
            //try
            //{
            //    if (cbHCGVerifyProduct.Checked)
            //    {
            //        if (!ValidateCommonScreeningRequiredFields())
            //            return;

            //        _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //        string eSignedBy = App.EsignedUser.UserName;
            //        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            //        {
            //            connection.Open();
            //            string checkExist = string.Format(@"(SELECT Id FROM [dbo].[ScreeningUrine] WHERE StudyId='" + studyId + "' and SubjectKey='" + _subjectKey + "' and (IsRepeatRequired is null or IsRepeatRequired='False'))");
            //            SqlCommand cmd = new SqlCommand(checkExist, connection);
            //            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            //            DataTable dt = new DataTable();
            //            sda.Fill(dt);
            //            if (dt.Rows.Count > 0)
            //            {
            //                int id = int.Parse(dt.Rows[0]["Id"].ToString());
            //                string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrine] SET IsHCGProductVerified=1 WHERE Id=" + id);
            //                SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
            //                cmdUpdate.ExecuteNonQuery();
            //                connection.Close();
            //            }
            //            else
            //            {
            //                HelperFunctions.ShowMessageBox("Urine sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //                return;
            //            }
            //        }
            //    }
            //}
            //catch (SqlException ex)
            //{
            //    
            //    HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }

        private void btnUrineTestsPerformedBy_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string eSignedBy = string.Empty;
                bool isSampleTaken = OnScreeningHelper.IsUrineSampleCollectionSigned(_subjectKey.ToString(), studyId);
                bool isCotinineTestDone = OnScreeningHelper.IsUrineCotinineTestDone(_subjectKey.ToString(), studyId);
                bool isDrugAbuseTestDone = OnScreeningHelper.IsUrineDrugAbuseTestDone(_subjectKey.ToString(), studyId);
                bool isHCGTestDone = OnScreeningHelper.IsUrinehCGPregnancyTestDone(_subjectKey.ToString(), studyId);
                bool isUrineTestPerformedBySigned = OnScreeningHelper.IsUrineTestsSigned(_subjectKey.ToString(), studyId);
                if (isUrineTestPerformedBySigned)
                {
                    HelperFunctions.ShowMessageBox("Urine tests have already performed and e-signed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (!isSampleTaken || (drugRequired && !isDrugAbuseTestDone) || (cotinineRequired && !isCotinineTestDone) || (hcgRequired && txtGenders.Text.Trim().ToUpper() == "FEMALE" && !isHCGTestDone))
                {
                    HelperFunctions.ShowMessageBox("Please complete the tests.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _successMessage = string.Empty;
                tabName = "Urine Test";
                reason = String.Format("Urine Test Performed.");
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                    DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                    DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                    if (_dtDrug.Rows.Count == 0 && _dtCot.Rows.Count == 0 && _dtHCG.Rows.Count == 0)
                    {
                        HelperFunctions.ShowMessageBox("Urine test results have not been saved yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    eSignedBy = App.EsignedUser.UserName;
                    #region Drug Abuse  
                    db.BeginTransaction();
                    if (_dtDrug.Rows.Count > 0 && string.IsNullOrEmpty(_dtDrug.Rows[0]["PerformedBy"].ToString()))
                    {
                        int id = int.Parse(_dtDrug.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@PerformedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@PerformedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningDrugAbuseTestResult", _updateParams, true);
                        //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    #endregion

                    #region Cotinine                    
                    if (_dtCot.Rows.Count > 0 && string.IsNullOrEmpty(_dtCot.Rows[0]["PerformedBy"].ToString()))
                    {
                        int id = int.Parse(_dtCot.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@PerformedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@PerformedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningCotinineTestResult", _updateParams, true);
                        //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    #endregion

                    #region HCG                    
                    if (_dtHCG.Rows.Count > 0 && string.IsNullOrEmpty(_dtHCG.Rows[0]["PerformedBy"].ToString()))
                    {
                        int id = int.Parse(_dtHCG.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@PerformedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@PerformedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningHCGTestResult", _updateParams, true);
                        // HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    #endregion

                    //subject status                   
                    db.CommitTransaction();
                    db.CloseConnection();
                    if (!string.IsNullOrEmpty(_successMessage))
                        HelperFunctions.ShowMessageBox(_successMessage, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
                LoadDataBySelectedTab();
                //GetUrine(ValueOfKey);
                //CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            //try
            //{
            //    if (!ValidateCommonScreeningRequiredFields())
            //        return;
            //    _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //    string eSignedBy = App.EsignedUser.UserName;
            //    //  bool isSampleTaken = OnScreeningHelper.IsUrineSampleCollectionSigned(_subjectKey.ToString(), studyId);
            //    bool isCotinineTestDone = OnScreeningHelper.IsUrineCotinineTestDone(_subjectKey.ToString(), studyId);
            //    bool isDrugAbuseTestDone = OnScreeningHelper.IsUrineDrugAbuseTestDone(_subjectKey.ToString(), studyId);
            //    bool isHCGTestDone = OnScreeningHelper.IsUrinehCGPregnancyTestDone(_subjectKey.ToString(), studyId);
            //    bool isUrineTestPerformedBySigned = OnScreeningHelper.IsUrineTestsSigned(_subjectKey.ToString(), studyId);
            //    bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
            //    if (isUrineTestPerformedBySigned)
            //    {
            //        HelperFunctions.ShowMessageBox("Urine tests have already performed and e-signed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        return;
            //    }
            //    if ((drugRequired == 1 && !isDrugAbuseTestDone) || (cotinineRequired == 1 && !isCotinineTestDone) || (hcgRequired == 1 && txtGenders.Text.Trim().ToUpper() == "FEMALE" && !isHCGTestDone))
            //    {
            //        HelperFunctions.ShowMessageBox("Please complete the tests.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        return;
            //    }
            //    moduleName = "UrineTests";
            //    tabName = "E-Sign Urine Test";
            //    reason = String.Format("Urine Test Performed By");
            //    string actions = string.Format("Screening Urine Test Performed By:'" + App.EsignedUser.UserName + "'");
            //    if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
            //    {
            //        return;
            //    }

            //    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            //    {
            //        connection.Open();
            //        string checkExist = string.Format(@"(SELECT * FROM [dbo].[ScreeningUrine] WHERE StudyId='" + studyId + "' and SubjectKey='" + _subjectKey + "' and (IsRepeatRequired is null or IsRepeatRequired='False'))");
            //        SqlCommand cmd = new SqlCommand(checkExist, connection);
            //        SqlDataAdapter sda = new SqlDataAdapter(cmd);
            //        DataTable dt = new DataTable();
            //        sda.Fill(dt);
            //        if (dt.Rows.Count > 0)
            //        {
            //            if (string.IsNullOrEmpty(dt.Rows[0]["hCGReadingTime"].ToString()) && string.IsNullOrEmpty(dt.Rows[0]["CotinineReadingTime"].ToString()) && string.IsNullOrEmpty(dt.Rows[0]["DrugAbuseReadingTime"].ToString()))
            //            {
            //                HelperFunctions.ShowMessageBox("Test results have not been saved yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //                return;
            //            }
            //            int id = int.Parse(dt.Rows[0]["Id"].ToString());
            //            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrine] SET TestsPerformedBy='" + App.EsignedUser.UserName + "',TestsPerformedDate='" + DateTimeNow + "' WHERE Id=" + id);
            //            SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
            //            cmdUpdate.ExecuteNonQuery();
            //            HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //        }
            //        else
            //        {
            //            HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            return;
            //        }
            //        connection.Close();
            //    }
            //    GetUrine(ValueOfKey);
            //}
            //catch (SqlException ex)
            //{
            //    
            //    HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }

        private void btnUrineTestsVerifiedBy_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;

                if (!OnScreeningHelper.CheckIfUrineSampleHasDone(studyId, ValueOfKey))
                {
                    HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                if (!OnScreeningHelper.IsUrineTestsSigned(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Urine Test has not been e-signed yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
                if (isUrineTestResultsVerified)
                {
                    HelperFunctions.ShowMessageBox("Urine tests have already verified and e-signed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                _subjectKey = Convert.ToInt32(SubjectKey.Text);
                string _successMessage = string.Empty;
                tabName = "Urine Test";
                reason = String.Format("Urine Test Verified.");
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable _dtDrug = OnScreeningHelper.GetUrineDrugAbuseResult(studyId, ValueOfKey);
                    DataTable _dtCot = OnScreeningHelper.GetUrineCotinineResult(studyId, ValueOfKey);
                    DataTable _dtHCG = OnScreeningHelper.GetUrineHCGResult(studyId, ValueOfKey);
                    if (_dtDrug.Rows.Count == 0 && _dtCot.Rows.Count == 0 && _dtHCG.Rows.Count == 0)
                    {
                        HelperFunctions.ShowMessageBox("Urine test results have not been saved yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return;
                    }
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    #region Drug Abuse  
                    db.BeginTransaction();
                    if (_dtDrug.Rows.Count > 0 && string.IsNullOrEmpty(_dtDrug.Rows[0]["VerifiedBy"].ToString()))
                    {
                        int id = int.Parse(_dtDrug.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@VerifiedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@VerifiedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningDrugAbuseTestResult", _updateParams, true);
                        //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    #endregion

                    #region Cotinine                    
                    if (_dtCot.Rows.Count > 0 && string.IsNullOrEmpty(_dtCot.Rows[0]["VerifiedBy"].ToString()))
                    {
                        int id = int.Parse(_dtCot.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@VerifiedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@VerifiedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningCotinineTestResult", _updateParams, true);
                        // HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    #endregion

                    #region HCG                    
                    if (_dtHCG.Rows.Count > 0 && string.IsNullOrEmpty(_dtHCG.Rows[0]["VerifiedBy"].ToString()))
                    {
                        int id = int.Parse(_dtHCG.Rows[0]["Id"].ToString());
                        SqlParameter _p1 = new SqlParameter("@VerifiedBy", App.EsignedUser.UserName);
                        SqlParameter _p2 = new SqlParameter("@VerifiedDate", DateTime.Now);
                        SqlParameter _p3 = new SqlParameter("@Id", id);
                        SqlParameter[] _updateParams = new SqlParameter[] { _p1, _p2, _p3 };
                        db.ExecuteUpdateQuery("spUpdateScreeningHCGTestResult", _updateParams, true);
                        //HelperFunctions.ShowMessageBox("Urine Tests have been performed and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                        _successMessage = "Urine Test(s) have been performed and e-signed successfully";
                    }
                    db.CommitTransaction();
                    #endregion
                    db.CloseConnection();
                    if (!string.IsNullOrEmpty(_successMessage))
                        HelperFunctions.ShowMessageBox(_successMessage, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
                }
                LoadDataBySelectedTab();
                //GetUrine(ValueOfKey);
                //CheckeSign(ValueOfKey);
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            //try
            //{
            //    if (!ValidateCommonScreeningRequiredFields())
            //        return;
            //    if (!OnScreeningHelper.IsUrineTestsSigned(ValueOfKey, studyId))
            //    {
            //        HelperFunctions.ShowMessageBox("Urine Test has not been e-signed yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //        return;
            //    }
            //    bool isUrineTestResultsVerified = OnScreeningHelper.IsUrineTestResultsVerified(_subjectKey.ToString(), studyId);
            //    if (isUrineTestResultsVerified)
            //    {
            //        HelperFunctions.ShowMessageBox("Urine tests have already verified and e-signed.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            //        return;
            //    }
            //    _subjectKey = Convert.ToInt32(SubjectKey.Text);
            //    string eSignedBy = App.EsignedUser.UserName;

            //    moduleName = "UrineTests";
            //    tabName = "E-Sign Urine Test";
            //    reason = String.Format("Urine Test Verified By");
            //    string actions = string.Format("Screening Urine Test Verified By:'" + App.EsignedUser.UserName + "'");
            //    if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
            //    {
            //        return;
            //    }

            //    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            //    {
            //        connection.Open();
            //        string checkExist = string.Format(@"(SELECT Id FROM [dbo].[ScreeningUrine] WHERE StudyId='" + studyId + "' and SubjectKey='" + _subjectKey + "' and (IsRepeatRequired is null or IsRepeatRequired='False'))");
            //        SqlCommand cmd = new SqlCommand(checkExist, connection);
            //        SqlDataAdapter sda = new SqlDataAdapter(cmd);
            //        DataTable dt = new DataTable();
            //        sda.Fill(dt);
            //        if (dt.Rows.Count > 0)
            //        {
            //            int id = int.Parse(dt.Rows[0]["Id"].ToString());
            //            string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrine] SET TestsVerifiedBy='" + App.EsignedUser.UserName + "',TestsVerifiedDate='" + DateTimeNow + "' WHERE Id=" + id);
            //            SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
            //            cmdUpdate.ExecuteNonQuery();
            //            HelperFunctions.ShowMessageBox("Urine Tests have been verified and e-signed successfully.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //        }
            //        else
            //        {
            //            HelperFunctions.ShowMessageBox("Sample collection has not been done yet.", "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Info);
            //            return;
            //        }
            //        connection.Close();
            //    }
            //    GetUrine(ValueOfKey);
            //}
            //catch (SqlException ex)
            //{
            //    
            //    HelperFunctions.ShowMessageBox(ex.Message, "Screening Urine Test", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }
        #endregion

        #endregion

        //****************************** HL7 Results ******************************
        #region Results(HL7)

        /// <summary>
        /// Clear Results (HL7)
        /// </summary>
        private void ClearResults()
        {
            lblSCCollectedDate.Text = string.Empty;
            lblSCCollectedTime.Text = string.Empty;
            lblSCRCollectedDate.Text = string.Empty;
            lblSCRCollectedTime.Text = string.Empty;
            gvScreeningResults.DataSource = null;
            gvResultsSCRepeat.DataSource = null;
            txtCommentsScreening.Clear();
            txtCommentsScreeningRepeat.Clear();
            lblResultCountSCR.ResetText();
            lblResultCountSCR.Text = "0";
            lblAbnormalCountSCR.ResetText();
            lblAbnormalCountSCR.Text = "0";
        }
        private List<Tuple<string, string>> GetHL7Type()
        {
            List<Tuple<string, string>> list = new List<Tuple<string, string>>();
            using (DbConnection dbConn = new DbConnection())
            {
                dbConn.OpenConnection();
                string selectQuery = "Select RecruitmentNo,GeneralSpecificStudy from ScreeningSetupVariables where StudyId=@StudyId";
                SqlParameter p1 = new SqlParameter("@StudyId", studyId);

                SqlParameter[] sps = new SqlParameter[] { p1 };
                DataTable dtSelect = new DataTable();
                dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                if (dtSelect.Rows.Count > 0)
                {
                    list.Add(Tuple.Create(dtSelect.Rows[0]["RecruitmentNo"].ToString(), dtSelect.Rows[0]["GeneralSpecificStudy"].ToString()));
                }
            }
            return list;
        }

        /// <summary>
        /// Get All Subject Tests & Results (Screening)
        /// </summary>
        /// <param name="subjectId"></param>
        private void GetLaboratoryResultsScreening(string subjectkey)
        {
            //int partLength = 100;
            //int countAbnormal = 0;
            //try
            //{
            //    string _rNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
            //    if (txtSubjectIDs.Text.Trim() != "")
            //    {
            //        using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            //        {

            //            connection.Open();
            //            string query = string.Format(@"SELECT *  FROM [dbo].[LaboratoryData]
            //             WHERE StudyID='" + (string.IsNullOrEmpty(_rNumber) ? studyId : _rNumber) + "' and SubjectID='" + txtSubjectIDs.Text.Trim() + "' AND ((Visit NOT Like '%Repeat' AND visit NOT Like '%RPT')  AND (Visit Like 'Scr%' or Visit like '%S0%'))  Order by TestName ASC"); //Group By Visit ,SubjectID,StudyID,DateCollected,TestName,Result,AbnormalFlag,Comments,Unit,Range,InvestigatorReview,ReviewedBy,ReviewedDate
            //            SqlCommand cmd = new SqlCommand(query, connection);
            //            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            //            DataTable dt = new DataTable();
            //            sda.Fill(dt);
            //            if (dt.Rows.Count > 0)
            //            {
            //                foreach (DataRow dr in dt.Rows)
            //                {
            //                    ListViewDataItem items = new ListViewDataItem();

            //                    items.SubItems.Add(dr["TestName"].ToString());
            //                    items.SubItems.Add(dr["Result"].ToString());
            //                    // items.SubItems.Add(dr["OutOfRange"].ToString());
            //                    string abNormal = dr["AbnormalFlag"].ToString();
            //                    if (!string.IsNullOrEmpty(abNormal.Trim()))
            //                    {
            //                        items.ForeColor = System.Drawing.Color.Red;
            //                        countAbnormal++;
            //                        lblAbnormalCountSCR.Text = Convert.ToString(countAbnormal);
            //                    }
            //                    items.SubItems.Add(string.Concat(dr["Range"].ToString(), "  ", dr["Unit"].ToString()));


            //                    var commentBox = dr["Comments"].ToString().Split(' ').Aggregate(new[] { "" }.ToList(), (a, x) =>
            //                    {
            //                        var last = a[a.Count - 1];
            //                        if ((last + " " + x).Length > partLength)
            //                        {

            //                            a.Add(x);
            //                        }
            //                        else
            //                        {
            //                            a[a.Count - 1] = (last + " " + x).Trim();
            //                        }

            //                        return a;
            //                    });

            //                    var input1 = items.SubItems.Add(commentBox.Aggregate((s1, s2) =>
            //                    s1 + "\n" + s2
            //                    ));

            //                    txtCommentsScreening.AppendText(dr["Comments"].ToString());

            //                    //items.SubItems.Add(input1);
            //                    // items.SubItems.Add(dr["Visit"].ToString());
            //                    // items.SubItems.Add(dr["DateCollected"].ToString());
            //                    lvScreening.Items.Add(items);

            //                    lvScreening.ItemSize = new Size(0, 50);
            //                    //lvScreening.ItemSize = new Size(650, 140);
            //                    lvScreening.AllowArbitraryItemHeight = false;
            //                    lvScreening.AllowArbitraryItemWidth = false;
            //                    items.TextAlignment = ContentAlignment.MiddleCenter;
            //                    lblResultCountSCR.Text = Convert.ToString(lvScreening.Items.Count);
            //                    tbScreeningResults.Enabled = true;
            //                }
            //            }
            //            connection.Close();
            //        }
            //    }

            //}
            //catch (SqlException ex)
            //{
            //    HelperFunctions.ShowMessageBox(ex.Message, "Laboratory (Test/Results)", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }

        private void GetLaboratoryResultsScreening()
        {
            int partLength = 100;
            string subjectID = string.Empty;
            try
            {
                if (txtSubjectIDs.Text != "")
                {
                    string _rNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
                    // subjectID = "BL155106";
                    subjectID = txtSubjectIDs.Text.Trim();
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string query = string.Format(@"SELECT *  FROM [dbo].[LaboratoryData]
                         WHERE (StudyID='" + _rNumber + "' or StudyID='" + studyId + "') and SubjectID='" + subjectID + "' AND ((Visit NOT Like '%Repeat' AND visit NOT Like '%RPT')  AND (Visit Like 'Scr%' or Visit like '%S0%'))  Order by TestName ASC"); //Group By Visit ,SubjectID,StudyID,DateCollected,TestName,Result,AbnormalFlag,Comments,Unit,Range,InvestigatorReview,ReviewedBy,ReviewedDate
                        SqlCommand cmd = new SqlCommand(query, connection);
                        DataTable dt = new DataTable();
                        SqlDataAdapter sda = new SqlDataAdapter(cmd);
                        sda.Fill(dt);
                        gvScreeningResults.DataSource = null;
                        gvScreeningResults.Columns.Clear();
                        DataView dv = dt.DefaultView;
                        dv.RowFilter = "TestName<>' '";
                        gvScreeningResults.DataSource = dv.ToTable();
                        DesignLaboratoryResultGrid(gvScreeningResults);

                        //Results count
                        lblResultCountSCR.Text = dv.Count.ToString();
                        //abnormal count
                        lblAbnormalCountSCR.Text = dt.Select("AbnormalFlag<>' '").Count().ToString();
                        var _resultRows = dt.AsEnumerable().Where(row => !string.IsNullOrEmpty(row["Comments"].ToString().Trim())).ToList();
                        if (_resultRows != null)
                        {
                            txtCommentsScreening.AppendText("\n");
                            txtCommentsScreening.AppendText("\n");
                            foreach (DataRow dr in _resultRows)
                            {
                                var commentBox = dr["Comments"].ToString().Split(' ').Aggregate(new[] { "" }.ToList(), (a, x) =>
                                {
                                    var last = a[a.Count - 1];
                                    if ((last + " " + x).Length > partLength)
                                    {

                                        a.Add(x);
                                    }
                                    else
                                    {
                                        a[a.Count - 1] = (last + " " + x).Trim();
                                    }
                                    return a;
                                });
                                txtCommentsScreening.AppendText("\u25C9 " + dr["Comments"].ToString() + "\n\n");
                            }
                        }
                        connection.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Laboratory (Test/Results)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void LoadBloodCollectedTimeDateForResult()
        {
            DateTime _dtDateTime = new DateTime();
            switch (pgvTestResults.SelectedPage.Name)
            {
                case "tbScreeningResults":
                    _dtDateTime = OnScreeningHelper.GetBloodSampleCollectedDateTimeForResults(studyId, ValueOfKey, 1);
                    if (!_dtDateTime.Equals(default(DateTime)))
                    {
                        lblSCCollectedDate.Text = CommonHelpers.PCMSDateFormat(_dtDateTime);
                        lblSCCollectedTime.Text = _dtDateTime.ToString("HH:mm");
                    }
                    break;
                case "tbScreeningRepeatResults":
                    _dtDateTime = OnScreeningHelper.GetBloodSampleCollectedDateTimeForResults(studyId, ValueOfKey, 2);
                    if (!_dtDateTime.Equals(default(DateTime)))
                    {
                        lblSCRCollectedDate.Text = CommonHelpers.PCMSDateFormat(_dtDateTime);
                        lblSCRCollectedTime.Text = _dtDateTime.ToString("HH:mm");
                    }
                    break;
                default:
                    break;
            }
        }
        private void DesignLaboratoryResultGrid(RadGridView grid)
        {
            try
            {
                grid.Columns["StudyID"].IsVisible = false;
                grid.Columns["SubjectID"].IsVisible = false;
                grid.Columns["Visit"].IsVisible = false;
                // grid.Columns["DateCollected"].IsVisible = false;
                grid.Columns["AbnormalFlag"].IsVisible = false;
                grid.Columns["Comments"].IsVisible = false;
                grid.Columns["Unit"].IsVisible = false;
                grid.Columns["InvestigatorAction"].IsVisible = false;
                grid.Columns["ReviewedBy"].IsVisible = false;
                grid.Columns["ReviewedDate"].IsVisible = false;
                grid.Columns["TimeCollected"].HeaderText = "Collected Time";
                grid.Columns["DateCollected"].HeaderText = "Collected Date";
                grid.Columns["TimeCollected"].IsVisible = false;
                grid.Columns["DateCollected"].IsVisible = false;
                grid.Columns["TestName"].HeaderText = "Test Name";
                grid.Columns["Result"].WrapText = true;
                //grid.Columns.Move(3, 4);
                //foreach (GridViewColumn c in grid.Columns)
                //{
                //    if (c.Name.Equals("TestName") || c.Name.Equals("Result") || c.Name.Equals("Range") || c.Name.Equals("DateCollected") || c.Name.Equals("TimeCollected"))
                //    {
                //        c.ReadOnly = true;
                //    }
                //    else
                //    {
                //        c.ReadOnly = false;
                //    }
                //}
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Get All Subject Tests & Results (Screening Repeat)
        /// </summary>
        private void GetLaboratoryResultsScreeningRepeat()
        {
            int partLength = 100;
            try
            {
                string subjectID = string.Empty;
                if (txtSubjectIDs.Text != "")
                {
                    string _rNumber = CommonHelpers.GetScreeningNoByStudyID(studyId);
                    subjectID = txtSubjectIDs.Text.Trim();
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {

                        connection.Open();
                        string query = string.Format(@"SELECT *  FROM [dbo].[LaboratoryData]
                         WHERE (StudyID='" + _rNumber + "' or StudyID='" + studyId + "') and SubjectID='" + subjectID + "'AND (Visit Like '%Repeat' OR visit Like '%RPT') Order by TestName ASC"); //Group By Visit ,SubjectID,StudyID,DateCollected,TestName,Result,AbnormalFlag,Comments,Unit,Range 
                        SqlCommand cmd = new SqlCommand(query, connection);

                        DataTable dt = new DataTable();
                        SqlDataAdapter sda = new SqlDataAdapter(cmd);
                        sda.Fill(dt);
                        gvResultsSCRepeat.DataSource = null;
                        gvResultsSCRepeat.Columns.Clear();
                        DataView dv = dt.DefaultView;
                        dv.RowFilter = "TestName<>' '";
                        gvResultsSCRepeat.DataSource = dv.ToTable();
                        DesignLaboratoryResultGrid(gvResultsSCRepeat);

                        //Results count
                        lblResultCountSCRRepeat.Text = dv.Count.ToString();

                        //abnormal count
                        lblAbnormalCountSCRRepeat.Text = dt.Select("AbnormalFlag<>' '").Count().ToString();
                        var _resultRows = dt.AsEnumerable().Where(row => !string.IsNullOrEmpty(row["Comments"].ToString().Trim())).ToList();
                        if (_resultRows != null)
                        {
                            foreach (DataRow dr in _resultRows)
                            {
                                var commentBox = dr["Comments"].ToString().Split(' ').Aggregate(new[] { "" }.ToList(), (a, x) =>
                                {
                                    var last = a[a.Count - 1];
                                    if ((last + " " + x).Length > partLength)
                                    {

                                        a.Add(x);
                                    }
                                    else
                                    {
                                        a[a.Count - 1] = (last + " " + x).Trim();
                                    }

                                    return a;
                                });
                                txtCommentsScreeningRepeat.AppendText("\u25C9 " + dr["Comments"].ToString() + "\n\n");
                            }
                        }
                        connection.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Laboratory (Test/Results)", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void gvResultsCommon_RowFormatting(object sender, RowFormattingEventArgs e)
        {
            if (!string.IsNullOrEmpty(e.RowElement.RowInfo.Cells["AbnormalFlag"].Value.ToString().Trim()))
            {
                e.RowElement.ForeColor = System.Drawing.Color.Red;
            }
            else
            {
                e.RowElement.ForeColor = System.Drawing.Color.Black;
            }
            //e.RowElement.RowInfo.Height = 30;
            //if (!string.IsNullOrEmpty(e.RowElement.RowInfo.Cells["Result"].Value.ToString()))
            //    e.RowElement.RowInfo.Cells["Comments"].Value = e.RowElement.RowInfo.Cells["Comments"].Value.ToString().Replace("\n",Environment.NewLine);            
        }
        #endregion

        //****************************** Uploaded Documents ******************************
        #region Uploaded Documents
        private void btnSCUploadNew_Click(object sender, EventArgs e)
        {
            uploadedFileId = 0;
            txtScrUploadedDocReason.Clear();
            txtScrUploadedDocTitle.Clear();
            lblScrUploadedFileName.Text = string.Empty;
            txtScrUploadedDocTitle.Focus();
        }
        private void gvScrUploadedDocList_ToolTipTextNeeded(object sender, ToolTipTextNeededEventArgs e)
        {
            GridDataCellElement cell = sender as GridDataCellElement;
            if (cell != null)
            {
                ToolTip _toolTip = e.ToolTip;
                _toolTip.InitialDelay = 100;
                _toolTip.ToolTipTitle = "View File";
                _toolTip.AutomaticDelay = 800;
                _toolTip.ForeColor = System.Drawing.Color.Orange;
                e.ToolTipText = "Double click in row to view file.";
            }
        }
        private void btnScrUploadedDocSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (string.IsNullOrEmpty(txtScrUploadedDocTitle.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter title for the document.", "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
                    txtScrUploadedDocTitle.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(txtScrUploadedDocReason.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter reason for uploading the document.", "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
                    txtScrUploadedDocReason.Focus();
                    return;
                }
                if ((string.IsNullOrEmpty(uploadedFile) || string.IsNullOrEmpty(ofdUploadedDoc.FileName)) && string.IsNullOrEmpty(lblScrUploadedFileName.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("There is no file to save. Please upload file first.", "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
                    btnScrUploadedDocBrowse.Focus();
                    return;
                }
                tabName = "Upload Documents";
                string reason = string.Format("Upload Documents will be e-signed by:'" + " " + App.EsignedUser.UserName + "'");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                //string selectQuery = "select * from ScreeningUploadedDocuments where Id=" + uploadedFileId; //and Title=@title
                //string insertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningUploadedDocuments] (StudyID,SubjectKey,FileName,Document,CreatedBy,CreatedDate,Title,Reason) VALUES(@studyId,@subjectkey,@fileName,@document,@createdBy,@createdDate,@title,@reason)");

                string selectQuery = "select 1 from UploadedDocuments where Id=" + uploadedFileId; //and Title=@title
                string insertQuery = string.Format(@"INSERT INTO [dbo].[UploadedDocuments] (StudyID,SubjectKey,FileName,Document,CreatedBy,CreatedDate,Title,Reason) VALUES(@studyId,@subjectkey,@fileName,@document,@createdBy,@createdDate,@title,@reason)");

                // string fileName = Path.GetFileNameWithoutExtension(ofdUploadedDoc.FileName);
                SqlParameter sp1 = new SqlParameter("@studyId", studyId.Trim());
                SqlParameter sp2 = new SqlParameter("@subjectkey", _subjectKey);
                SqlParameter sp3 = new SqlParameter("@fileName", uploadedFile);
                SqlParameter sp7 = new SqlParameter("@title", txtScrUploadedDocTitle.Text.Trim());
                SqlParameter sp5 = new SqlParameter("@createdBy", App.EsignedUser.UserName);
                SqlParameter sp6 = new SqlParameter("@createdDate", DateTime.Now);
                SqlParameter sp8 = new SqlParameter("@reason", txtScrUploadedDocReason.Text.Trim());
                SqlParameter sp9 = new SqlParameter("@modifiedBy", App.EsignedUser.UserName);
                SqlParameter sp10 = new SqlParameter("@modifiedDate", DateTime.Now);
                byte[] contents = null;
                SqlParameter sp4 = new SqlParameter("@document", SqlDbType.VarBinary) { IsNullable = true };
                if (!string.IsNullOrEmpty(ofdUploadedDoc.FileName))
                {
                    contents = HelperFunctions.ConvertDocToBytes(ofdUploadedDoc.FileName); //ofdUploadedDoc.FileName                                                           
                    sp4.Value = contents;
                }
                else
                    sp4.Value = DBNull.Value;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    DataTable dt = db.ExecuteSelectQuery(selectQuery, null, false);
                    if (dt.Rows.Count > 0)
                    {
                        string updateQuery = "Update UploadedDocuments"
                            + " set Reason=@reason,Title=@title,FileName=@fileName,"
                            + "Document=case when @document is null then Document else @document end,ModifiedBy=@modifiedBy,ModifiedDate="
                            + "@modifiedDate where Id=" + uploadedFileId;
                        //string updateQuery = "Update ScreeningUploadedDocuments"
                        //    + " set Reason=@reason,Title=@title,FileName=@fileName,"
                        //    + "Document=@document,ModifiedBy=@modifiedBy,ModifiedDate="
                        //    + "@modifiedDate where Id=" + id;
                        SqlParameter[] sParams = new SqlParameter[] { sp3, sp4, sp7, sp8, sp9, sp10 };
                        db.ExecuteUpdateQuery(updateQuery, sParams, false);
                    }
                    else
                    {
                        SqlParameter[] sParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8 };
                        db.ExecuteInsertQuery(insertQuery, sParams, false);
                    }
                }
                HelperFunctions.ShowMessageBox("Document has been saved successfully.", "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
                uploadedFile = string.Empty;
                ofdUploadedDoc.Reset();
                lblScrUploadedFileName.ResetText();
                txtScrUploadedDocTitle.ResetText();
                txtScrUploadedDocReason.ResetText();
                uploadedFileId = default(int);
                LoadUploadedFileLists();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
            }
        }
        private void btnScrUploadedDocBrowse_Click(object sender, EventArgs e)
        {
            ofdUploadedDoc.Filter = "Pdf Files|*.pdf";
            if (ofdUploadedDoc.ShowDialog() == DialogResult.OK)
            {
                lblScrUploadedFileName.ResetText();
                uploadedFile = Path.GetFileName(ofdUploadedDoc.FileName);
                lblScrUploadedFileName.Text = uploadedFile;
            }
            else
            {
                lblScrUploadedFileName.ResetText();
                ofdUploadedDoc.Reset();
            }
        }
        private void LoadUploadedFileLists()
        {
            try
            {
                gvScrUploadedDocList.DataSource = null;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    //string selectQuery = "select Id,SubjectKey,StudyID,Title,Reason,ModifiedBy,ModifiedDate,FileName,CreatedBy,CreatedDate  from ScreeningUploadedDocuments where StudyID=@studyId and SubjectKey=@subjectKey order by Title asc";
                    string selectQuery = "select Id,SubjectKey,StudyID,Title,Reason,ModifiedBy,ModifiedDate,FileName,CreatedBy,CreatedDate from UploadedDocuments where StudyID=@studyId and SubjectKey=@subjectKey order by Title asc";
                    SqlParameter sp1 = new SqlParameter("@studyId", studyId.Trim());
                    SqlParameter sp2 = new SqlParameter("@subjectkey", _subjectKey);
                    DataTable dt = db.ExecuteSelectQuery(selectQuery, new SqlParameter[] { sp1, sp2 }, false);
                    gvScrUploadedDocList.DataSource = dt;
                    DesignUploadedFileListGrid();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
            }
        }
        private void DesignUploadedFileListGrid()
        {
            try
            {
                gvScrUploadedDocList.Columns["Id"].IsVisible = false;
                gvScrUploadedDocList.Columns["SubjectKey"].IsVisible = false;
                //gvScrUploadedDocList.Columns["Document"].IsVisible = false;
                gvScrUploadedDocList.Columns["ModifiedBy"].IsVisible = false;
                gvScrUploadedDocList.Columns["ModifiedDate"].IsVisible = false;
                gvScrUploadedDocList.Columns["StudyID"].HeaderText = "Study ID";
                gvScrUploadedDocList.Columns["FileName"].HeaderText = "File Name";
                gvScrUploadedDocList.Columns["CreatedBy"].HeaderText = "Uploaded By";
                gvScrUploadedDocList.Columns["CreatedDate"].HeaderText = "Uploaded Date";
                gvScrUploadedDocList.Columns["ModifiedDate"].FormatString = "{0:MMM dd yyyy}";
                gvScrUploadedDocList.Columns["CreatedDate"].FormatString = "{0:MMM dd yyyy}";
                gvScrUploadedDocList.Columns["Reason"].WrapText = true;
                gvScrUploadedDocList.Columns["Reason"].Width = (int)gvScrUploadedDocList.Width * 19 / 100;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void gvScrUploadedDocList_CommandCellClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                txtScrUploadedDocReason.ResetText();
                txtScrUploadedDocTitle.ResetText();
                lblScrUploadedFileName.ResetText();
                if (e.Column.Name.Equals("btnEdit"))
                {
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        //string selectQuery = "select Id,SubjectKey,StudyID,Title,Reason,ModifiedBy,ModifiedDate,FileName,CreatedBy,CreatedDate from ScreeningUploadedDocuments where Id=@Id";
                        string selectQuery = "select Id,SubjectKey,StudyID,Title,Reason,ModifiedBy,ModifiedDate,FileName,CreatedBy,CreatedDate from UploadedDocuments where Id=@Id";
                        SqlParameter sp1 = new SqlParameter("@Id", e.Row.Cells["Id"].Value.ToString());
                        DataTable dt = db.ExecuteSelectQuery(selectQuery, new SqlParameter[] { sp1 }, false);
                        if (dt.Rows.Count > 0)
                        {
                            uploadedFileId = int.Parse(dt.Rows[0]["Id"].ToString());
                            txtScrUploadedDocReason.Text = dt.Rows[0]["Reason"].ToString();
                            txtScrUploadedDocTitle.Text = dt.Rows[0]["Title"].ToString();
                            lblScrUploadedFileName.Text = dt.Rows[0]["FileName"].ToString();
                            uploadedFile = dt.Rows[0]["FileName"].ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Info);
            }
        }
        private void gvScrUploadedDocList_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                //uploadedFile = e.Row.Cells["FileName"].Value.ToString();
                byte[] _fileBytes = null;
                using (DbConnection db = new DbConnection())
                {
                    db.OpenConnection();
                    //string _query = "select Document from ScreeningUploadedDocuments where Id='" + e.Row.Cells["Id"].Value + "'";
                    string _query = "select Document from UploadedDocuments where Id='" + e.Row.Cells["Id"].Value + "'";
                    SqlCommand cmd = new SqlCommand(_query, db.GetConnection());
                    SqlDataReader _sdr = cmd.ExecuteReader();
                    if (_sdr.Read())
                    {
                        _fileBytes = (byte[])_sdr["Document"];
                    }
                }
                if (_fileBytes != null && _fileBytes.Length > 0)
                {
                    MemoryStream ms = new MemoryStream(_fileBytes);
                    using (frmViewUploadedDocument objUploadedDoc = new frmViewUploadedDocument())
                    {
                        objUploadedDoc.uploadedDocument = ms;
                        objUploadedDoc.ShowDialog();
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Uploaded Documents", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        #endregion

        //****************************** IECC ******************************
        #region  IECC
        private void rgvIECCInclusion_CurrentRowChanging(object sender, CurrentRowChangingEventArgs e)
        {
            try
            {
                if (rgvIECCInclusion.CurrentRow != null && rgvIECCInclusion.CurrentRow.Index >= 0)
                {
                    if (!CheckIfIECCQuestionAnsIsSelected())
                    {
                        lastIECCActiveGrid = rgvIECCInclusion;
                        rgvIECCInclusion.Focus();
                        e.Cancel = true;
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Get IECC Inclusion", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void rgvIECCExclusion_CurrentRowChanging(object sender, CurrentRowChangingEventArgs e)
        {
            try
            {
                if (rgvIECCExclusion.CurrentRow != null && rgvIECCExclusion.CurrentRow.Index >= 0)
                {
                    if (!CheckIfIECCQuestionAnsIsSelected())
                    {
                        lastIECCActiveGrid = rgvIECCExclusion;
                        rgvIECCExclusion.Focus();
                        e.Cancel = true;
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Get IECC Exclusion", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void btnSCIECCVerify_Click(object sender, EventArgs e)
        {
            try
            {
                if (!OnScreeningHelper.IsScreeningIECCQuestionsBySubjectKeySigned(ValueOfKey, studyId))
                {
                    HelperFunctions.ShowMessageBox("Screening IECC has not been done yet.", "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string _tab = string.Empty;
                string _comments = string.Empty;
                if (OnScreeningStatusHelper.IsScreeningSubjectFailed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been failed already.", "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDropped(studyId, ValueOfKey, out _tab, out _comments))
                {

                    HelperFunctions.ShowMessageBox("Subject has been dropped already.", "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                if (OnScreeningStatusHelper.IsScreeningSubjectDismissed(studyId, ValueOfKey, out _tab, out _comments))
                {
                    HelperFunctions.ShowMessageBox("Subject has been dismissed already.", "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                string tabName = "IECC";
                string reason = String.Format("Unlocking Screening IECC form to verify answer.");
                if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                {
                    return;
                }
                btnIECCEsign.Enabled = true;
                btnFailedIECC.Enabled = true;
                btnIECCNext.Enabled = true;
                CommonHelpers.SetReadOnlyProperties(rgbIECCExclusionAns, false);
                CommonHelpers.SetReadOnlyProperties(rgbIECCInclusionAns, false);
                CommonHelpers.SetReadOnlyProperties(rpnlIECCFooter, false);
                HelperFunctions.ShowMessageBox("Screening IECC form has been unlocked. You can modify answer now.", "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
            }
        }
        private void LoadIECCEsignedInfo()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
                    {
                        connection.Open();
                        string checkExist = string.Format(@"SELECT top 1 * From [dbo].[ScreeningIECCQuestionsBySubjectKey] WHERE StudyID='" + studyId + "' and SubjectKey='" + _subjectKey + "' order by eSignedDate desc");
                        SqlCommand cmd = new SqlCommand(checkExist, connection);
                        SqlDataReader dr = cmd.ExecuteReader();
                        if (dr.Read())
                        {
                            lblSCIECCEsignedBy.Text = dr["eSignedBy"].ToString();
                            if (!string.IsNullOrEmpty(dr["eSignedDate"].ToString()))
                            {
                                DateTime _esignedDate = default(DateTime);
                                if (DateTime.TryParse(dr["eSignedDate"].ToString(), out _esignedDate) && !_esignedDate.Equals(default(DateTime)))
                                {
                                    lblSCIECCEsignedDate.Text = CommonHelpers.PCMSDateTimeFormat(_esignedDate);
                                }
                            }
                        }
                        connection.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void LoadIECCPIComments()
        {
            DataTable _dt = new DataTable();
            using (DbConnection db = new DbConnection())
            {
                db.OpenConnection();
                string _query = string.Format(@"select
InvestigatorComment
from
InvestigatorScreeningIECCBySubjectKey
where StudyID='" + studyId + "' and SubjectKey=" + ValueOfKey);
                _dt = db.ExecuteSelectQuery(_query, null, false);
            }
            if (_dt.Rows.Count > 0)
            {
                lblSCIECCPIComments.Visible = true;
                txtSCIECCPIComments.Visible = true;
                txtSCIECCPIComments.Text = _dt.Rows[0]["InvestigatorComment"].ToString();
            }
            else
            {
                lblSCIECCPIComments.Visible = false;
                txtSCIECCPIComments.Visible = false;
            }
        }
        private void DesigndtScreeningIECCQuestionsAnsTable()
        {
            dtScreeningIECCQuestionsAns = new DataTable();
            dtScreeningIECCQuestionsAns.Columns.Add("Number");
            dtScreeningIECCQuestionsAns.Columns.Add("Question");
            dtScreeningIECCQuestionsAns.Columns.Add("YesNoNA");
            dtScreeningIECCQuestionsAns.Columns.Add("QuestionType");
            dtScreeningIECCQuestionsAns.Columns.Add("Comments");
        }

        /// <summary>
        /// Disables IECC controls including parent control passed in parameter
        /// </summary>
        /// <param name="con">parent control</param>
        private void DisableIECCControls(Control con)
        {
            //foreach (Control c in con.Controls)
            //{
            //    DisableIECCControls(c);
            //}
            //con.Enabled = false;
            foreach (Control control in splitContainer7.Panel1.Controls)
            {
                control.Enabled = false;
            }
            foreach (Control control in splitContainer7.Panel2.Controls)
            {
                control.Enabled = false;
            }
            foreach (Control control in rpnlIECCFooter.Controls)
            {
                control.Enabled = false;
            }
        }

        /// <summary>
        /// Enables IECC Controls
        /// </summary>
        /// <param name="con"></param>
        private void EnableIECCControls(Control con)
        {
            if (con != null)
            {
                con.Enabled = true;
                foreach (Control c in con.Controls)
                {
                    EnableIECCControls(c);
                }
            }
        }

        /// <summary>
        /// Checks if IECC has been signed
        /// </summary>
        /// <param name="subjectKey"></param>
        private void CheckIfIECCSigned(string subjectKey, SubjectStatusCode.Status _status)
        {
            bool IsScreeningIECCQuestionsBySubjectKeySigned = OnScreeningHelper.IsScreeningIECCQuestionsBySubjectKeySigned(subjectKey, studyId);
            Image Complete = new Bitmap(Properties.Resources.lock_closed);
            if (IsAllTasksBeforeIECCEsigned)
            {
                rgbIECC.Visible = true;
                if (_SelectedPage.Equals(pgvIECC))
                {
                    LoadDataInIECCInclusionGrid();
                    LoadDataInIECCExclusionGrid();
                }

            }
            else
            {
                rgbIECC.Visible = false;
            }
            if (IsScreeningIECCQuestionsBySubjectKeySigned)
            {
                pgvIECC.Image = Complete;
                if (_SelectedPage.Equals(pgvIECC))
                {
                    LoadIECCEsignedInfo();
                    LoadIECCPIComments();
                    btnIECCEsign.Enabled = false;
                    btnFailedIECC.Enabled = false;
                    CommonHelpers.SetReadOnlyProperties(rpnlIECCFooter, true);
                    CommonHelpers.SetReadOnlyProperties(rgbIECCExclusionAns, true);
                    CommonHelpers.SetReadOnlyProperties(rgbIECCInclusionAns, true);
                    btnSCIECCVerify.Enabled = true;
                }
            }
            else
            {
                if (_SelectedPage.Equals(pgvIECC))
                {
                    btnFailedIECC.Enabled = true;
                    rgbIECCInclusionAns.Enabled = true;
                    rgbIECCExclusionAns.Enabled = true;
                    // EnableIECCControls(pgvIECC);
                    CommonHelpers.SetReadOnlyProperties(rgbIECCExclusionAns, false);
                    CommonHelpers.SetReadOnlyProperties(rgbIECCInclusionAns, false);
                    CommonHelpers.SetCompleteIncompleteImage(pgvIECC, false, _status);
                    btnSCIECCVerify.Enabled = false;
                }

            }
        }

        /// <summary>
        /// Clears if IECC Inclusion data
        /// </summary>
        private void ClearIECCInclusionData()
        {
            foreach (Control ctrl in rgbIECCInclusionAns.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
        }

        /// <summary>
        /// Clears IECC Exclusion data
        /// </summary>
        private void ClearIECCExclusionData()
        {
            foreach (Control ctrl in rgbIECCExclusionAns.Controls)
            {
                if (ctrl is RadCheckBox)
                {
                    RadCheckBox ckBox = (RadCheckBox)ctrl;
                    ckBox.Checked = false;
                    ckBox.Visible = false;
                }
                if (ctrl is RadTextBox)
                {
                    RadTextBox txtBox = (RadTextBox)ctrl;
                    txtBox.Clear();
                }
            }
        }

        /// <summary>
        /// Loads data in IECC Inclusion grid
        /// </summary>
        private void LoadDataInIECCInclusionGrid()
        {
            try
            {
                if (IsStudyIDSelected())
                {
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        SqlParameter[] sqlParams;
                        SqlParameter sp1 = new SqlParameter("@Department", "S");
                        SqlParameter sp2 = new SqlParameter("@StudyID", studyId);
                        sqlParams = new SqlParameter[] { sp1, sp2 };
                        DataTable dtIECCInclusions = DbConn.ExecuteSelectQuery("spGetAllInclusionQuestionsByDepartmentAndStudyID", sqlParams, true);
                        rgvIECCInclusion.DataSource = dtIECCInclusions;
                        CustomizeIEGrid(rgvIECCInclusion);
                        DbConn.CloseConnection();
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }

        }

        /// <summary>
        /// Loads data in IECC Exclusion Grid
        /// </summary>
        private void LoadDataInIECCExclusionGrid()
        {
            try
            {
                if (IsStudyIDSelected())
                {
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        SqlParameter[] sqlParams;
                        SqlParameter sp1 = new SqlParameter("@Department", "S");
                        SqlParameter sp2 = new SqlParameter("@StudyID", studyId);
                        sqlParams = new SqlParameter[] { sp1, sp2 };
                        DataTable dtIECCExclusions = DbConn.ExecuteSelectQuery("spGetAllExclusionQuestionsByDepartmentAndStudyID", sqlParams, true);
                        rgvIECCExclusion.DataSource = dtIECCExclusions;
                        CustomizeIEGrid(rgvIECCExclusion);
                        DbConn.CloseConnection();
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Makes unnecessary fields hidden
        /// </summary>
        /// <param name="rgv"></param>
        private void CustomizeIEGrid(RadGridView rgv)
        {
            try
            {
                rgv.Columns["StudyID"].IsVisible = false;
                rgv.Columns["Number"].IsVisible = false;
                rgv.Columns["Department"].IsVisible = false;
                rgv.Columns["Status"].IsVisible = false;
                rgv.Columns["ModifiedBy"].IsVisible = false;
                rgv.Columns["ModifiedAt"].IsVisible = false;
                rgv.Columns["AddedBy"].IsVisible = false;
                rgv.Columns["AddedDate"].IsVisible = false;
                if (rgv.Name == "rgvPhysicalIEInclusion" || rgv.Name == "rgvIECCInclusion")
                {
                    rgv.Columns["LockedBy"].IsVisible = false;
                    rgv.Columns["LockedAt"].IsVisible = false;
                }
                if (rgv.Name == "rgvIECCInclusion")
                {
                    rgv.Columns["Inclusion"].WrapText = true;
                }
                if (rgv.Name == "rgvIECCExclusion")
                {
                    rgv.Columns["Exclusion"].WrapText = true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void rgvIECCExclusion_CellClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                //if (!SaveIECCQuestionAnswerInDataTable())
                //    return;
                lastIECCActiveGrid = rgvIECCExclusion;
                if (rgvIECCExclusion.CurrentRow.Index >= 0)
                {
                    //if (!CheckIfIECCQuestionAnsIsSelected())
                    //{
                    //    rgvIECCExclusion.CurrentRow.IsSelected = false;
                    //    rgvIECCExclusion.Focus();
                    //    //rgvIECCExclusion.CurrentRow = rgvIECCExclusion.Rows.Cast<GridViewRowInfo>().Where(r => r.Index == e.RowIndex - 1).Select(r => r).FirstOrDefault();
                    //    return;
                    //}
                    // SaveIECCQuestionAnswerInDataTable();
                    //{
                    //    rgvIECCExclusion.CurrentRow.IsSelected = false;
                    //    rgvIECCExclusion.Focus();
                    //    return;
                    //}

                    ClearIECCExclusionData();
                    //populate question in text box
                    PopulateIECCExclusionQuestionInTextBox();
                    //populate ans
                    LoadIECCExclusionQuestionsAnsData();

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Get IECC Exclusion", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// Loads IECC Inclusion question in right side with answer fields
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rgvIECCInclusion_CellClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                if (rgvIECCInclusion.CurrentRow.Index >= 0)
                {
                    lastIECCActiveGrid = rgvIECCInclusion;
                    //if (!CheckIfIECCQuestionAnsIsSelected())
                    //{
                    //    rgvIECCInclusion.CurrentRow.IsSelected = false;
                    //    rgvIECCInclusion.Focus();
                    //    return;
                    //}
                    // SaveIECCQuestionAnswerInDataTable();
                    ClearIECCInclusionData();
                    //populate question
                    PopulateIECCInclusionQuestionInTextBox();
                    //populate answer
                    LoadIECCInclusionQuestionsAnsData();

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Get IECC Inclusion", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private bool CheckIfIECCQuestionAnsIsSelected()
        {
            try
            {
                if (lastIECCActiveGrid != null)
                {
                    if (!string.IsNullOrEmpty(rtxtIECCInclusionQ1.Text.Trim()) && lastIECCActiveGrid.Name == "rgvIECCInclusion" && (!rchkIECCInclusionQ1NA.Checked && !rchkIECCInclusionQ1No.Checked && !rchkIECCInclusionQ1Yes.Checked))
                    {
                        HelperFunctions.ShowMessageBox("Please select any one answer.", "IECC", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return false;
                    }
                    if (!string.IsNullOrEmpty(rtxtIECCExclusionQ1.Text.Trim()) && lastIECCActiveGrid.Name == "rgvIECCExclusion" && (!rchkIECCExclusionQ1No.Checked && !rchkIECCExclusionQ1Yes.Checked))
                    {
                        HelperFunctions.ShowMessageBox("Please select any one answer.", "IECC", MessageBoxButtons.OK, RadMessageIcon.Info);
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }

        private bool SaveIECCQuestionAnswerInDataTable()
        {
            try
            {
                if (lastIECCActiveGrid == null && (string.IsNullOrEmpty(rtxtIECCInclusionQ1.Text.Trim()) && string.IsNullOrEmpty(rtxtIECCExclusionQ1.Text.Trim())))
                {
                    if (dtScreeningIECCQuestionsAns != null)
                    {
                        HelperFunctions.ShowMessageBox("Please select a question first.", Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Info);
                        return false;
                    }
                }
                string _Question = string.Empty;
                string chkAns = string.Empty;
                string questionType = string.Empty;
                string _comments = string.Empty;
                if (dtScreeningIECCQuestionsAns == null)
                {
                    DesigndtScreeningIECCQuestionsAnsTable();
                }
                if (lastIECCActiveGrid.Name == "rgvIECCInclusion")
                {
                    questionType = "Inclusion";
                    _Question = rtxtIECCInclusionQ1.Text.Trim();
                    if (rchkIECCInclusionQ1Yes.Checked)
                    {
                        chkAns = "True";
                    }
                    else if (rchkIECCInclusionQ1No.Checked)
                    {
                        chkAns = "False";
                    }
                    else if (rchkIECCInclusionQ1NA.Checked)
                    {
                        chkAns = "NA";
                    }
                    _comments = txtSCInclusionComment.Text.Trim();
                }
                if (lastIECCActiveGrid.Name == "rgvIECCExclusion")
                {
                    //_QuestionNumber = Convert.ToInt32(rgvIECCExclusion.CurrentRow.Cells["Number"].Value);
                    questionType = "Exclusion";
                    _Question = rtxtIECCExclusionQ1.Text.Trim();
                    if (rchkIECCExclusionQ1Yes.Checked)
                    {
                        chkAns = "True";
                    }
                    else if (rchkIECCExclusionQ1No.Checked)
                    {
                        chkAns = "False";
                    }
                    _comments = txtSCExclusionComment.Text.Trim();
                }
                if (!string.IsNullOrEmpty(rtxtIECCInclusionQ1.Text.Trim()) || !string.IsNullOrEmpty(rtxtIECCExclusionQ1.Text.Trim()))
                {
                    if (dtScreeningIECCQuestionsAns != null && !string.IsNullOrEmpty(_Question))
                    {
                        DataRow dr = dtScreeningIECCQuestionsAns.Select("Number='" + _QuestionNumber + "' and QuestionType='" + questionType + "'").FirstOrDefault();
                        if (dr == null)
                        {
                            dr = dtScreeningIECCQuestionsAns.NewRow();
                            dr["Number"] = _QuestionNumber;
                            dr["YesNoNA"] = chkAns;
                            dr["QuestionType"] = questionType;
                            dr["Question"] = _Question;
                            dr["Comments"] = _comments;
                            dtScreeningIECCQuestionsAns.Rows.Add(dr);
                            _CounterAnsweredIECC++;
                        }
                        else
                        {
                            dr["Number"] = _QuestionNumber;
                            dr["YesNoNA"] = chkAns;
                            dr["QuestionType"] = questionType;
                            dr["Question"] = _Question;
                            dr["Comments"] = _comments;
                            dtScreeningIECCQuestionsAns.AcceptChanges();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "IECC", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }
        private void PopulateIECCInclusionQuestionInTextBox()
        {
            try
            {
                _StudyID = rgvIECCInclusion.CurrentRow.Cells["StudyID"].Value.ToString();
                _Question = rgvIECCInclusion.CurrentRow.Cells["Inclusion"].Value.ToString();
                _QuestionNumber = Convert.ToInt32(rgvIECCInclusion.CurrentRow.Cells["Number"].Value);
                if (!OnScreeningHelper.IsScreeningIECCQuestionsBySubjectKeySigned(ValueOfKey, studyId))
                {
                    btnIECCNext.Enabled = true;
                }
                if (!string.IsNullOrEmpty(_Question))
                {
                    rtxtIECCInclusionQ1.ReadOnly = true;
                    rtxtIECCInclusionQ1.Text = _Question;
                    rgbIECCInclusionAns.Visible = true;
                    rchkIECCInclusionQ1Yes.Visible = true;
                    rchkIECCInclusionQ1No.Visible = true;
                    rchkIECCInclusionQ1NA.Visible = true;
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "IECC Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            // CheckSubjectDroppedFailedIECC(_subjectKey.ToString());
        }
        private void LoadIECCInclusionQuestionsAnsData()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    //  _QuestionNumber = Convert.ToInt32(rgvIECCInclusion.CurrentRow.Cells["Number"].Value);
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        SqlParameter[] sqlParams;
                        SqlParameter sp1 = new SqlParameter("@StudyID", studyId);
                        SqlParameter sp2 = new SqlParameter("@SubjectKey", ValueOfKey);
                        SqlParameter sp3 = new SqlParameter("@Number", _QuestionNumber);
                        sqlParams = new SqlParameter[] { sp1, sp2, sp3 };
                        DataTable dtInclusionAns = DbConn.ExecuteSelectQuery("spGetAllScreeningIECCInclusionAnsByStudyIDSubjectKeyAndQN", sqlParams, true);
                        DataRow dr = null;
                        if (dtScreeningIECCQuestionsAns != null && dtScreeningIECCQuestionsAns.Rows.Count > 0)
                        {
                            dr = dtScreeningIECCQuestionsAns.Select("Number='" + _QuestionNumber + "' and QuestionType='Inclusion'").FirstOrDefault();
                        }
                        if (dtInclusionAns.Rows.Count > 0 && dr == null)
                        {
                            dr = dtInclusionAns.Rows[0];
                        }
                        if (dr != null)
                        {
                            if (dr["YesNoNA"].ToString() == "True")
                            {
                                rchkIECCInclusionQ1Yes.CheckStateChanged -= new System.EventHandler(rchkIECCInclusionQ1Yes_CheckStateChanged);
                                rchkIECCInclusionQ1Yes.Checked = true;
                                rchkIECCInclusionQ1Yes.CheckStateChanged += new System.EventHandler(rchkIECCInclusionQ1Yes_CheckStateChanged);
                            }
                            else if (dr["YesNoNA"].ToString() == "False")
                            {
                                rchkIECCInclusionQ1No.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rchkIECCInclusionQ1No_CheckStateChanging);
                                rchkIECCInclusionQ1No.CheckStateChanged -= new System.EventHandler(rchkIECCInclusionQ1No_CheckStateChanged);
                                rchkIECCInclusionQ1No.Checked = true;
                                rchkIECCInclusionQ1No.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rchkIECCInclusionQ1No_CheckStateChanging);
                                rchkIECCInclusionQ1No.CheckStateChanged += new System.EventHandler(rchkIECCInclusionQ1No_CheckStateChanged);
                            }
                            else if (dr["YesNoNA"].ToString() == "NA")
                            {
                                rchkIECCInclusionQ1NA.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(rchkIECCInclusionQ1NA_CheckStateChanging);
                                rchkIECCInclusionQ1NA.CheckStateChanged -= new System.EventHandler(rchkIECCInclusionQ1NA_CheckStateChanged);
                                rchkIECCInclusionQ1NA.Checked = true;
                                rchkIECCInclusionQ1NA.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(rchkIECCInclusionQ1NA_CheckStateChanging);
                                rchkIECCInclusionQ1NA.CheckStateChanged += new System.EventHandler(rchkIECCInclusionQ1NA_CheckStateChanged);
                            }
                            txtSCInclusionComment.Text = dr["Comments"].ToString();
                            if (dtInclusionAns.Rows.Count > 0)
                                SaveIECCQuestionAnswerInDataTable();
                        }

                        //if (dtInclusionAns.Rows.Count > 0)
                        //{
                        //    if (dtInclusionAns.Rows[0]["YesNoNA"].ToString() == "True")
                        //    {
                        //        rchkIECCInclusionQ1Yes.Checked = true;
                        //    }
                        //    else if (dtInclusionAns.Rows[0]["YesNoNA"].ToString() == "False")
                        //    {
                        //        rchkIECCInclusionQ1No.Checked = true;
                        //    }
                        //    else
                        //    {
                        //        rchkIECCInclusionQ1NA.Checked = true;
                        //    }
                        //}
                        //else
                        //{
                        //    if (dtScreeningIECCQuestionsAns != null)
                        //    {
                        //        DataRow dr = dtScreeningIECCQuestionsAns.Select("Number='" + _QuestionNumber + "' and QuestionType='Inclusion'").FirstOrDefault();
                        //        if (dr != null)
                        //        {
                        //            if (dr["YesNoNA"].ToString() == "True")
                        //            {
                        //                rchkIECCInclusionQ1Yes.Checked = true;
                        //            }
                        //            else if (dr["YesNoNA"].ToString() == "False")
                        //            {
                        //                rchkIECCInclusionQ1No.Checked = true;
                        //            }
                        //            else if (dr["YesNoNA"].ToString() == "NA")
                        //            {
                        //                rchkIECCInclusionQ1NA.Checked = true;
                        //            }
                        //        }
                        //    }
                        //}
                        DbConn.CloseConnection();
                    }
                }
            }
            catch (SqlException ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "IECC Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            // CheckSubjectDroppedFailedIECC(_subjectKey.ToString());
        }
        private void PopulateIECCExclusionQuestionInTextBox()
        {
            try
            {
                _StudyID = rgvIECCExclusion.CurrentRow.Cells["StudyID"].Value.ToString();
                _Question = rgvIECCExclusion.CurrentRow.Cells["Exclusion"].Value.ToString();
                _QuestionNumber = Convert.ToInt32(rgvIECCExclusion.CurrentRow.Cells["Number"].Value);
                if (!OnScreeningHelper.IsScreeningIECCQuestionsBySubjectKeySigned(ValueOfKey, studyId))
                {
                    btnIECCNext.Enabled = true;
                }
                if (!string.IsNullOrEmpty(_Question))
                {
                    rtxtIECCExclusionQ1.ReadOnly = true;
                    rtxtIECCExclusionQ1.Text = _Question;
                    rgbIECCExclusionAns.Visible = true;
                    rchkIECCExclusionQ1No.Visible = true;
                    rchkIECCExclusionQ1Yes.Visible = true;
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "IECC Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            CheckSubjectDroppedFailedIECC(_subjectKey.ToString());
        }
        private void LoadIECCExclusionQuestionsAnsData()
        {
            try
            {
                if (IsStudyIDSelected() && ddSubjects.SelectedIndex > -1)
                {
                    using (DbConnection DbConn = new DbConnection())
                    {
                        DbConn.OpenConnection();
                        SqlParameter[] sqlParams;
                        SqlParameter sp1 = new SqlParameter("@StudyID", _StudyID);
                        SqlParameter sp2 = new SqlParameter("@SubjectKey", ValueOfKey);
                        SqlParameter sp3 = new SqlParameter("@Number", _QuestionNumber);
                        sqlParams = new SqlParameter[] { sp1, sp2, sp3 };
                        DataTable dtExclusionAns = DbConn.ExecuteSelectQuery("spGetAllScreeningIECCExclusionAnsByStudyIDSubjectKeyAndQN", sqlParams, true);
                        DataRow dr = null;
                        if (dtScreeningIECCQuestionsAns != null && dtScreeningIECCQuestionsAns.Rows.Count > 0)
                        {
                            dr = dtScreeningIECCQuestionsAns.Select("Number='" + _QuestionNumber + "' and QuestionType='Exclusion'").FirstOrDefault();
                        }
                        if (dtExclusionAns.Rows.Count > 0 && dr == null)
                        {
                            dr = dtExclusionAns.Rows[0];
                        }
                        if (dr != null)
                        {
                            if (dr["YesNoNA"].ToString() == "True")
                            {
                                this.rchkIECCExclusionQ1Yes.CheckStateChanging -= new Telerik.WinControls.UI.CheckStateChangingEventHandler(this.rchkIECCExclusionQ1Yes_CheckStateChanging);
                                rchkIECCExclusionQ1Yes.CheckStateChanged -= new System.EventHandler(rchkIECCExclusionQ1Yes_CheckStateChanged);
                                rchkIECCExclusionQ1Yes.Checked = true;
                                this.rchkIECCExclusionQ1Yes.CheckStateChanging += new Telerik.WinControls.UI.CheckStateChangingEventHandler(this.rchkIECCExclusionQ1Yes_CheckStateChanging);
                                rchkIECCExclusionQ1Yes.CheckStateChanged += new System.EventHandler(rchkIECCExclusionQ1Yes_CheckStateChanged);
                            }
                            else if (dr["YesNoNA"].ToString() == "False")
                            {
                                rchkIECCExclusionQ1No.CheckStateChanged -= new System.EventHandler(rchkIECCExclusionQ1No_CheckStateChanged);
                                rchkIECCExclusionQ1No.Checked = true;
                                rchkIECCExclusionQ1No.CheckStateChanged += new System.EventHandler(rchkIECCExclusionQ1No_CheckStateChanged);
                            }
                            txtSCExclusionComment.Text = dr["Comments"].ToString();
                            if (dtExclusionAns.Rows.Count > 0)
                                SaveIECCQuestionAnswerInDataTable();
                        }

                        //if (dtExclusionAns.Rows.Count > 0)
                        //{
                        //    if (dtExclusionAns.Rows[0]["YesNoNA"].ToString() == "True")
                        //    {
                        //        rchkIECCExclusionQ1Yes.Checked = true;
                        //    }
                        //    else
                        //    {
                        //        rchkIECCExclusionQ1No.Checked = true;
                        //    }

                        //}
                        //else
                        //{
                        //    if (dtScreeningIECCQuestionsAns != null)
                        //    {
                        //        DataRow dr = dtScreeningIECCQuestionsAns.Select("Number='" + _QuestionNumber + "' and QuestionType='Exclusion'").FirstOrDefault();
                        //        if (dr != null)
                        //        {
                        //            if (dr["YesNoNA"].ToString() == "True")
                        //            {
                        //                rchkIECCExclusionQ1Yes.Checked = true;
                        //            }
                        //            else if (dr["YesNoNA"].ToString() == "False")
                        //            {
                        //                rchkIECCExclusionQ1No.Checked = true;
                        //            }
                        //            else
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                        DbConn.CloseConnection();
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "IECC Questions", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            CheckSubjectDroppedFailedIECC(_subjectKey.ToString());
        }
        private void rchkIECCInclusionQ1Yes_CheckStateChanged(object sender, EventArgs e)
        {
            if (rchkIECCInclusionQ1Yes.Checked)
            {
                rchkIECCInclusionQ1No.Checked = false;
                rchkIECCInclusionQ1NA.Checked = false;
                SaveIECCQuestionAnswerInDataTable();
            }
        }

        /// <summary>
        /// IECC Inclusion question1 Yes/No toggle (No)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rchkIECCInclusionQ1No_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (rchkIECCInclusionQ1No.Checked)
                {
                    rchkIECCInclusionQ1Yes.Checked = false;
                    rchkIECCInclusionQ1NA.Checked = false;
                    SaveIECCQuestionAnswerInDataTable();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        /// IECC Inclusion question1 YesNO/NA toggle (NA)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rchkIECCInclusionQ1NA_CheckStateChanged(object sender, EventArgs e)
        {
            try
            {
                if (rchkIECCInclusionQ1NA.Checked)
                {
                    rchkIECCInclusionQ1Yes.Checked = false;
                    rchkIECCInclusionQ1No.Checked = false;
                    SaveIECCQuestionAnswerInDataTable();
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        private void IEECCNextQuestion()
        {
            //.......... Next Row.........
            int rowIndex = 0;
            if (lastIECCActiveGrid != null)
            {
                if (lastIECCActiveGrid.Name == "rgvIECCInclusion")
                {
                    //if (!rchkIECCInclusionQ1Yes.Checked && !rchkPhysicalIEInclusionQ1No.Checked && !rchkIECCInclusionQ1NA.Checked)
                    //{
                    //    HelperFunctions.ShowMessageBox("Please select answer.", "Inclusion", MessageBoxButtons.OK, RadMessageIcon.Info);
                    //    rgbIECCInclusionAns.Focus();
                    //    return;
                    //}
                    rowIndex = rgvIECCInclusion.Rows.IndexOf((GridViewDataRowInfo)rgvIECCInclusion.CurrentRow);
                    rowIndex++;
                    if (rowIndex >= rgvIECCInclusion.Rows.Count)
                        rowIndex = 0;
                    rgvIECCInclusion.CurrentRow = rgvIECCInclusion.Rows[rowIndex];
                    if (rowIndex >= 0)
                    {
                        //rgvIECCInclusion_CellClick(null, null);
                        //populate question
                        ClearIECCInclusionData();
                        PopulateIECCInclusionQuestionInTextBox();
                        //populate answer
                        LoadIECCInclusionQuestionsAnsData();
                    }
                }
                else if (lastIECCActiveGrid.Name == "rgvIECCExclusion")
                {
                    //if (!rchkIECCExclusionQ1Yes.Checked && !rchkIECCExclusionQ1No.Checked)
                    //{
                    //    HelperFunctions.ShowMessageBox("Please select answer.", "Exclusion", MessageBoxButtons.OK, RadMessageIcon.Info);
                    //    rgbIECCExclusionAns.Focus();
                    //    return;
                    //}
                    rowIndex = rgvIECCExclusion.Rows.IndexOf((GridViewDataRowInfo)rgvIECCExclusion.CurrentRow);
                    rowIndex++;
                    if (rowIndex >= rgvIECCExclusion.Rows.Count)
                        rowIndex = 0;
                    rgvIECCExclusion.CurrentRow = rgvIECCExclusion.Rows[rowIndex];
                    if (rowIndex >= 0)
                    {
                        //rgvIECCExclusion_CellClick(null, null);
                        //populate question in text box
                        ClearIECCExclusionData();
                        PopulateIECCExclusionQuestionInTextBox();
                        //populate ans
                        LoadIECCExclusionQuestionsAnsData();
                    }
                }
            }
        }

        private void SaveScreeningIECC(string actionAt, SubjectStatusCode.Status status)
        {
            try
            {
                if (!CheckIfIECCQuestionAnsIsSelected())
                    return;
                bool _ieccSigned = OnScreeningHelper.IsScreeningIECCQuestionsBySubjectKeySigned(ValueOfKey, studyId);
                if (_ieccSigned)
                {
                    if (HelperFunctions.ShowMessageBox("Screening IECC has already been signed. Do you still want to save(Y/N)?", "Screening IECC", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
                        return;
                }
                SaveIECCQuestionAnswerInDataTable();
                if (!_ieccSigned && _CounterAnsweredIECC != (rgvIECCInclusion.Rows.Count + rgvIECCExclusion.Rows.Count))
                {
                    HelperFunctions.ShowMessageBox("Please answer all the Inclusion and Exclusion questions first.", "IECC", MessageBoxButtons.OK, RadMessageIcon.Exclamation);
                    return;
                }
                bool? yesNoNA = default(bool);
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    bool _IsInsert = false;
                    tabName = "IECC";
                    reason = "Esigning IECC.";
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, "Influenza", reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    dbConn.BeginTransaction();
                    foreach (DataRow dr in dtScreeningIECCQuestionsAns.Rows)
                    {
                        string checkExistQuery = "SELECT * FROM [dbo].[ScreeningIECCQuestionsBySubjectKey] WHERE StudyID=@StudyID and SubjectKey=@SubjectKey and Number=@Number and QuestionType=@QuestionType";
                        SqlParameter[] sqlParams;
                        SqlParameter sp1 = new SqlParameter("@StudyID", studyId);
                        SqlParameter sp2 = new SqlParameter("@SubjectKey", ValueOfKey);
                        SqlParameter sp3 = new SqlParameter("@Number", dr["Number"]);
                        SqlParameter sp4 = new SqlParameter("@QuestionType", dr["QuestionType"]);
                        sqlParams = new SqlParameter[] { sp1, sp2, sp3, sp4 };

                        DataTable dtCheckExist = dbConn.ExecuteSelectQuery(checkExistQuery, sqlParams, false);
                        SqlParameter[] sqlSPParams;
                        if (dr["YesNoNA"].ToString() == "True")
                        {
                            yesNoNA = true;
                        }
                        else if (dr["YesNoNA"].ToString() == "False")
                        {
                            yesNoNA = false;
                        }
                        else if (dr["YesNoNA"].ToString() == "NA")
                        {
                            yesNoNA = null;
                        }
                        SqlParameter sp5 = new SqlParameter("@SubjectStatus", Convert.ToInt32(status));
                        SqlParameter sp6 = new SqlParameter("@Comments", dr["Comments"].ToString());
                        SqlParameter sp7 = new SqlParameter("@ModifiedDate", DateTime.Now);
                        SqlParameter sp8 = new SqlParameter("@eSignedBy", App.EsignedUser.UserName);
                        SqlParameter sp9 = new SqlParameter("@eSignedDate", DateTime.Now);
                        SqlParameter sp10 = new SqlParameter("@YesNoNA", yesNoNA);
                        SqlParameter sp11 = new SqlParameter("@ModifiedBy", App.EsignedUser.UserName);

                        sqlSPParams = new SqlParameter[] { sp1, sp2, sp3, sp4, sp5, sp6, sp7, sp8, sp9, sp10, sp11 };
                        if (dtCheckExist.Rows.Count > 0)
                        {
                            //string moduleName = "Screening IECC";
                            //tabName = "E-Sign IECC";
                            //string actions = string.Format("IECC-eSigned by :'" + App.EsignedUser.UserName + "'");
                            //if (!App.SaveChangesWithReason(actions, moduleName, "Update Answers for IECC (On Screening)", tabName))
                            //{
                            //    return;
                            //}

                            dbConn.ExecuteUpdateQuery("spUpdateScreeningIECCQuestionBySubjectKey", sqlSPParams, true);
                            rgbIECCExclusionAns.Visible = false;
                            rgbIECCInclusionAns.Visible = false;
                        }
                        else
                        {

                            dbConn.ExecuteInsertQuery("spInsertScreeningIECCQuestionBySubjectKey", sqlSPParams, true);
                            ClearIECCExclusionData();
                            ClearIECCInclusionData();
                            rgbIECCExclusionAns.Visible = false;
                            rgbIECCInclusionAns.Visible = false;
                            _IsInsert = true;
                        }
                    }

                    //.... Subject Status..........................

                    OnScreeningStatusHelper.SaveScreeningSubjectStatus(dbConn, studyId, _subjectKey, "OnScreeningIECC", status, txtIECCPFComment.Text);
                    OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(dbConn, studyId, _subjectKey.ToString(), "ScreeningIECCQuestionsBySubjectKey", pgvIECC.Name, actionAt, status, txtIECCPFComment.Text, App.EsignedUser.UserName);
                    if (_IsInsert)
                    {
                        string detail = "Screening IECC data have been added.";
                        App.EsignedUser.AddAudit(dbConn, "Screening-IECC", EnumModules.AuditAction.Insert.ToString(), detail, DateTime.Now, "", "");
                    }
                    dbConn.CommitTransaction();
                    dbConn.CloseConnection();
                    HelperFunctions.ShowMessageBox("Screening IECC Questions saved successfully. Subject can proceed.", "IEEC", MessageBoxButtons.OK, RadMessageIcon.Info);
                    LoadDataBySelectedTab();
                    //dtScreeningIECCQuestionsAns.Clear();
                    //dtScreeningIECCQuestionsAns = null;
                    //LoadIECCExclusionQuestionsAnsData();
                    //LoadIECCInclusionQuestionsAnsData();
                    //CheckeSign(_subjectKey.ToString());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void rchkIECCExclusionQ1Yes_CheckStateChanged(object sender, EventArgs e)
        {
            if (rchkIECCExclusionQ1Yes.Checked)
            {
                rchkIECCExclusionQ1No.Checked = false;
                SaveIECCQuestionAnswerInDataTable();
            }
        }

        /// <summary>
        /// IECC Exclusion question1 Yes/No toggle (No)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rchkIECCExclusionQ1No_CheckStateChanged(object sender, EventArgs e)
        {
            if (rchkIECCExclusionQ1No.Checked)
            {
                rchkIECCExclusionQ1Yes.Checked = false;
                SaveIECCQuestionAnswerInDataTable();
            }
        }

        /// <summary>
        /// sets value of lastIECCActiveGrid to rgvIECCInclusion, 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rgvIECCInclusion_Leave(object sender, EventArgs e)
        {
            lastIECCActiveGrid = rgvIECCInclusion;
        }

        /// <summary>
        /// sets value of lastIECCActiveGrid to rgvIECCExclusion
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rgvIECCExclusion_Leave(object sender, EventArgs e)
        {
            lastIECCActiveGrid = rgvIECCExclusion;
        }


        /// <summary>
        /// Enables and starts IECCTimer 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtScanIECCSubjectID_TextChanged(object sender, EventArgs e)
        {
            IECCTimer.Interval = (700);
            IECCTimer.Enabled = true;
            IECCTimer.Start();
        }

        /// <summary>
        /// This is called in every timer tick of IECCTimer reads data by subject and study selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void IECCTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                IECCTimer.Stop();
                if (string.IsNullOrEmpty(txtScanIECCSubjectID.Text.Trim()))
                    return;
                string subjectName = OnScreeningHelper.SubjectNamebyID(txtScanIECCSubjectID.Text);
                if (ddSubjects.Items.Contains(subjectName))
                {
                    ddSubjects.SelectedItem = ddSubjects.Items.AsEnumerable().FirstOrDefault(v => v.Text.Trim() == subjectName);
                }
                else
                {
                    HelperFunctions.ShowMessageBox("Subject not found.", "IECC", MessageBoxButtons.OK, RadMessageIcon.Info);
                    ClearSubjectBasicInfoAndImage();
                    ddSubjects.SelectedIndex = -1;
                }
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "IECC", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            finally
            {
                txtScanIECCSubjectID.ResetText();
            }
        }
        private bool ValidateScreeningIECCComment()
        {
            try
            {
                if (string.IsNullOrEmpty(txtIECCPFComment.Text.Trim()))
                {
                    HelperFunctions.ShowMessageBox("Please enter comments for fail.", "Screening IEEC", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }
        private bool ValidateCommonScreeningRequiredFields()
        {
            try
            {
                if (!IsStudyIDSelected())
                {
                    HelperFunctions.ShowMessageBox("Please select a study.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }
                if (ddSubjects.SelectedIndex < 0)
                {
                    HelperFunctions.ShowMessageBox("Please select a subject.", "Screening", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return false;
                }

            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            return true;
        }
        private bool IsStudyIDSelected()
        {
            try
            {
                if (string.IsNullOrEmpty(studyId) || studyId == "Select a Project")
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return true;
        }
        /// <summary>
        ///  Proceed IECC
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnIECCEsign_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                SaveScreeningIECC("ScreeningIECCProceed", SubjectStatusCode.Status.Pass);
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        /// <summary>
        ///  Next IECC Question
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnIECCNext_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                //if (!CheckIfIECCQuestionAnsIsSelected())
                //    return;
                if (!SaveIECCQuestionAnswerInDataTable())
                    return;
                IEECCNextQuestion();
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Screening IECC", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }


        /// <summary>
        ///  Subject Failed IECC
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnFailedIECC_Click(object sender, EventArgs e)
        {
            try
            {
                if (!ValidateCommonScreeningRequiredFields())
                    return;
                if (!ValidateScreeningIECCComment())
                    return;
                SaveScreeningIECC("ScreeningIECCFail", SubjectStatusCode.Status.Fail);
                HelperFunctions.ShowMessageBox("Screening IECC Questions saved successfully. Subject can proceed.", "IEEC", MessageBoxButtons.OK, RadMessageIcon.Info);
                LoadDataBySelectedTab();
                ////................ Disable Controls..............
                //btnBloodSample.Enabled = false;
                //btnClinetInfo.Enabled = false;
                //DisableAllControlsAfterSubjectDropIECC();
                //pgvConsent.Image = null;
                //pgvPCF.Image = null;
                //pgvVCF.Image = null;
                //pgvICF.Image = null;
                //pgvInfluenza.Image = null;
                //pgvIDVerfication.Image = null;
                //pgvMedicalInterview.Image = null;
                //pgvDemographics.Image = null;
                //pgvMedicalHistory.Image = null;
                //pgvScreeningEvaluations.Image = null;
                //pgvHeightWeight.Image = null;
                //pgvVitals.Image = null;
                ////pgvECG.Image = null;
                //Image Failed = new Bitmap(Properties.Resources.FailedT1);
                //pgvIECC.Image = Failed;
                //pgvScreeningUrineSample.Image = null;
                //pgvUrineTests.Image = null;
            }
            catch (Exception ex)
            {
                HelperFunctions.ShowMessageBox(ex.ToString(), "Error", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
            //try
            //{
            //    //if (ddSubjects.SelectedIndex > -1)
            //    //{
            //    //    moduleName = "IECC";
            //    //    tabName = "Failed IECC";
            //    //    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
            //    //    string actions = string.Format("IECC -Failed by :'" + App.EsignedUser.UserName + "'");
            //    //    if (!App.SaveChangesWithReason("ESignature", ModuleNames,GetSelectedPage().Text.Trim(),reason, tabName,myBatchAudit))
            //    //        return;
            //        //using (SqlConnection connection = new SqlConnection(DatabaseHelper.ConnectionString))
            //        //{
            //        //    connection.Open();
            //        //    string checkExist = string.Format(@"(SELECT COUNT(*) FROM [dbo].[ScreeningIECCQuestionsBySubjectKey] WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "')");

            //        //    string InsertQuery = string.Format(@"INSERT INTO [dbo].[ScreeningIECCQuestionsBySubjectKey]
            //        //          (StudyID,SubjectKey,Number,SubjectStatus,Comments,eSignedBy,eSignedDate,QuestionType) VALUES
            //        //        (@StudyId,@subjectkey,@number,@Status,@Comments,@eSignedBy,@eSignedDate,@questiontype)");



            //        //    SqlCommand command = new SqlCommand(InsertQuery, connection);
            //        //    command.Parameters.AddWithValue("@StudyID", studyId);
            //        //    command.Parameters.AddWithValue("@SubjectKey", _subjectKey);
            //        //    command.Parameters.AddWithValue("@number", default(int));
            //        //    command.Parameters.AddWithValue("@Status", (int)SubjectStatusCode.Status.Dropped);
            //        //    command.Parameters.AddWithValue("@Comments", txtIECCPFComment.Text);

            //        //    command.Parameters.AddWithValue("@eSignedBy", App.EsignedUser.UserName);
            //        //    command.Parameters.AddWithValue("@eSignedDate",DateTime.Now);
            //        //    command.Parameters.AddWithValue("@questiontype", "NA");

            //        //    SqlCommand cmd = new SqlCommand(checkExist, connection);
            //        //    int count = (int)cmd.ExecuteScalar();
            //        //    if (count > 0)
            //        //    {
            //        //        string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningIECCQuestionsBySubjectKey] SET Number=@number,SubjectStatus=@Status,Comments=@Comments,eSignedBy=@eSignedBy,eSignedDate=@eSignedDate,QuestionType=@questiontype WHERE SubjectKey='" + _subjectKey + "' and StudyId='" + studyId + "'");
            //        //        SqlCommand cmdUpdate = new SqlCommand(UpdateQuery, connection);
            //        //        cmdUpdate.Parameters.AddWithValue("@number", default(int));
            //        //        cmdUpdate.Parameters.AddWithValue("@Status", (int)SubjectStatusCode.Status.Dropped);
            //        //        cmdUpdate.Parameters.AddWithValue("@Comments", txtIECCPFComment.Text);

            //        //        cmdUpdate.Parameters.AddWithValue("@eSignedBy", App.EsignedUser.UserName);
            //        //        cmdUpdate.Parameters.AddWithValue("@eSignedDate",DateTime.Now);
            //        //        cmdUpdate.Parameters.AddWithValue("@questiontype", "NA");
            //        //        cmdUpdate.ExecuteNonQuery();
            //        //    }
            //        //    else
            //        //    {

            //        //        command.ExecuteNonQuery();
            //        //    }
            //        //    //.... Subject Status..........................
            //        //    using (DbConnection con = new DbConnection())
            //        //    {
            //        //        con.OpenConnection();
            //        //        OnScreeningStatusHelper.SaveScreeningSubjectStatus(con, studyId, _subjectKey, "OnScreeningIECC", SubjectStatusCode.Status.Fail, txtIECCPFComment.Text);
            //        //        lblSubjectStatus.ForeColor = System.Drawing.Color.Orange;
            //        //        lblSubjectStatus.Text = "Failed";
            //        //        con.CloseConnection();
            //        //    }



            //    }
            //}
            //catch (SqlException ex)
            //{
            //    
            //    HelperFunctions.ShowMessageBox(ex.Message, "Screening IECC Failed", MessageBoxButtons.OK, RadMessageIcon.Error);
            //}
        }
        /// <summary>
        /// Check Drop/Fail Status IECC
        /// </summary>
        /// <param name="subjectkey"></param>
        private void CheckSubjectDroppedFailedIECC(string subjectkey)
        {
            bool subjectDroppedUrineTest = DroppedHelper.IsSubjectDroppedIECC(studyId, subjectkey);
            bool subjectFailedUrineTest = FailedHelper.IsSubjectFailedIECC(studyId, subjectkey);
            //======================== Drop================================

            if (subjectDroppedUrineTest == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvIECC")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        pgvUrineTests.Image = null;
                        Image Dropped = new Bitmap(Properties.Resources.dropped2);
                        pgvUrineTests.Image = null;
                        pgvIECC.Image = Dropped;
                        foreach (Control c in pgvIECC.Controls)
                        {
                            c.Enabled = false;
                        }


                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }

                }



                // }
            }
            //======================== END Drop=======================
            //======================== Failed================================

            else if (subjectFailedUrineTest == true)
            {
                foreach (Control ctrl in pgvOnScreeningPages.Controls)
                {
                    if (ctrl.Name == "pgvIECC")
                    {
                        lblSubjectStatus.ForeColor = System.Drawing.Color.Red;
                        lblSubjectStatus.Text = "Dropped";
                        pgvConsent.Image = null;
                        pgvPCF.Image = null;
                        pgvVCF.Image = null;
                        pgvICF.Image = null;
                        pgvInfluenza.Image = null;
                        pgvIDVerfication.Image = null;
                        pgvMedicalInterview.Image = null;
                        pgvDemographics.Image = null;
                        pgvMedicalHistory.Image = null;
                        pgvScreeningEvaluations.Image = null;
                        pgvHeightWeight.Image = null;
                        pgvVitals.Image = null;
                        pgvUrineTests.Image = null;

                        Image Failed = new Bitmap(Properties.Resources.FailedT1);
                        // pgvScreeningUrineSample.Image = null;
                        pgvIECC.Image = Failed;

                        foreach (Control c in pgvIECC.Controls)
                        {
                            c.Enabled = false;
                        }


                    }
                    else
                    {
                        ctrl.Enabled = false;
                    }
                }
                //======================== END Failed=======================
            }
        }
        private void DisableAllControlsAfterSubjectDropIECC()
        {
            foreach (Control ctrl in pgvOnScreeningPages.Controls)
            {
                if (ctrl.Name == "pgvIECC")
                {
                    ctrl.Enabled = true;
                }
                else
                {
                    ctrl.Enabled = false;
                }
            }
        }
        #endregion

        /// <summary>
        /// Form Closing
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Screening_FormClosing(object sender, FormClosingEventArgs e)
        {
            //this.Hide();
            //this.Parent = null;
            //e.Cancel = true;
            IDisposeHelper.DisposeForm(this);
        }
        #region =============================Lock/Unlock for All Tabs==================
        string lockUnlockStatus = string.Empty;
        /// <summary>
        /// Defines the commonEvents
        /// </summary>
        internal CommonEvents commonEvents = new CommonEvents();
        private void ToggleLockUnlockButtonText()
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            string _where = "SubjectKey=@subjectKey";

            SqlParameter sp1 = new SqlParameter("@subjectKey", _subjectKey);

            SqlParameter[] sParams = null;
            try
            {
                //.......Study Design......
                if (pgvOnScreeningPages.SelectedPage == pgvInfluenza)
                {

                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningInfluenza", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        //btnLockUnlockInfluenza.Text = "Unlock";
                        // btnLockUnlockInfluenza.Image = Resources.lock_closed;
                    }
                    else
                    {
                        // btnLockUnlockInfluenza.Text = "Lock";

                        // btnLockUnlockInfluenza.Image = Resources.lock_open;
                    }

                }
                if (pgvOnScreeningPages.SelectedPage == pgvConsent)
                {
                    if (pgvConsentPCFVCF.SelectedPage == pgvPCF)
                    {
                        sParams = new SqlParameter[] { sp1 };
                        lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningPCF", _where, sParams);
                        if (lockUnlockStatus == "Locked")
                        {
                            //btnLockUnlockPCF.Text = "Unlock";
                            // btnLockUnlockPCF.Image = Resources.lock_closed;
                        }
                        else
                        {
                            //  btnLockUnlockPCF.Text = "Lock";

                            // btnLockUnlockPCF.Image = Resources.lock_open;
                        }
                    }
                    else if (pgvConsentPCFVCF.SelectedPage == pgvVCF)
                    {
                        sParams = new SqlParameter[] { sp1 };
                        lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningVCF", _where, sParams);
                        if (lockUnlockStatus == "Locked")
                        {
                            //  btnLockUnlockVCF.Text = "Unlock";
                            //  btnLockUnlockVCF.Image = Resources.lock_closed;
                        }
                        else
                        {
                            // btnLockUnlockVCF.Text = "Lock";

                            // btnLockUnlockVCF.Image = Resources.lock_open;
                        }
                    }


                }

                if (pgvOnScreeningPages.SelectedPage == pgvICF)
                {

                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningICF", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        //btnLockUnlockICF.Text = "Unlock";
                        // btnLockUnlockICF.Image = Resources.lock_closed;
                    }
                    else
                    {
                        // btnLockUnlockICF.Text = "Lock";

                        // btnLockUnlockICF.Image = Resources.lock_open;
                    }

                }
                if (pgvOnScreeningPages.SelectedPage == pgvMedicalInterview)
                {
                    if (pgvMedicalInterviews.SelectedPage == pgvDemographics)
                    {
                        sParams = new SqlParameter[] { sp1 };
                        lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningDemographic", _where, sParams);
                        if (lockUnlockStatus == "Locked")
                        {
                            //btnLockUnlockDemographic.Text = "Unlock";
                            //btnLockUnlockDemographic.Image = Resources.lock_closed;
                        }
                        else
                        {
                            // btnLockUnlockDemographic.Text = "Lock";

                            // btnLockUnlockDemographic.Image = Resources.lock_open;
                        }
                    }
                    else if (pgvMedicalInterviews.SelectedPage == pgvScreeningEvaluations)
                    {
                        sParams = new SqlParameter[] { sp1 };
                        lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningEvaluationBySubjectKey", _where, sParams);
                        if (lockUnlockStatus == "Locked")
                        {
                            //btnLockUnlockEval.Text = "Unlock";
                            // btnLockUnlockEval.Image = Resources.lock_closed;
                        }
                        else
                        {
                            //  btnLockUnlockEval.Text = "Lock";

                            // btnLockUnlockEval.Image = Resources.lock_open;
                        }
                    }
                    else if (pgvMedicalInterviews.SelectedPage == pgvMedicalHistory)
                    {
                        sParams = new SqlParameter[] { sp1 };
                        lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("MedicalHistoryBySubjectKey", _where, sParams);
                        if (lockUnlockStatus == "Locked")
                        {
                            //btnLockUnlockMedical.Text = "Unlock";
                            // btnLockUnlockMedical.Image = Resources.lock_closed;
                        }
                        else
                        {
                            // btnLockUnlockMedical.Text = "Lock";

                            // btnLockUnlockMedical.Image = Resources.lock_open;
                        }
                    }



                }
                // if (pgvOnScreeningPages.SelectedPage == pgvECG)
                // {
                if (pgvOnScreeningPages.SelectedPage == pgvHeightWeight)
                {
                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningHeightWeight", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        //btnLockUnlockHeightWeight.Text = "Unlock";
                        // btnLockUnlockHeightWeight.Image = Resources.lock_closed;
                    }
                    else
                    {
                        // btnLockUnlockHeightWeight.Text = "Lock";

                        // btnLockUnlockHeightWeight.Image = Resources.lock_open;
                    }
                }
                else if (pgvMedicalInterviews.SelectedPage == pgvVitals)
                {
                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningVital", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        // btnLockUnlockVital.Text = "Unlock";
                        // btnLockUnlockVital.Image = Resources.lock_closed;
                    }
                    else
                    {
                        // btnLockUnlockVital.Text = "Lock";

                        // btnLockUnlockVital.Image = Resources.lock_open;
                    }
                }
                else if (pgvMedicalInterviews.SelectedPage == pgvECGG)
                {
                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningECG", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        // btnLcokUnlockECG.Text = "Unlock";
                        // btnLcokUnlockECG.Image = Resources.lock_closed;
                    }
                    else
                    {
                        // btnLcokUnlockECG.Text = "Lock";

                        // btnLcokUnlockECG.Image = Resources.lock_open;
                    }
                }

                else if (pgvMedicalInterviews.SelectedPage == pgvSCSafetyLabs)
                {
                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningBlood", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        btnLockUnlockBlood.Text = "Unlock";
                        btnLockUnlockBlood.Image = Resources.lock_closed;
                    }
                    else
                    {
                        btnLockUnlockBlood.Text = "Lock";

                        btnLockUnlockBlood.Image = Resources.lock_open;
                    }
                }

                //}

                if (pgvOnScreeningPages.SelectedPage == pgvUrineTests)
                {

                    sParams = new SqlParameter[] { sp1 };
                    lockUnlockStatus = LockUnlockHelper.GetLockUnlockStatus("ScreeningUrine", _where, sParams);
                    if (lockUnlockStatus == "Locked")
                    {
                        //11-17-2017
                        //   btnLockUnlockUrine.Text = "Unlock";
                        //  btnLockUnlockUrine.Image = Resources.lock_closed;
                        //11-17-2017
                    }
                    else
                    {
                        //11-17-2017
                        //  btnLockUnlockUrine.Text = "Lock";

                        //  btnLockUnlockUrine.Image = Resources.lock_open;
                        //11-17-2017
                    }

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void LockUnlockControls()
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }

            try
            {

                if (pgvOnScreeningPages.SelectedPage == pgvInfluenza)
                {

                    if (lockUnlockStatus == "Locked")
                    {
                        btneSignInfluenza.Enabled = false;

                        commonEvents.LockControls(pgvInfluenza);
                        //btnLockUnlockInfluenza.Enabled = true;
                    }
                    else
                    {
                        btneSignInfluenza.Enabled = true;

                        // btnLockUnlockInfluenza.Enabled = true;
                        commonEvents.UnlockControls(pgvInfluenza);
                    }
                }
            }
            catch (SqlException ex)
            {
                throw ex;
            }
        }

        //................... Influenza.................................
        /// <summary>
        /// Lock / Unlock Controls
        /// </summary>
        private void LockAndUnlockInfluenzaControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningInfluenza] where StudyID=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningInfluenza] SET Status=@Status,ModifiedBy='" + App.EsignedUser.UserName + "',ModifiedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }


        //.......................ID Verification............................

        private void LockAndUnlockIDVerificationControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningIDVerification] where StudyID=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningIDVerification] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        // ................... PCF....................................
        private void LockAndUnlockPCFControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningPCF] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningPCF] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        //.....................VCF......................................

        private void LockAndUnlockVCFControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningVCF] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVCF] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //......................ICF.......................................
        private void LockAndUnlockICFControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningICF] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningICF] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //.......................Demographics..............................
        private void LockAndUnlockDemographicsControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningDemographic] where StudyID=@studyID SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyID", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningDemographic] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //......................... Screening Evaluation......................
        private void LockAndUnlockInScreeningEvaluationControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningEvaluationBySubjectKey] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningEvaluationBySubjectKey] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //............................ Medical History............................
        private void LockAndUnlockMedicalHistoryControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[MedicalHistoryBySubjectKey] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[MedicalHistoryBySubjectKey] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //................................. Height & Weight...........................
        private void LockAndUnlockHeightWeightControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningHeightWeight] where StudyID=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningHeightWeight] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //.................................... Vitals .......................................
        private void LockAndUnlockVitalsControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningVital] where StudyId=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningVital] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //.................................... ECG............................................
        private void LockAndUnlockECGControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningECG ] where StudyID=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningECG ] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //.................................... Blood...................................

        private void LockAndUnlockBloodControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningBloodSample] where StudyID=@studyid AND SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@studyid", studyId);
                    SqlParameter p2 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1, p2 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p3 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2, p3 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningBloodSample] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE StudyID='" + studyId + "' AND SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }




        //.................................... Urine Sample...................................
        private void LockAndUnlockUrineSampleControls(string tableName, string moduleName, string tabName, string msg)
        {
            //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningLabUrineSample] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningLabUrineSample] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        //..................................... Urine....................................
        private void LockAndUnlockUrineControls(string tableName, string moduleName, string tabName, string msg)
        { //  Lock the Controls After E-Sign  
            try
            {
                string status = string.Empty;
                if (lockUnlockStatus == "Locked")
                {
                    status = "Unlocked";
                }
                else
                {
                    status = "Locked";
                }
                using (DbConnection dbConn = new DbConnection())
                {
                    dbConn.OpenConnection();
                    string selectQuery = "SELECT count(*) as 'count' FROM [dbo].[ScreeningUrine] where SubjectKey=@subjectKey";
                    SqlParameter p1 = new SqlParameter("@subjectKey", _subjectKey);
                    SqlParameter[] sps = new SqlParameter[] { p1 };
                    DataTable dtSelect = new DataTable();
                    dtSelect = dbConn.ExecuteSelectQuery(selectQuery, sps, false);
                    int count = (int)dtSelect.Rows[0]["count"];
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, GetSelectedPage().Text.Trim(), reason, tabName, myBatchAudit))
                    {
                        return;
                    }
                    SqlParameter[] sqlParams;
                    SqlParameter p2 = new SqlParameter("@Status", status);
                    sqlParams = new SqlParameter[] { p1, p2 };
                    string UpdateQuery = string.Format(@"UPDATE [dbo].[ScreeningUrine] SET Status=@Status,DroppedBy='" + App.EsignedUser.UserName + "',DroppedDate='" + DateTime.Now + "' WHERE SubjectKey='" + _subjectKey + "'");
                    dbConn.ExecuteUpdateQuery(UpdateQuery, sqlParams, false);
                    ToggleLockUnlockButtonText();
                    LockUnlockControls();
                }
            }
            catch (Exception ex)
            {
                LockUnlockHelper.ShowMessageBox(ex.ToString(), Application.ProductName, MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }


        // ...... Lock/Unlock buttons.....................

        private void btnLockUnlockInfluenza_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvInfluenza)
                {
                    string moduleName = "Screening Influenza";
                    string tabName = "[dbo].[ScreeningInfluenza]";
                    string msg = "Screening Influnza -Locked by :'";
                    LockAndUnlockInfluenzaControls("[dbo].[ScreeningInfluenza]", moduleName, tabName, msg);

                }
            }

            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Influenza", MessageBoxButtons.OK, RadMessageIcon.Error);

            }
        }
        private void btnLockUnlockIDVer_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvIDVerfication)
                {
                    string moduleName = "Screening IDVerification";
                    string tabName = "[dbo].[ScreeningIDVerification]";
                    string msg = "Screening IDVerification -Locked by :'";
                    LockAndUnlockIDVerificationControls("[dbo].[ScreeningIDVerification]", moduleName, tabName, msg);

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ID Verification", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockPCF_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvConsent)
                {
                    if (pgvConsentPCFVCF.SelectedPage == pgvPCF)
                    {
                        string moduleName = "Screening PCF";
                        string tabName = "[dbo].[ScreeningPCF]";
                        string msg = "Screening PCF -Locked by :'";
                        LockAndUnlockPCFControls("[dbo].[ScreeningPCF]", moduleName, tabName, msg);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "PCF", MessageBoxButtons.OK, RadMessageIcon.Error);

            }
        }

        private void btnLockUnlockVCF_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvConsent)
                {
                    if (pgvConsentPCFVCF.SelectedPage == pgvVCF)
                    {
                        string moduleName = "Screening VCF";
                        string tabName = "[dbo].[ScreeningVCF]";
                        string msg = "Screening VCF -Locked by :'";
                        LockAndUnlockVCFControls("[dbo].[ScreeningVCF]", moduleName, tabName, msg);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "VCF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockICF_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvICF)
                {
                    string moduleName = "Screening ICF";
                    string tabName = "[dbo].[ScreeningICF]";
                    string msg = "Screening ICF -Locked by :'";
                    LockAndUnlockICFControls("[dbo].[ScreeningICF]", moduleName, tabName, msg);

                }
            }

            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ICF", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockDemographic_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvMedicalInterview)
                {
                    if (pgvMedicalInterviews.SelectedPage == pgvDemographics)
                    {
                        string moduleName = "Screening Demographic";
                        string tabName = "[dbo].[ScreeningDemographic]";
                        string msg = "Screening Demographic -Locked by :'";
                        LockAndUnlockDemographicsControls("[dbo].[ScreeningDemographic]", moduleName, tabName, msg);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Demographic", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockEval_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvMedicalInterview)
                {
                    if (pgvMedicalInterviews.SelectedPage == pgvScreeningEvaluations)
                    {
                        string moduleName = "Screening ScreeningEvaluation";
                        string tabName = "[dbo].[ScreeningEvaluationBySubjectKey]";
                        string msg = "Screening Screening Evaluation -Locked by :'";
                        LockAndUnlockInScreeningEvaluationControls("[dbo].[ScreeningEvaluationBySubjectKey]", moduleName, tabName, msg);
                    }
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Screening Evaluation", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockMedical_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvMedicalInterview)
                {
                    if (pgvMedicalInterviews.SelectedPage == pgvMedicalHistory)
                    {
                        string moduleName = "Screening MedicalHistory";
                        string tabName = "[dbo].[MedicalHistoryBySubjectKey]";
                        string msg = "Screening MedicalHistory -Locked by :'";
                        LockAndUnlockMedicalHistoryControls("[dbo].[MedicalHistoryBySubjectKey]", moduleName, tabName, msg);
                    }


                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Medical History", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockHeightWeight_Click(object sender, EventArgs e)
        {

            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {

                if (pgvOnScreeningPages.SelectedPage == pgvHeightWeight)
                {
                    string moduleName = "Screening HeightWeight";
                    string tabName = "[dbo].[ScreeningHeightWeight]";
                    string msg = "Screening MedicalHistory -Locked by :'";
                    LockAndUnlockHeightWeightControls("[dbo].[ScreeningHeightWeight]", moduleName, tabName, msg);
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Height Weight", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockVital_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvVitals)
                {
                    string moduleName = "Screening vitals";
                    string tabName = "[dbo].[ScreeningVital]";
                    string msg = "Screening Vital -Locked by :'";
                    LockAndUnlockVitalsControls("[dbo].[ScreeningVital]", moduleName, tabName, msg);
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Vital", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLcokUnlockECG_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {

                if (pgvOnScreeningPages.SelectedPage == pgvECGG)
                {
                    string moduleName = "Screening ECG";
                    string tabName = "[dbo].[ScreeningECG]";
                    string msg = "Screening ECG -Locked by :'";
                    LockAndUnlockVitalsControls("[dbo].[ScreeningECG]", moduleName, tabName, msg);
                }



            }

            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "ECG", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockBlood_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {

                if (pgvOnScreeningPages.SelectedPage == pgvSCSafetyLabs)
                {
                    if (pgvSafetyLabTests.SelectedPage == pgvLabBlood)
                    {
                        string moduleName = "Screening Blood";
                        string tabName = "[dbo].[ScreeningBloodSample]";
                        string msg = "Screening Blood -Locked by :'";
                        LockAndUnlockBloodControls("[dbo].[ScreeningBloodSample]", moduleName, tabName, msg);
                    }

                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Boold Sample", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        private void btnLockUnlockUrine_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(studyId.Trim()) || studyId.Trim() == "Select a Project")
            {
                return;
            }
            try
            {
                if (pgvOnScreeningPages.SelectedPage == pgvUrineTests)
                {
                    string moduleName = "Screening Urine";
                    string tabName = "[dbo].[ScreeningUrine]";
                    string msg = "Screening Urine -Locked by :'";
                    LockAndUnlockUrineControls("[dbo].[ScreeningUrine]", moduleName, tabName, msg);
                }
            }
            catch (SqlException ex)
            {
                HelperFunctions.ShowMessageBox(ex.Message, "Urine", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void pgvConsentPCFVCF_SelectedPageChanged(object sender, EventArgs e)
        {
            if (!IsStudyIDSelected())
                return;
            pcmsWordSCVCF.Document.Selection.SelectAll();
            pcmsWordSCVCF.Delete(false);
            pcmsWordSCPCF.Document.Selection.SelectAll();
            pcmsWordSCPCF.Delete(false);
            //if (pgvConsentPCFVCF.SelectedPage == pgvPCF)
            //{

            //    txtScanPCFandVCF.Focus();
            //    LoadPCFDocument(ValueOfKey);
            //    CheckeSign(ValueOfKey);
            //    CheckIfPCFAllProcessCompleted(ValueOfKey);
            //}
            //else if (pgvConsentPCFVCF.SelectedPage == pgvVCF)
            //{

            //    txtScanVCF.Focus();
            //    LoadVCFDocument(ValueOfKey);
            //    CheckeSign(ValueOfKey);
            //    CheckIfVCFAllProcessCompleted(ValueOfKey);
            //}
            pgvOnScreeningPages_SelectedPageChanged(null, null);
            // LockAccess(pgvConsentPCFVCF.SelectedPage);
        }
        /// <summary>
        /// General :subject Dropped for all tabs 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSubjectDroppedScreening_Click(object sender, EventArgs e)
        {
            try
            {
                if (ddSubjects.SelectedIndex > -1)
                {
                    frmCommentDialogBox commentBox = new frmCommentDialogBox();
                    if (commentBox.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    string reason = string.Format("This action will be signed by:'" + " " + App.EsignedUser.UserName + "'");
                    if (!App.SaveChangesWithReason("ESignature", ModuleNames, "Influenza", reason, "Drop Subject", myBatchAudit))
                    {
                        return;
                    }
                    droppedComment = commentBox.txtComment.Text.Trim();
                    commentBox.Dispose();
                    string _pageName = string.Empty;
                    string _tableName = string.Empty;
                    // .... Drop Influenza
                    if (pgvOnScreeningPages.SelectedPage == pgvInfluenza)
                    {
                        // SubjectDroppedInfluenza();
                        _pageName = pgvInfluenza.Name;
                        _tableName = "ScreeningInfluenza";
                    }
                    // .... Drop ID verification
                    else if (pgvOnScreeningPages.SelectedPage == pgvIDVerfication)
                    {
                        // SubjectDroppedIDVerification();
                        _pageName = pgvIDVerfication.Name;
                        _tableName = "ScreeningIDVerification";
                    }
                    // .... Drop Consent
                    else if (pgvOnScreeningPages.SelectedPage == pgvConsent)
                    {
                        if (pgvConsentPCFVCF.SelectedPage == pgvPCF)
                        {
                            // SubjectDroppedPCF();
                            _pageName = pgvPCF.Name;
                            _tableName = "ScreeningPCF";
                        }
                        else if (pgvConsentPCFVCF.SelectedPage == pgvVCF)
                        {
                            // SubjectDroppedVCF();
                            _pageName = pgvVCF.Name;
                            _tableName = "ScreeningVCF";
                        }
                    }
                    // .... Drop ICF
                    else if (pgvOnScreeningPages.SelectedPage == pgvICF)
                    {
                        // SubjectDroppedICF();
                        _pageName = pgvICF.Name;
                        _tableName = "ScreeningICF";
                    }


                    // .... Drop Medical Interview
                    else if (pgvOnScreeningPages.SelectedPage == pgvMedicalInterview)
                    {
                        if (pgvMedicalInterviews.SelectedPage == pgvDemographics)
                        {
                            // SubjectDroppedDemographics();
                            _pageName = pgvDemographics.Name;
                            _tableName = "ScreeningDemographic";
                        }
                        else if (pgvMedicalInterviews.SelectedPage == pgvScreeningEvaluations)
                        {
                            //SubjectDroppedScreeningEval();
                            _pageName = pgvScreeningEvaluations.Name;
                            _tableName = "ScreeningEvaluationBySubjectKey";
                        }
                        else if (pgvMedicalInterviews.SelectedPage == pgvMedicalHistory)
                        {
                            //SubjectDroppedMedicalHistory();
                            _pageName = pgvMedicalHistory.Name;
                            _tableName = "MedicalHistoryBySubjectKey";
                        }
                    }
                    // .... Drop Body Mesurnment
                    // else if (pgvOnScreeningPages.SelectedPage == pgvECG)
                    // {
                    else if (pgvOnScreeningPages.SelectedPage == pgvHeightWeight)
                    {
                        // SubjectDroppedHW();
                        _pageName = pgvHeightWeight.Name;
                        _tableName = "ScreeningHeightWeight";
                    }
                    else if (pgvOnScreeningPages.SelectedPage == pgvVitals)
                    {
                        //SubjectDroppedVitals();
                        _pageName = pgvVitals.Name;
                        _tableName = "ScreeningVital";
                    }
                    else if (pgvOnScreeningPages.SelectedPage == pgvECGG)
                    {
                        //SubjectDroppedECG();
                        _pageName = pgvECGG.Name;
                        _tableName = "ScreeningECG";
                    }
                    else if (pgvOnScreeningPages.SelectedPage == pgvSCSafetyLabs)
                    {
                        if (pgvSafetyLabTests.SelectedPage == pgvLabBlood)
                        {
                            // SubjectDroppedBloodSample();
                            _pageName = pgvLabBlood.Name;
                            _tableName = "ScreeningBloodSample";
                        }
                        else if (pgvSafetyLabTests.SelectedPage == pgvLabUrine)
                        {
                            // SubjectDroppedUrineSample();
                            _pageName = pgvLabUrine.Name;
                            _tableName = "ScreeningUrineSample";
                        }


                    }
                    // }
                    // .... Drop Urine
                    else if (pgvOnScreeningPages.SelectedPage == pgvUrineTests)
                    {
                        _pageName = pgvUrineTests.Name;
                        _tableName = "ScreeningUrineTest";
                    }
                    // .... Drop IECC
                    else if (pgvOnScreeningPages.SelectedPage == pgvIECC)
                    {
                        // SubjectDroppedIECC();
                        _pageName = pgvIECC.Name;
                        _tableName = "ScreeningIECCQuestionsBySubjectKey";
                    }
                    using (DbConnection db = new DbConnection())
                    {
                        db.OpenConnection();
                        OnScreeningStatusHelper.SaveScreeningSubjectStatusByTab(db, studyId, ValueOfKey, _tableName, _pageName, _pageName + "Dropped", SubjectStatusCode.Status.Dropped, droppedComment, App.EsignedUser.UserName);
                        db.CloseConnection();
                    }
                    LockControlsByTabIfSubjectDropped(true);
                    LoadSubjectStatusByTab(_SelectedPage != null ? _SelectedPage.Name : "");
                }
            }
            catch (Exception ex)
            {

                HelperFunctions.ShowMessageBox(ex.Message, "Screening", MessageBoxButtons.OK, RadMessageIcon.Error);
            }
        }

        #region ====================== All Grids Cell Formating===============================
        private void rgvScreeningEvaluation_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewDataRowInfo)
            {
                e.CellElement.Text = (e.CellElement.RowIndex + 1).ToString();
                e.CellElement.TextImageRelation = TextImageRelation.ImageBeforeText;
            }
            else
            {
                e.CellElement.ResetValue(LightVisualElement.TextImageRelationProperty, ValueResetFlags.Local);
            }
        }

        private void rgvMedicalHistory_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewDataRowInfo)
            {
                e.CellElement.Text = (e.CellElement.RowIndex + 1).ToString();
                e.CellElement.TextImageRelation = TextImageRelation.ImageBeforeText;
            }
            else
            {
                e.CellElement.ResetValue(LightVisualElement.TextImageRelationProperty, ValueResetFlags.Local);
            }
        }

        private void rgvIECCInclusion_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewDataRowInfo)
            {
                e.CellElement.Text = (e.CellElement.RowIndex + 1).ToString();
                e.CellElement.TextImageRelation = TextImageRelation.ImageBeforeText;
            }
            else
            {
                e.CellElement.ResetValue(LightVisualElement.TextImageRelationProperty, ValueResetFlags.Local);
            }
        }

        private void rgvIECCExclusion_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewDataRowInfo)
            {
                e.CellElement.Text = (e.CellElement.RowIndex + 1).ToString();
                e.CellElement.TextImageRelation = TextImageRelation.ImageBeforeText;
            }
            else
            {
                e.CellElement.ResetValue(LightVisualElement.TextImageRelationProperty, ValueResetFlags.Local);
            }
        }
        #endregion
        private void pgvTestResults_SelectedPageChanged(object sender, EventArgs e)
        {
            LoadDataBySelectedTab();
        }
        private void cbNoFastRequired_CheckStateChanged(object sender, EventArgs e)
        {
            if (cbNoFastRequired.Checked)
            {
                cbYesFastRequired.Checked = false;
                gbFastingScreeningDateTime.Enabled = false;
            }
            else
            {
                cbYesFastRequired.Checked = true;
            }
        }

        private void lblSCDrugPIComment_MouseHover(object sender, EventArgs e)
        {
            //RadToolTip _drugPIComment = new RadToolTip();
            //_drugPIComment.Show("Hello!", 2000);
        }

        private void rchkIECCInclusionQ1No_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked) && HelperFunctions.ShowMessageBox("Are you sure to proceed with 'No'?", "IECC", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
            {
                args.Cancel = true;
            }
        }

        private void rchkIECCInclusionQ1NA_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked) && HelperFunctions.ShowMessageBox("Are you sure to proceed with 'NA'?", "IECC", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
            {
                args.Cancel = true;
            }
        }

        private void rchkIECCExclusionQ1Yes_CheckStateChanging(object sender, CheckStateChangingEventArgs args)
        {
            if (args.NewValue.Equals(CheckState.Checked) && HelperFunctions.ShowMessageBox("Are you sure to proceed with 'Yes'?", "IECC", MessageBoxButtons.YesNo, RadMessageIcon.Question).Equals(DialogResult.No))
            {
                args.Cancel = true;
            }
        }
    }
}